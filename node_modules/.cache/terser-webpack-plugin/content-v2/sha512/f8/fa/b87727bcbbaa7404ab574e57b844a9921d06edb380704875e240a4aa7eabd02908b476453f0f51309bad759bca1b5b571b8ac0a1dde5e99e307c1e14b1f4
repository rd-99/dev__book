{"code":"(this[\"webpackJsonp@dev-book/local-client\"]=this[\"webpackJsonp@dev-book/local-client\"]||[]).push([[326],{503:function(e,n){!function(e){var n=e.languages.parser=e.languages.extend(\"markup\",{keyword:{pattern:/(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,lookbehind:!0},variable:{pattern:/(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,lookbehind:!0,inside:{punctuation:/\\.|:+/}},function:{pattern:/(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,lookbehind:!0,inside:{keyword:{pattern:/(^@)(?:GET_|SET_)/,lookbehind:!0},punctuation:/\\.|:+/}},escape:{pattern:/\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,alias:\"builtin\"},punctuation:/[\\[\\](){};]/});n=e.languages.insertBefore(\"parser\",\"keyword\",{\"parser-comment\":{pattern:/(\\s)#.*/,lookbehind:!0,alias:\"comment\"},expression:{pattern:/(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,greedy:!0,lookbehind:!0,inside:{string:{pattern:/(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,lookbehind:!0},keyword:n.keyword,variable:n.variable,function:n.function,boolean:/\\b(?:true|false)\\b/,number:/\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?)\\b/i,escape:n.escape,operator:/[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,punctuation:n.punctuation}}}),e.languages.insertBefore(\"inside\",\"punctuation\",{expression:n.expression,keyword:n.keyword,variable:n.variable,function:n.function,escape:n.escape,\"parser-punctuation\":{pattern:n.punctuation,alias:\"punctuation\"}},n.tag.inside[\"attr-value\"])}(Prism)}}]);","name":"static/js/326.4f77780d.chunk.js","map":{"version":3,"names":["this","push","module","exports","Prism","parser","languages","extend","keyword","pattern","lookbehind","variable","inside","punctuation","function","escape","alias","insertBefore","expression","greedy","string","boolean","number","operator"],"sources":["static/js/326.4f77780d.chunk.js"],"mappings":"CAACA,KAAK,sCAAwCA,KAAK,uCAAyC,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEtG,IACA,SAAUC,EAAQC,IAExB,SAAWC,GACT,IAAIC,EAASD,EAAME,UAAUD,OAASD,EAAME,UAAUC,OAAO,SAAU,CACrEC,QAAW,CACTC,QAAS,+GACTC,YAAY,GAEdC,SAAY,CACVF,QAAS,4DACTC,YAAY,EACZE,OAAQ,CACNC,YAAe,UAGnBC,SAAY,CACVL,QAAS,iDACTC,YAAY,EACZE,OAAQ,CACNJ,QAAW,CACTC,QAAS,oBACTC,YAAY,GAEdG,YAAe,UAGnBE,OAAU,CACRN,QAAS,qCACTO,MAAO,WAETH,YAAe,gBAEjBR,EAASD,EAAME,UAAUW,aAAa,SAAU,UAAW,CACzD,iBAAkB,CAChBR,QAAS,UACTC,YAAY,EACZM,MAAO,WAETE,WAAc,CAEZT,QAAS,uDACTU,QAAQ,EACRT,YAAY,EACZE,OAAQ,CACNQ,OAAU,CACRX,QAAS,2CACTC,YAAY,GAEdF,QAAWH,EAAOG,QAClBG,SAAYN,EAAOM,SACnBG,SAAYT,EAAOS,SACnBO,QAAW,qBACXC,OAAU,kDACVP,OAAUV,EAAOU,OACjBQ,SAAY,iGACZV,YAAeR,EAAOQ,gBAI5BT,EAAME,UAAUW,aAAa,SAAU,cAAe,CACpDC,WAAcb,EAAOa,WACrBV,QAAWH,EAAOG,QAClBG,SAAYN,EAAOM,SACnBG,SAAYT,EAAOS,SACnBC,OAAUV,EAAOU,OACjB,qBAAsB,CACpBN,QAASJ,EAAOQ,YAChBG,MAAO,gBAERX,EAAY,IAAEO,OAAO,cACzB,CApED,CAoEGR,MAEI"},"input":"(this[\"webpackJsonp@dev-book/local-client\"] = this[\"webpackJsonp@dev-book/local-client\"] || []).push([[326],{\n\n/***/ 503:\n/***/ (function(module, exports) {\n\n(function (Prism) {\n  var parser = Prism.languages.parser = Prism.languages.extend('markup', {\n    'keyword': {\n      pattern: /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,\n      lookbehind: true\n    },\n    'variable': {\n      pattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\.|:+/\n      }\n    },\n    'function': {\n      pattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n      lookbehind: true,\n      inside: {\n        'keyword': {\n          pattern: /(^@)(?:GET_|SET_)/,\n          lookbehind: true\n        },\n        'punctuation': /\\.|:+/\n      }\n    },\n    'escape': {\n      pattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,\n      alias: 'builtin'\n    },\n    'punctuation': /[\\[\\](){};]/\n  });\n  parser = Prism.languages.insertBefore('parser', 'keyword', {\n    'parser-comment': {\n      pattern: /(\\s)#.*/,\n      lookbehind: true,\n      alias: 'comment'\n    },\n    'expression': {\n      // Allow for 3 levels of depth\n      pattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,\n      greedy: true,\n      lookbehind: true,\n      inside: {\n        'string': {\n          pattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,\n          lookbehind: true\n        },\n        'keyword': parser.keyword,\n        'variable': parser.variable,\n        'function': parser.function,\n        'boolean': /\\b(?:true|false)\\b/,\n        'number': /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?)\\b/i,\n        'escape': parser.escape,\n        'operator': /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,\n        'punctuation': parser.punctuation\n      }\n    }\n  });\n  Prism.languages.insertBefore('inside', 'punctuation', {\n    'expression': parser.expression,\n    'keyword': parser.keyword,\n    'variable': parser.variable,\n    'function': parser.function,\n    'escape': parser.escape,\n    'parser-punctuation': {\n      pattern: parser.punctuation,\n      alias: 'punctuation'\n    }\n  }, parser['tag'].inside['attr-value']);\n})(Prism);\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-parser.js"],"names":["Prism","parser","languages","extend","pattern","lookbehind","inside","alias","insertBefore","greedy","keyword","variable","function","escape","punctuation","expression"],"mappings":";;;;;AAAC,WAAUA,KAAK,EAAE;EAEjB,IAAIC,MAAM,GAAGD,KAAK,CAACE,SAAS,CAACD,MAAM,GAAGD,KAAK,CAACE,SAAS,CAACC,MAAM,CAAC,QAAQ,EAAE;IACtE,SAAS,EAAE;MACVC,OAAO,EAAE,8GAA8G;MACvHC,UAAU,EAAE;IACb,CAAC;IACD,UAAU,EAAE;MACXD,OAAO,EAAE,2DAA2D;MACpEC,UAAU,EAAE,IAAI;MAChBC,MAAM,EAAE;QACP,aAAa,EAAE;MAChB;IACD,CAAC;IACD,UAAU,EAAE;MACXF,OAAO,EAAE,gDAAgD;MACzDC,UAAU,EAAE,IAAI;MAChBC,MAAM,EAAE;QACP,SAAS,EAAE;UACVF,OAAO,EAAE,mBAAmB;UAC5BC,UAAU,EAAE;QACb,CAAC;QACD,aAAa,EAAE;MAChB;IACD,CAAC;IACD,QAAQ,EAAE;MACTD,OAAO,EAAE,oCAAoC;MAC7CG,KAAK,EAAE;IACR,CAAC;IACD,aAAa,EAAE;EAChB,CAAC,CAAC;EAEFN,MAAM,GAAGD,KAAK,CAACE,SAAS,CAACM,YAAY,CAAC,QAAQ,EAAE,SAAS,EAAE;IAC1D,gBAAgB,EAAE;MACjBJ,OAAO,EAAE,SAAS;MAClBC,UAAU,EAAE,IAAI;MAChBE,KAAK,EAAE;IACR,CAAC;IACD,YAAY,EAAE;MACb;MACAH,OAAO,EAAE,sDAAsD;MAC/DK,MAAM,EAAE,IAAI;MACZJ,UAAU,EAAE,IAAI;MAChBC,MAAM,EAAE;QACP,QAAQ,EAAE;UACTF,OAAO,EAAE,0CAA0C;UACnDC,UAAU,EAAE;QACb,CAAC;QACD,SAAS,EAAEJ,MAAM,CAACS,OAAO;QACzB,UAAU,EAAET,MAAM,CAACU,QAAQ;QAC3B,UAAU,EAAEV,MAAM,CAACW,QAAQ;QAC3B,SAAS,EAAE,oBAAoB;QAC/B,QAAQ,EAAE,iDAAiD;QAC3D,QAAQ,EAAEX,MAAM,CAACY,MAAM;QACvB,UAAU,EAAE,gGAAgG;QAC5G,aAAa,EAAEZ,MAAM,CAACa;MACvB;IACD;EACD,CAAC,CAAC;EAEFd,KAAK,CAACE,SAAS,CAACM,YAAY,CAAC,QAAQ,EAAE,aAAa,EAAE;IACrD,YAAY,EAAEP,MAAM,CAACc,UAAU;IAC/B,SAAS,EAAEd,MAAM,CAACS,OAAO;IACzB,UAAU,EAAET,MAAM,CAACU,QAAQ;IAC3B,UAAU,EAAEV,MAAM,CAACW,QAAQ;IAC3B,QAAQ,EAAEX,MAAM,CAACY,MAAM;IACvB,oBAAoB,EAAE;MACrBT,OAAO,EAAEH,MAAM,CAACa,WAAW;MAC3BP,KAAK,EAAE;IACR;EACD,CAAC,EAAEN,MAAM,CAAC,KAAK,CAAC,CAACK,MAAM,CAAC,YAAY,CAAC,CAAC;AAEvC,CAAC,EAACN,KAAK,CAAC,C","file":"x","sourcesContent":["(function (Prism) {\n\n\tvar parser = Prism.languages.parser = Prism.languages.extend('markup', {\n\t\t'keyword': {\n\t\t\tpattern: /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'variable': {\n\t\t\tpattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /\\.|:+/\n\t\t\t}\n\t\t},\n\t\t'function': {\n\t\t\tpattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'keyword': {\n\t\t\t\t\tpattern: /(^@)(?:GET_|SET_)/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\t'punctuation': /\\.|:+/\n\t\t\t}\n\t\t},\n\t\t'escape': {\n\t\t\tpattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,\n\t\t\talias: 'builtin'\n\t\t},\n\t\t'punctuation': /[\\[\\](){};]/\n\t});\n\n\tparser = Prism.languages.insertBefore('parser', 'keyword', {\n\t\t'parser-comment': {\n\t\t\tpattern: /(\\s)#.*/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'comment'\n\t\t},\n\t\t'expression': {\n\t\t\t// Allow for 3 levels of depth\n\t\t\tpattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,\n\t\t\tgreedy: true,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'string': {\n\t\t\t\t\tpattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\t'keyword': parser.keyword,\n\t\t\t\t'variable': parser.variable,\n\t\t\t\t'function': parser.function,\n\t\t\t\t'boolean': /\\b(?:true|false)\\b/,\n\t\t\t\t'number': /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?)\\b/i,\n\t\t\t\t'escape': parser.escape,\n\t\t\t\t'operator': /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,\n\t\t\t\t'punctuation': parser.punctuation\n\t\t\t}\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('inside', 'punctuation', {\n\t\t'expression': parser.expression,\n\t\t'keyword': parser.keyword,\n\t\t'variable': parser.variable,\n\t\t'function': parser.function,\n\t\t'escape': parser.escape,\n\t\t'parser-punctuation': {\n\t\t\tpattern: parser.punctuation,\n\t\t\talias: 'punctuation'\n\t\t}\n\t}, parser['tag'].inside['attr-value']);\n\n}(Prism));\n"]}}