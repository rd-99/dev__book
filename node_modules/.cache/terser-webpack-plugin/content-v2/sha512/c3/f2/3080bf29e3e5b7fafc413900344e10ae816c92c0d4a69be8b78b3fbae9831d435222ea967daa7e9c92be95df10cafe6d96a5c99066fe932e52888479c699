{"code":"(this[\"webpackJsonp@dev-book/local-client\"]=this[\"webpackJsonp@dev-book/local-client\"]||[]).push([[108],{285:function(e,n){Prism.languages.dhall={comment:/--.*|\\{-(?:[^-{]|-(?!\\})|\\{(?!-)|\\{-(?:[^-{]|-(?!\\})|\\{(?!-))*-\\})*-\\}/,string:{pattern:/\"(?:[^\"\\\\]|\\\\.)*\"|''(?:[^']|'(?!')|'''|''\\$\\{)*''(?!'|\\$)/,greedy:!0,inside:{interpolation:{pattern:/\\$\\{[^{}]*\\}/,inside:{expression:{pattern:/(^\\$\\{)[\\s\\S]+(?=\\}$)/,lookbehind:!0,alias:\"language-dhall\",inside:null},punctuation:/\\$\\{|\\}/}}}},label:{pattern:/`[^`]*`/,greedy:!0},url:{pattern:/\\bhttps?:\\/\\/[\\w.:%!$&'*+;=@~-]+(?:\\/[\\w.:%!$&'*+;=@~-]*)*(?:\\?[/?\\w.:%!$&'*+;=@~-]*)?/,greedy:!0},env:{pattern:/\\benv:(?:(?!\\d)\\w+|\"(?:[^\"\\\\=]|\\\\.)*\")/,greedy:!0,inside:{function:/^env/,operator:/^:/,variable:/[\\s\\S]+/}},hash:{pattern:/\\bsha256:[\\da-fA-F]{64}\\b/,inside:{function:/sha256/,operator:/:/,number:/[\\da-fA-F]{64}/}},keyword:/\\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\\b|\\u2200/,builtin:/\\b(?:Some|None)\\b/,boolean:/\\b(?:False|True)\\b/,number:/\\bNaN\\b|-?\\bInfinity\\b|[+-]?\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/,operator:/\\/\\\\|\\/\\/\\\\\\\\|&&|\\|\\||===|[!=]=|\\/\\/|->|\\+\\+|::|[+*#@=:?<>|\\\\\\u2227\\u2a53\\u2261\\u2afd\\u03bb\\u2192]/,punctuation:/\\.\\.|[{}\\[\\](),./]/,\"class-name\":/\\b[A-Z]\\w*\\b/},Prism.languages.dhall.string.inside.interpolation.inside.expression.inside=Prism.languages.dhall}}]);","name":"static/js/108.77b87005.chunk.js","map":{"version":3,"names":["this","push","module","exports","Prism","languages","dhall","comment","string","pattern","greedy","inside","interpolation","expression","lookbehind","alias","punctuation","label","url","env","function","operator","variable","hash","number","keyword","builtin","boolean"],"sources":["static/js/108.77b87005.chunk.js"],"mappings":"CAACA,KAAK,sCAAwCA,KAAK,uCAAyC,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEtG,IACA,SAAUC,EAAQC,GAKxBC,MAAMC,UAAUC,MAAQ,CAItBC,QAAW,yEACXC,OAAU,CACRC,QAAS,4DACTC,QAAQ,EACRC,OAAQ,CACNC,cAAiB,CACfH,QAAS,eACTE,OAAQ,CACNE,WAAc,CACZJ,QAAS,wBACTK,YAAY,EACZC,MAAO,iBACPJ,OAAQ,MAGVK,YAAe,cAKvBC,MAAS,CACPR,QAAS,UACTC,QAAQ,GAEVQ,IAAO,CAELT,QAAS,yFACTC,QAAQ,GAEVS,IAAO,CAELV,QAAS,yCACTC,QAAQ,EACRC,OAAQ,CACNS,SAAY,OACZC,SAAY,KACZC,SAAY,YAGhBC,KAAQ,CAENd,QAAS,4BACTE,OAAQ,CACNS,SAAY,SACZC,SAAY,IACZG,OAAU,mBAIdC,QAAW,qFACXC,QAAW,oBACXC,QAAW,qBACXH,OAAU,gFACVH,SAAY,qGACZL,YAAe,qBAEf,aAAc,gBAEhBZ,MAAMC,UAAUC,MAAME,OAAOG,OAAOC,cAAcD,OAAOE,WAAWF,OAASP,MAAMC,UAAUC,KAEtF"},"input":"(this[\"webpackJsonp@dev-book/local-client\"] = this[\"webpackJsonp@dev-book/local-client\"] || []).push([[108],{\n\n/***/ 285:\n/***/ (function(module, exports) {\n\n// ABNF grammar:\n// https://github.com/dhall-lang/dhall-lang/blob/master/standard/dhall.abnf\n\nPrism.languages.dhall = {\n  // Multi-line comments can be nested. E.g. {- foo {- bar -} -}\n  // The multi-line pattern is essentially this:\n  //   \\{-(?:[^-{]|-(?!\\})|\\{(?!-)|<SELF>)*-\\}\n  'comment': /--.*|\\{-(?:[^-{]|-(?!\\})|\\{(?!-)|\\{-(?:[^-{]|-(?!\\})|\\{(?!-))*-\\})*-\\}/,\n  'string': {\n    pattern: /\"(?:[^\"\\\\]|\\\\.)*\"|''(?:[^']|'(?!')|'''|''\\$\\{)*''(?!'|\\$)/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /\\$\\{[^{}]*\\}/,\n        inside: {\n          'expression': {\n            pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n            lookbehind: true,\n            alias: 'language-dhall',\n            inside: null // see blow\n          },\n\n          'punctuation': /\\$\\{|\\}/\n        }\n      }\n    }\n  },\n  'label': {\n    pattern: /`[^`]*`/,\n    greedy: true\n  },\n  'url': {\n    // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L596\n    pattern: /\\bhttps?:\\/\\/[\\w.:%!$&'*+;=@~-]+(?:\\/[\\w.:%!$&'*+;=@~-]*)*(?:\\?[/?\\w.:%!$&'*+;=@~-]*)?/,\n    greedy: true\n  },\n  'env': {\n    // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L661\n    pattern: /\\benv:(?:(?!\\d)\\w+|\"(?:[^\"\\\\=]|\\\\.)*\")/,\n    greedy: true,\n    inside: {\n      'function': /^env/,\n      'operator': /^:/,\n      'variable': /[\\s\\S]+/\n    }\n  },\n  'hash': {\n    // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L725\n    pattern: /\\bsha256:[\\da-fA-F]{64}\\b/,\n    inside: {\n      'function': /sha256/,\n      'operator': /:/,\n      'number': /[\\da-fA-F]{64}/\n    }\n  },\n  // https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L359\n  'keyword': /\\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\\b|\\u2200/,\n  'builtin': /\\b(?:Some|None)\\b/,\n  'boolean': /\\b(?:False|True)\\b/,\n  'number': /\\bNaN\\b|-?\\bInfinity\\b|[+-]?\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/,\n  'operator': /\\/\\\\|\\/\\/\\\\\\\\|&&|\\|\\||===|[!=]=|\\/\\/|->|\\+\\+|::|[+*#@=:?<>|\\\\\\u2227\\u2a53\\u2261\\u2afd\\u03bb\\u2192]/,\n  'punctuation': /\\.\\.|[{}\\[\\](),./]/,\n  // we'll just assume that every capital word left is a type name\n  'class-name': /\\b[A-Z]\\w*\\b/\n};\nPrism.languages.dhall.string.inside.interpolation.inside.expression.inside = Prism.languages.dhall;\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-dhall.js"],"names":["Prism","languages","dhall","pattern","greedy","inside","lookbehind","alias","string","interpolation","expression"],"mappings":";;;;;AAAA;AACA;;AAEAA,KAAK,CAACC,SAAS,CAACC,KAAK,GAAG;EACvB;EACA;EACA;EACA,SAAS,EAAE,wEAAwE;EACnF,QAAQ,EAAE;IACTC,OAAO,EAAE,2DAA2D;IACpEC,MAAM,EAAE,IAAI;IACZC,MAAM,EAAE;MACP,eAAe,EAAE;QAChBF,OAAO,EAAE,cAAc;QACvBE,MAAM,EAAE;UACP,YAAY,EAAE;YACbF,OAAO,EAAE,uBAAuB;YAChCG,UAAU,EAAE,IAAI;YAChBC,KAAK,EAAE,gBAAgB;YACvBF,MAAM,EAAE,IAAI,CAAC;UACd,CAAC;;UACD,aAAa,EAAE;QAChB;MACD;IACD;EACD,CAAC;EACD,OAAO,EAAE;IACRF,OAAO,EAAE,SAAS;IAClBC,MAAM,EAAE;EACT,CAAC;EACD,KAAK,EAAE;IACN;IACAD,OAAO,EAAE,wFAAwF;IACjGC,MAAM,EAAE;EACT,CAAC;EACD,KAAK,EAAE;IACN;IACAD,OAAO,EAAE,wCAAwC;IACjDC,MAAM,EAAE,IAAI;IACZC,MAAM,EAAE;MACP,UAAU,EAAE,MAAM;MAClB,UAAU,EAAE,IAAI;MAChB,UAAU,EAAE;IACb;EACD,CAAC;EACD,MAAM,EAAE;IACP;IACAF,OAAO,EAAE,2BAA2B;IACpCE,MAAM,EAAE;MACP,UAAU,EAAE,QAAQ;MACpB,UAAU,EAAE,GAAG;MACf,QAAQ,EAAE;IACX;EACD,CAAC;EAED;EACA,SAAS,EAAE,oFAAoF;EAC/F,SAAS,EAAE,mBAAmB;EAE9B,SAAS,EAAE,oBAAoB;EAC/B,QAAQ,EAAE,+EAA+E;EACzF,UAAU,EAAE,oGAAoG;EAChH,aAAa,EAAE,oBAAoB;EAEnC;EACA,YAAY,EAAE;AACf,CAAC;AAEDL,KAAK,CAACC,SAAS,CAACC,KAAK,CAACM,MAAM,CAACH,MAAM,CAACI,aAAa,CAACJ,MAAM,CAACK,UAAU,CAACL,MAAM,GAAGL,KAAK,CAACC,SAAS,CAACC,KAAK,C","file":"x","sourcesContent":["// ABNF grammar:\n// https://github.com/dhall-lang/dhall-lang/blob/master/standard/dhall.abnf\n\nPrism.languages.dhall = {\n\t// Multi-line comments can be nested. E.g. {- foo {- bar -} -}\n\t// The multi-line pattern is essentially this:\n\t//   \\{-(?:[^-{]|-(?!\\})|\\{(?!-)|<SELF>)*-\\}\n\t'comment': /--.*|\\{-(?:[^-{]|-(?!\\})|\\{(?!-)|\\{-(?:[^-{]|-(?!\\})|\\{(?!-))*-\\})*-\\}/,\n\t'string': {\n\t\tpattern: /\"(?:[^\"\\\\]|\\\\.)*\"|''(?:[^']|'(?!')|'''|''\\$\\{)*''(?!'|\\$)/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /\\$\\{[^{}]*\\}/,\n\t\t\t\tinside: {\n\t\t\t\t\t'expression': {\n\t\t\t\t\t\tpattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\talias: 'language-dhall',\n\t\t\t\t\t\tinside: null // see blow\n\t\t\t\t\t},\n\t\t\t\t\t'punctuation': /\\$\\{|\\}/\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t'label': {\n\t\tpattern: /`[^`]*`/,\n\t\tgreedy: true\n\t},\n\t'url': {\n\t\t// https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L596\n\t\tpattern: /\\bhttps?:\\/\\/[\\w.:%!$&'*+;=@~-]+(?:\\/[\\w.:%!$&'*+;=@~-]*)*(?:\\?[/?\\w.:%!$&'*+;=@~-]*)?/,\n\t\tgreedy: true\n\t},\n\t'env': {\n\t\t// https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L661\n\t\tpattern: /\\benv:(?:(?!\\d)\\w+|\"(?:[^\"\\\\=]|\\\\.)*\")/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'function': /^env/,\n\t\t\t'operator': /^:/,\n\t\t\t'variable': /[\\s\\S]+/\n\t\t}\n\t},\n\t'hash': {\n\t\t// https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L725\n\t\tpattern: /\\bsha256:[\\da-fA-F]{64}\\b/,\n\t\tinside: {\n\t\t\t'function': /sha256/,\n\t\t\t'operator': /:/,\n\t\t\t'number': /[\\da-fA-F]{64}/\n\t\t}\n\t},\n\n\t// https://github.com/dhall-lang/dhall-lang/blob/5fde8ef1bead6fb4e999d3c1ffe7044cd019d63a/standard/dhall.abnf#L359\n\t'keyword': /\\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\\b|\\u2200/,\n\t'builtin': /\\b(?:Some|None)\\b/,\n\n\t'boolean': /\\b(?:False|True)\\b/,\n\t'number': /\\bNaN\\b|-?\\bInfinity\\b|[+-]?\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/,\n\t'operator': /\\/\\\\|\\/\\/\\\\\\\\|&&|\\|\\||===|[!=]=|\\/\\/|->|\\+\\+|::|[+*#@=:?<>|\\\\\\u2227\\u2a53\\u2261\\u2afd\\u03bb\\u2192]/,\n\t'punctuation': /\\.\\.|[{}\\[\\](),./]/,\n\n\t// we'll just assume that every capital word left is a type name\n\t'class-name': /\\b[A-Z]\\w*\\b/\n};\n\nPrism.languages.dhall.string.inside.interpolation.inside.expression.inside = Prism.languages.dhall;\n"]}}