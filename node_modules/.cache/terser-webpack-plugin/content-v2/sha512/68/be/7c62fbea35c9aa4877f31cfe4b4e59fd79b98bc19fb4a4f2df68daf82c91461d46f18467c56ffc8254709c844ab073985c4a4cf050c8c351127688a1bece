{"code":"(this[\"webpackJsonp@dev-book/local-client\"]=this[\"webpackJsonp@dev-book/local-client\"]||[]).push([[386],{563:function(e,n){Prism.languages.reason=Prism.languages.extend(\"clike\",{string:{pattern:/\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,greedy:!0},\"class-name\":/\\b[A-Z]\\w*/,keyword:/\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,operator:/\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/}),Prism.languages.insertBefore(\"reason\",\"class-name\",{character:{pattern:/'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,alias:\"string\"},constructor:{pattern:/\\b[A-Z]\\w*\\b(?!\\s*\\.)/,alias:\"variable\"},label:{pattern:/\\b[a-z]\\w*(?=::)/,alias:\"symbol\"}}),delete Prism.languages.reason.function}}]);","name":"static/js/386.9affc9ef.chunk.js","map":{"version":3,"names":["this","push","module","exports","Prism","languages","reason","extend","string","pattern","greedy","keyword","operator","insertBefore","character","alias","constructor","label","function"],"sources":["static/js/386.9affc9ef.chunk.js"],"mappings":"CAACA,KAAK,sCAAwCA,KAAK,uCAAyC,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEtG,IACA,SAAUC,EAAQC,GAExBC,MAAMC,UAAUC,OAASF,MAAMC,UAAUE,OAAO,QAAS,CACvDC,OAAU,CACRC,QAAS,sCACTC,QAAQ,GAGV,aAAc,aACdC,QAAW,4RACXC,SAAY,wGAEdR,MAAMC,UAAUQ,aAAa,SAAU,aAAc,CACnDC,UAAa,CACXL,QAAS,gEACTM,MAAO,UAETC,YAAe,CAEbP,QAAS,wBACTM,MAAO,YAETE,MAAS,CACPR,QAAS,mBACTM,MAAO,mBAKJX,MAAMC,UAAUC,OAAOY,QAEvB"},"input":"(this[\"webpackJsonp@dev-book/local-client\"] = this[\"webpackJsonp@dev-book/local-client\"] || []).push([[386],{\n\n/***/ 563:\n/***/ (function(module, exports) {\n\nPrism.languages.reason = Prism.languages.extend('clike', {\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/\n});\nPrism.languages.insertBefore('reason', 'class-name', {\n  'character': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    alias: 'string'\n  },\n  'constructor': {\n    // Negative look-ahead prevents from matching things like String.capitalize\n    pattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    alias: 'variable'\n  },\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n});\n\n// We can't match functions property, so let's not even try.\ndelete Prism.languages.reason.function;\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-reason.js"],"names":["Prism","languages","reason","extend","pattern","greedy","insertBefore","alias","function"],"mappings":";;;;;AAAAA,KAAK,CAACC,SAAS,CAACC,MAAM,GAAGF,KAAK,CAACC,SAAS,CAACE,MAAM,CAAC,OAAO,EAAE;EACxD,QAAQ,EAAE;IACTC,OAAO,EAAE,qCAAqC;IAC9CC,MAAM,EAAE;EACT,CAAC;EACD;EACA,YAAY,EAAE,YAAY;EAC1B,SAAS,EAAE,2RAA2R;EACtS,UAAU,EAAE;AACb,CAAC,CAAC;AACFL,KAAK,CAACC,SAAS,CAACK,YAAY,CAAC,QAAQ,EAAE,YAAY,EAAE;EACpD,WAAW,EAAE;IACZF,OAAO,EAAE,+DAA+D;IACxEG,KAAK,EAAE;EACR,CAAC;EACD,aAAa,EAAE;IACd;IACAH,OAAO,EAAE,uBAAuB;IAChCG,KAAK,EAAE;EACR,CAAC;EACD,OAAO,EAAE;IACRH,OAAO,EAAE,kBAAkB;IAC3BG,KAAK,EAAE;EACR;AACD,CAAC,CAAC;;AAEF;AACA,OAAOP,KAAK,CAACC,SAAS,CAACC,MAAM,CAACM,QAAQ,C","file":"x","sourcesContent":["Prism.languages.reason = Prism.languages.extend('clike', {\n\t'string': {\n\t\tpattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n\t\tgreedy: true\n\t},\n\t// 'class-name' must be matched *after* 'constructor' defined below\n\t'class-name': /\\b[A-Z]\\w*/,\n\t'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n\t'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/\n});\nPrism.languages.insertBefore('reason', 'class-name', {\n\t'character': {\n\t\tpattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n\t\talias: 'string'\n\t},\n\t'constructor': {\n\t\t// Negative look-ahead prevents from matching things like String.capitalize\n\t\tpattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n\t\talias: 'variable'\n\t},\n\t'label': {\n\t\tpattern: /\\b[a-z]\\w*(?=::)/,\n\t\talias: 'symbol'\n\t}\n});\n\n// We can't match functions property, so let's not even try.\ndelete Prism.languages.reason.function;\n"]}}