{"code":"(this[\"webpackJsonp@dev-book/local-client\"]=this[\"webpackJsonp@dev-book/local-client\"]||[]).push([[316],{493:function(e,a){Prism.languages.ocaml={comment:/\\(\\*[\\s\\S]*?\\*\\)/,string:[{pattern:/\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,greedy:!0},{pattern:/(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,greedy:!0}],number:/\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?[\\d_]+)?)/i,directive:{pattern:/\\B#\\w+/,alias:\"important\"},label:{pattern:/\\B~\\w+/,alias:\"function\"},\"type-variable\":{pattern:/\\B'\\w+/,alias:\"function\"},variant:{pattern:/`\\w+/,alias:\"variable\"},module:{pattern:/\\b[A-Z]\\w+/,alias:\"variable\"},keyword:/\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,boolean:/\\b(?:false|true)\\b/,operator:/:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,punctuation:/[(){}\\[\\]|.,:;]|\\b_\\b/}}}]);","name":"static/js/316.a3ee160b.chunk.js","map":{"version":3,"names":["this","push","module","exports","Prism","languages","ocaml","comment","string","pattern","greedy","number","directive","alias","label","variant","keyword","boolean","operator","punctuation"],"sources":["static/js/316.a3ee160b.chunk.js"],"mappings":"CAACA,KAAK,sCAAwCA,KAAK,uCAAyC,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEtG,IACA,SAAUC,EAAQC,GAExBC,MAAMC,UAAUC,MAAQ,CACtBC,QAAW,mBACXC,OAAU,CAAC,CACTC,QAAS,wBACTC,QAAQ,GACP,CACDD,QAAS,qDACTC,QAAQ,IAEVC,OAAU,6EACVC,UAAa,CACXH,QAAS,SACTI,MAAO,aAETC,MAAS,CACPL,QAAS,SACTI,MAAO,YAET,gBAAiB,CACfJ,QAAS,SACTI,MAAO,YAETE,QAAW,CACTN,QAAS,OACTI,MAAO,YAETX,OAAU,CACRO,QAAS,aACTI,MAAO,YAITG,QAAW,gSACXC,QAAW,qBAEXC,SAAY,8FACZC,YAAe,wBAGV"},"input":"(this[\"webpackJsonp@dev-book/local-client\"] = this[\"webpackJsonp@dev-book/local-client\"] || []).push([[316],{\n\n/***/ 493:\n/***/ (function(module, exports) {\n\nPrism.languages.ocaml = {\n  'comment': /\\(\\*[\\s\\S]*?\\*\\)/,\n  'string': [{\n    pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,\n    greedy: true\n  }],\n  'number': /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?[\\d_]+)?)/i,\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'important'\n  },\n  'label': {\n    pattern: /\\B~\\w+/,\n    alias: 'function'\n  },\n  'type-variable': {\n    pattern: /\\B'\\w+/,\n    alias: 'function'\n  },\n  'variant': {\n    pattern: /`\\w+/,\n    alias: 'variable'\n  },\n  'module': {\n    pattern: /\\b[A-Z]\\w+/,\n    alias: 'variable'\n  },\n  // For the list of keywords and operators,\n  // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  // Custom operators are allowed\n  'operator': /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n  'punctuation': /[(){}\\[\\]|.,:;]|\\b_\\b/\n};\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-ocaml.js"],"names":["Prism","languages","ocaml","pattern","greedy","alias"],"mappings":";;;;;AAAAA,KAAK,CAACC,SAAS,CAACC,KAAK,GAAG;EACvB,SAAS,EAAE,kBAAkB;EAC7B,QAAQ,EAAE,CACT;IACCC,OAAO,EAAE,uBAAuB;IAChCC,MAAM,EAAE;EACT,CAAC,EACD;IACCD,OAAO,EAAE,oDAAoD;IAC7DC,MAAM,EAAE;EACT,CAAC,CACD;EACD,QAAQ,EAAE,4EAA4E;EACtF,WAAW,EAAE;IACZD,OAAO,EAAE,QAAQ;IACjBE,KAAK,EAAE;EACR,CAAC;EACD,OAAO,EAAE;IACRF,OAAO,EAAE,QAAQ;IACjBE,KAAK,EAAE;EACR,CAAC;EACD,eAAe,EAAE;IAChBF,OAAO,EAAE,QAAQ;IACjBE,KAAK,EAAE;EACR,CAAC;EACD,SAAS,EAAE;IACVF,OAAO,EAAE,MAAM;IACfE,KAAK,EAAE;EACR,CAAC;EACD,QAAQ,EAAE;IACTF,OAAO,EAAE,YAAY;IACrBE,KAAK,EAAE;EACR,CAAC;EACD;EACA;EACA,SAAS,EAAE,+RAA+R;EAC1S,SAAS,EAAE,oBAAoB;EAC/B;EACA,UAAU,EAAE,6FAA6F;EACzG,aAAa,EAAE;AAChB,CAAC,C","file":"x","sourcesContent":["Prism.languages.ocaml = {\n\t'comment': /\\(\\*[\\s\\S]*?\\*\\)/,\n\t'string': [\n\t\t{\n\t\t\tpattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'number': /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?[\\d_]+)?)/i,\n\t'directive': {\n\t\tpattern: /\\B#\\w+/,\n\t\talias: 'important'\n\t},\n\t'label': {\n\t\tpattern: /\\B~\\w+/,\n\t\talias: 'function'\n\t},\n\t'type-variable': {\n\t\tpattern: /\\B'\\w+/,\n\t\talias: 'function'\n\t},\n\t'variant': {\n\t\tpattern: /`\\w+/,\n\t\talias: 'variable'\n\t},\n\t'module': {\n\t\tpattern: /\\b[A-Z]\\w+/,\n\t\talias: 'variable'\n\t},\n\t// For the list of keywords and operators,\n\t// see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n\t'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n\t'boolean': /\\b(?:false|true)\\b/,\n\t// Custom operators are allowed\n\t'operator': /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n\t'punctuation': /[(){}\\[\\]|.,:;]|\\b_\\b/\n};\n"]}}