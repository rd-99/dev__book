{"code":"(this[\"webpackJsonp@dev-book/local-client\"]=this[\"webpackJsonp@dev-book/local-client\"]||[]).push([[260],{437:function(e,n){Prism.languages.liquid={comment:{pattern:/(^\\{%\\s*comment\\s*%\\})[\\s\\S]+(?=\\{%\\s*endcomment\\s*%\\}$)/,lookbehind:!0},delimiter:{pattern:/^\\{(?:\\{\\{|[%\\{])-?|-?(?:\\}\\}|[%\\}])\\}$/,alias:\"punctuation\"},string:{pattern:/\"[^\"]*\"|'[^']*'/,greedy:!0},keyword:/\\b(?:as|assign|break|continue|cycle|decrement|echo|else|elsif|(?:end)?(?:capture|case|comment|for|form|if|paginate|style|raw|tablerow|unless)|in|include|increment|limit|liquid|offset|range|render|reversed|section|when|with)\\b/,function:[{pattern:/(\\|\\s*)\\w+/,lookbehind:!0,alias:\"filter\"},{pattern:/(\\.\\s*)(?:first|last|size)/,lookbehind:!0}],boolean:/\\b(?:true|false|nil)\\b/,range:{pattern:/\\.\\./,alias:\"operator\"},number:/\\b\\d+(?:\\.\\d+)?\\b/,operator:/[!=]=|<>|[<>]=?|[|?:=-]|\\b(?:and|or|contains(?=\\s))\\b/,punctuation:/[.,\\[\\]()]/},Prism.hooks.add(\"before-tokenize\",(function(e){var n=!1;Prism.languages[\"markup-templating\"].buildPlaceholders(e,\"liquid\",/\\{%\\s*comment\\s*%\\}[\\s\\S]*?\\{%\\s*endcomment\\s*%\\}|\\{(?:%[\\s\\S]*?%|\\{\\{[\\s\\S]*?\\}\\}|\\{[\\s\\S]*?\\})\\}/g,(function(e){var t=/^\\{%-?\\s*(\\w+)/.exec(e);if(t){var i=t[1];if(\"raw\"===i&&!n)return n=!0,!0;if(\"endraw\"===i)return n=!1,!0}return!n}))})),Prism.hooks.add(\"after-tokenize\",(function(e){Prism.languages[\"markup-templating\"].tokenizePlaceholders(e,\"liquid\")}))}}]);","name":"static/js/260.6f68d0dc.chunk.js","map":{"version":3,"names":["this","push","module","exports","Prism","languages","liquid","comment","pattern","lookbehind","delimiter","alias","string","greedy","keyword","function","boolean","range","number","operator","punctuation","hooks","add","env","insideRaw","buildPlaceholders","match","tagMatch","exec","tag","tokenizePlaceholders"],"sources":["static/js/260.6f68d0dc.chunk.js"],"mappings":"CAACA,KAAK,sCAAwCA,KAAK,uCAAyC,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEtG,IACA,SAAUC,EAAQC,GAExBC,MAAMC,UAAUC,OAAS,CACvBC,QAAW,CACTC,QAAS,2DACTC,YAAY,GAEdC,UAAa,CACXF,QAAS,0CACTG,MAAO,eAETC,OAAU,CACRJ,QAAS,kBACTK,QAAQ,GAEVC,QAAW,oOACXC,SAAY,CAAC,CACXP,QAAS,aACTC,YAAY,EACZE,MAAO,UACN,CAEDH,QAAS,6BACTC,YAAY,IAEdO,QAAW,yBACXC,MAAS,CACPT,QAAS,OACTG,MAAO,YAGTO,OAAU,oBACVC,SAAY,wDACZC,YAAe,cAEjBhB,MAAMiB,MAAMC,IAAI,mBAAmB,SAAUC,GAC3C,IACIC,GAAY,EAChBpB,MAAMC,UAAU,qBAAqBoB,kBAAkBF,EAAK,SAFxC,uGAEiE,SAAUG,GAC7F,IAAIC,EAAW,iBAAiBC,KAAKF,GACrC,GAAIC,EAAU,CACZ,IAAIE,EAAMF,EAAS,GACnB,GAAY,QAARE,IAAkBL,EAEpB,OADAA,GAAY,GACL,EACF,GAAY,WAARK,EAET,OADAL,GAAY,GACL,CAEX,CACA,OAAQA,CACV,GACF,IACApB,MAAMiB,MAAMC,IAAI,kBAAkB,SAAUC,GAC1CnB,MAAMC,UAAU,qBAAqByB,qBAAqBP,EAAK,SACjE,GAEO"},"input":"(this[\"webpackJsonp@dev-book/local-client\"] = this[\"webpackJsonp@dev-book/local-client\"] || []).push([[260],{\n\n/***/ 437:\n/***/ (function(module, exports) {\n\nPrism.languages.liquid = {\n  'comment': {\n    pattern: /(^\\{%\\s*comment\\s*%\\})[\\s\\S]+(?=\\{%\\s*endcomment\\s*%\\}$)/,\n    lookbehind: true\n  },\n  'delimiter': {\n    pattern: /^\\{(?:\\{\\{|[%\\{])-?|-?(?:\\}\\}|[%\\}])\\}$/,\n    alias: 'punctuation'\n  },\n  'string': {\n    pattern: /\"[^\"]*\"|'[^']*'/,\n    greedy: true\n  },\n  'keyword': /\\b(?:as|assign|break|continue|cycle|decrement|echo|else|elsif|(?:end)?(?:capture|case|comment|for|form|if|paginate|style|raw|tablerow|unless)|in|include|increment|limit|liquid|offset|range|render|reversed|section|when|with)\\b/,\n  'function': [{\n    pattern: /(\\|\\s*)\\w+/,\n    lookbehind: true,\n    alias: 'filter'\n  }, {\n    // array functions\n    pattern: /(\\.\\s*)(?:first|last|size)/,\n    lookbehind: true\n  }],\n  'boolean': /\\b(?:true|false|nil)\\b/,\n  'range': {\n    pattern: /\\.\\./,\n    alias: 'operator'\n  },\n  // https://github.com/Shopify/liquid/blob/698f5e0d967423e013f6169d9111bd969bd78337/lib/liquid/lexer.rb#L21\n  'number': /\\b\\d+(?:\\.\\d+)?\\b/,\n  'operator': /[!=]=|<>|[<>]=?|[|?:=-]|\\b(?:and|or|contains(?=\\s))\\b/,\n  'punctuation': /[.,\\[\\]()]/\n};\nPrism.hooks.add('before-tokenize', function (env) {\n  var liquidPattern = /\\{%\\s*comment\\s*%\\}[\\s\\S]*?\\{%\\s*endcomment\\s*%\\}|\\{(?:%[\\s\\S]*?%|\\{\\{[\\s\\S]*?\\}\\}|\\{[\\s\\S]*?\\})\\}/g;\n  var insideRaw = false;\n  Prism.languages['markup-templating'].buildPlaceholders(env, 'liquid', liquidPattern, function (match) {\n    var tagMatch = /^\\{%-?\\s*(\\w+)/.exec(match);\n    if (tagMatch) {\n      var tag = tagMatch[1];\n      if (tag === 'raw' && !insideRaw) {\n        insideRaw = true;\n        return true;\n      } else if (tag === 'endraw') {\n        insideRaw = false;\n        return true;\n      }\n    }\n    return !insideRaw;\n  });\n});\nPrism.hooks.add('after-tokenize', function (env) {\n  Prism.languages['markup-templating'].tokenizePlaceholders(env, 'liquid');\n});\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-liquid.js"],"names":["Prism","languages","liquid","pattern","lookbehind","alias","greedy","hooks","add","env","liquidPattern","insideRaw","buildPlaceholders","match","tagMatch","exec","tag","tokenizePlaceholders"],"mappings":";;;;;AAAAA,KAAK,CAACC,SAAS,CAACC,MAAM,GAAG;EACxB,SAAS,EAAE;IACVC,OAAO,EAAE,0DAA0D;IACnEC,UAAU,EAAE;EACb,CAAC;EACD,WAAW,EAAE;IACZD,OAAO,EAAE,yCAAyC;IAClDE,KAAK,EAAE;EACR,CAAC;EACD,QAAQ,EAAE;IACTF,OAAO,EAAE,iBAAiB;IAC1BG,MAAM,EAAE;EACT,CAAC;EACD,SAAS,EAAE,mOAAmO;EAC9O,UAAU,EAAE,CACX;IACCH,OAAO,EAAE,YAAY;IACrBC,UAAU,EAAE,IAAI;IAChBC,KAAK,EAAE;EACR,CAAC,EACD;IACC;IACAF,OAAO,EAAE,4BAA4B;IACrCC,UAAU,EAAE;EACb,CAAC,CACD;EACD,SAAS,EAAE,wBAAwB;EACnC,OAAO,EAAE;IACRD,OAAO,EAAE,MAAM;IACfE,KAAK,EAAE;EACR,CAAC;EACD;EACA,QAAQ,EAAE,mBAAmB;EAC7B,UAAU,EAAE,uDAAuD;EACnE,aAAa,EAAE;AAChB,CAAC;AAEDL,KAAK,CAACO,KAAK,CAACC,GAAG,CAAC,iBAAiB,EAAE,UAAUC,GAAG,EAAE;EACjD,IAAIC,aAAa,GAAG,qGAAqG;EACzH,IAAIC,SAAS,GAAG,KAAK;EAErBX,KAAK,CAACC,SAAS,CAAC,mBAAmB,CAAC,CAACW,iBAAiB,CAACH,GAAG,EAAE,QAAQ,EAAEC,aAAa,EAAE,UAAUG,KAAK,EAAE;IACrG,IAAIC,QAAQ,GAAG,gBAAgB,CAACC,IAAI,CAACF,KAAK,CAAC;IAC3C,IAAIC,QAAQ,EAAE;MACb,IAAIE,GAAG,GAAGF,QAAQ,CAAC,CAAC,CAAC;MACrB,IAAIE,GAAG,KAAK,KAAK,IAAI,CAACL,SAAS,EAAE;QAChCA,SAAS,GAAG,IAAI;QAChB,OAAO,IAAI;MACZ,CAAC,MAAM,IAAIK,GAAG,KAAK,QAAQ,EAAE;QAC5BL,SAAS,GAAG,KAAK;QACjB,OAAO,IAAI;MACZ;IACD;IAEA,OAAO,CAACA,SAAS;EAClB,CAAC,CAAC;AACH,CAAC,CAAC;AAEFX,KAAK,CAACO,KAAK,CAACC,GAAG,CAAC,gBAAgB,EAAE,UAAUC,GAAG,EAAE;EAChDT,KAAK,CAACC,SAAS,CAAC,mBAAmB,CAAC,CAACgB,oBAAoB,CAACR,GAAG,EAAE,QAAQ,CAAC;AACzE,CAAC,CAAC,C","file":"x","sourcesContent":["Prism.languages.liquid = {\n\t'comment': {\n\t\tpattern: /(^\\{%\\s*comment\\s*%\\})[\\s\\S]+(?=\\{%\\s*endcomment\\s*%\\}$)/,\n\t\tlookbehind: true\n\t},\n\t'delimiter': {\n\t\tpattern: /^\\{(?:\\{\\{|[%\\{])-?|-?(?:\\}\\}|[%\\}])\\}$/,\n\t\talias: 'punctuation'\n\t},\n\t'string': {\n\t\tpattern: /\"[^\"]*\"|'[^']*'/,\n\t\tgreedy: true\n\t},\n\t'keyword': /\\b(?:as|assign|break|continue|cycle|decrement|echo|else|elsif|(?:end)?(?:capture|case|comment|for|form|if|paginate|style|raw|tablerow|unless)|in|include|increment|limit|liquid|offset|range|render|reversed|section|when|with)\\b/,\n\t'function': [\n\t\t{\n\t\t\tpattern: /(\\|\\s*)\\w+/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'filter'\n\t\t},\n\t\t{\n\t\t\t// array functions\n\t\t\tpattern: /(\\.\\s*)(?:first|last|size)/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'boolean': /\\b(?:true|false|nil)\\b/,\n\t'range': {\n\t\tpattern: /\\.\\./,\n\t\talias: 'operator'\n\t},\n\t// https://github.com/Shopify/liquid/blob/698f5e0d967423e013f6169d9111bd969bd78337/lib/liquid/lexer.rb#L21\n\t'number': /\\b\\d+(?:\\.\\d+)?\\b/,\n\t'operator': /[!=]=|<>|[<>]=?|[|?:=-]|\\b(?:and|or|contains(?=\\s))\\b/,\n\t'punctuation': /[.,\\[\\]()]/\n};\n\nPrism.hooks.add('before-tokenize', function (env) {\n\tvar liquidPattern = /\\{%\\s*comment\\s*%\\}[\\s\\S]*?\\{%\\s*endcomment\\s*%\\}|\\{(?:%[\\s\\S]*?%|\\{\\{[\\s\\S]*?\\}\\}|\\{[\\s\\S]*?\\})\\}/g;\n\tvar insideRaw = false;\n\n\tPrism.languages['markup-templating'].buildPlaceholders(env, 'liquid', liquidPattern, function (match) {\n\t\tvar tagMatch = /^\\{%-?\\s*(\\w+)/.exec(match);\n\t\tif (tagMatch) {\n\t\t\tvar tag = tagMatch[1];\n\t\t\tif (tag === 'raw' && !insideRaw) {\n\t\t\t\tinsideRaw = true;\n\t\t\t\treturn true;\n\t\t\t} else if (tag === 'endraw') {\n\t\t\t\tinsideRaw = false;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn !insideRaw;\n\t});\n});\n\nPrism.hooks.add('after-tokenize', function (env) {\n\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'liquid');\n});\n"]}}