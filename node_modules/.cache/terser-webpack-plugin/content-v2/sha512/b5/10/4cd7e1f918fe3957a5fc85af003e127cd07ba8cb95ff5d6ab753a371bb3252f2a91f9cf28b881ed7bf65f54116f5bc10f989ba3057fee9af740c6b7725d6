{"code":"(this[\"webpackJsonp@dev-book/local-client\"]=this[\"webpackJsonp@dev-book/local-client\"]||[]).push([[408],{585:function(e,t){!function(e){e.languages.sass=e.languages.extend(\"css\",{comment:{pattern:/^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,lookbehind:!0}}),e.languages.insertBefore(\"sass\",\"atrule\",{\"atrule-line\":{pattern:/^(?:[ \\t]*)[@+=].+/m,inside:{atrule:/(?:@[\\w-]+|[+=])/m}}}),delete e.languages.sass.atrule;var t=/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/,n=[/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,{pattern:/(\\s)-(?=\\s)/,lookbehind:!0}];e.languages.insertBefore(\"sass\",\"property\",{\"variable-line\":{pattern:/^[ \\t]*\\$.+/m,inside:{punctuation:/:/,variable:t,operator:n}},\"property-line\":{pattern:/^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,inside:{property:[/[^:\\s]+(?=\\s*:)/,{pattern:/(:)[^:\\s]+/,lookbehind:!0}],punctuation:/:/,variable:t,operator:n,important:e.languages.sass.important}}}),delete e.languages.sass.property,delete e.languages.sass.important,e.languages.insertBefore(\"sass\",\"punctuation\",{selector:{pattern:/([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/,lookbehind:!0}})}(Prism)}}]);","name":"static/js/408.a8eb09ae.chunk.js","map":{"version":3,"names":["this","push","module","exports","Prism","languages","sass","extend","comment","pattern","lookbehind","insertBefore","inside","atrule","variable","operator","punctuation","property","important","selector"],"sources":["static/js/408.a8eb09ae.chunk.js"],"mappings":"CAACA,KAAK,sCAAwCA,KAAK,uCAAyC,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEtG,IACA,SAAUC,EAAQC,IAExB,SAAWC,GACTA,EAAMC,UAAUC,KAAOF,EAAMC,UAAUE,OAAO,MAAO,CAEnDC,QAAW,CACTC,QAAS,gDACTC,YAAY,KAGhBN,EAAMC,UAAUM,aAAa,OAAQ,SAAU,CAE7C,cAAe,CAEbF,QAAS,sBACTG,OAAQ,CACNC,OAAU,+BAITT,EAAMC,UAAUC,KAAKO,OAC5B,IAAIC,EAAW,yBACXC,EAAW,CAAC,2CAA4C,CAC1DN,QAAS,cACTC,YAAY,IAEdN,EAAMC,UAAUM,aAAa,OAAQ,WAAY,CAE/C,gBAAiB,CACfF,QAAS,eACTG,OAAQ,CACNI,YAAe,IACfF,SAAYA,EACZC,SAAYA,IAIhB,gBAAiB,CACfN,QAAS,qCACTG,OAAQ,CACNK,SAAY,CAAC,kBAAmB,CAC9BR,QAAS,aACTC,YAAY,IAEdM,YAAe,IACfF,SAAYA,EACZC,SAAYA,EACZG,UAAad,EAAMC,UAAUC,KAAKY,qBAIjCd,EAAMC,UAAUC,KAAKW,gBACrBb,EAAMC,UAAUC,KAAKY,UAI5Bd,EAAMC,UAAUM,aAAa,OAAQ,cAAe,CAClDQ,SAAY,CACVV,QAAS,uHACTC,YAAY,IAGjB,CA5DD,CA4DGN,MAEI"},"input":"(this[\"webpackJsonp@dev-book/local-client\"] = this[\"webpackJsonp@dev-book/local-client\"] || []).push([[408],{\n\n/***/ 585:\n/***/ (function(module, exports) {\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/m\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n    pattern: /(\\s)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important;\n\n  // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/,\n      lookbehind: true\n    }\n  });\n})(Prism);\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-sass.js"],"names":["Prism","languages","sass","extend","pattern","lookbehind","insertBefore","inside","atrule","variable","operator","important","property"],"mappings":";;;;;AAAC,WAAUA,KAAK,EAAE;EACjBA,KAAK,CAACC,SAAS,CAACC,IAAI,GAAGF,KAAK,CAACC,SAAS,CAACE,MAAM,CAAC,KAAK,EAAE;IACpD;IACA,SAAS,EAAE;MACVC,OAAO,EAAE,+CAA+C;MACxDC,UAAU,EAAE;IACb;EACD,CAAC,CAAC;EAEFL,KAAK,CAACC,SAAS,CAACK,YAAY,CAAC,MAAM,EAAE,QAAQ,EAAE;IAC9C;IACA,aAAa,EAAE;MACd;MACAF,OAAO,EAAE,qBAAqB;MAC9BG,MAAM,EAAE;QACP,QAAQ,EAAE;MACX;IACD;EACD,CAAC,CAAC;EACF,OAAOP,KAAK,CAACC,SAAS,CAACC,IAAI,CAACM,MAAM;EAGlC,IAAIC,QAAQ,GAAG,wBAAwB;EACvC,IAAIC,QAAQ,GAAG,CACd,0CAA0C,EAC1C;IACCN,OAAO,EAAE,aAAa;IACtBC,UAAU,EAAE;EACb,CAAC,CACD;EAEDL,KAAK,CAACC,SAAS,CAACK,YAAY,CAAC,MAAM,EAAE,UAAU,EAAE;IAChD;IACA,eAAe,EAAE;MAChBF,OAAO,EAAE,cAAc;MACvBG,MAAM,EAAE;QACP,aAAa,EAAE,GAAG;QAClB,UAAU,EAAEE,QAAQ;QACpB,UAAU,EAAEC;MACb;IACD,CAAC;IACD;IACA,eAAe,EAAE;MAChBN,OAAO,EAAE,oCAAoC;MAC7CG,MAAM,EAAE;QACP,UAAU,EAAE,CACX,iBAAiB,EACjB;UACCH,OAAO,EAAE,YAAY;UACrBC,UAAU,EAAE;QACb,CAAC,CACD;QACD,aAAa,EAAE,GAAG;QAClB,UAAU,EAAEI,QAAQ;QACpB,UAAU,EAAEC,QAAQ;QACpB,WAAW,EAAEV,KAAK,CAACC,SAAS,CAACC,IAAI,CAACS;MACnC;IACD;EACD,CAAC,CAAC;EACF,OAAOX,KAAK,CAACC,SAAS,CAACC,IAAI,CAACU,QAAQ;EACpC,OAAOZ,KAAK,CAACC,SAAS,CAACC,IAAI,CAACS,SAAS;;EAErC;EACA;EACAX,KAAK,CAACC,SAAS,CAACK,YAAY,CAAC,MAAM,EAAE,aAAa,EAAE;IACnD,UAAU,EAAE;MACXF,OAAO,EAAE,sHAAsH;MAC/HC,UAAU,EAAE;IACb;EACD,CAAC,CAAC;AAEH,CAAC,EAACL,KAAK,CAAC,C","file":"x","sourcesContent":["(function (Prism) {\n\tPrism.languages.sass = Prism.languages.extend('css', {\n\t\t// Sass comments don't need to be closed, only indented\n\t\t'comment': {\n\t\t\tpattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('sass', 'atrule', {\n\t\t// We want to consume the whole line\n\t\t'atrule-line': {\n\t\t\t// Includes support for = and + shortcuts\n\t\t\tpattern: /^(?:[ \\t]*)[@+=].+/m,\n\t\t\tinside: {\n\t\t\t\t'atrule': /(?:@[\\w-]+|[+=])/m\n\t\t\t}\n\t\t}\n\t});\n\tdelete Prism.languages.sass.atrule;\n\n\n\tvar variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n\tvar operator = [\n\t\t/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,\n\t\t{\n\t\t\tpattern: /(\\s)-(?=\\s)/,\n\t\t\tlookbehind: true\n\t\t}\n\t];\n\n\tPrism.languages.insertBefore('sass', 'property', {\n\t\t// We want to consume the whole line\n\t\t'variable-line': {\n\t\t\tpattern: /^[ \\t]*\\$.+/m,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /:/,\n\t\t\t\t'variable': variable,\n\t\t\t\t'operator': operator\n\t\t\t}\n\t\t},\n\t\t// We want to consume the whole line\n\t\t'property-line': {\n\t\t\tpattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n\t\t\tinside: {\n\t\t\t\t'property': [\n\t\t\t\t\t/[^:\\s]+(?=\\s*:)/,\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: /(:)[^:\\s]+/,\n\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t'punctuation': /:/,\n\t\t\t\t'variable': variable,\n\t\t\t\t'operator': operator,\n\t\t\t\t'important': Prism.languages.sass.important\n\t\t\t}\n\t\t}\n\t});\n\tdelete Prism.languages.sass.property;\n\tdelete Prism.languages.sass.important;\n\n\t// Now that whole lines for other patterns are consumed,\n\t// what's left should be selectors\n\tPrism.languages.insertBefore('sass', 'punctuation', {\n\t\t'selector': {\n\t\t\tpattern: /([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n}(Prism));\n"]}}