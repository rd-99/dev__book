{"code":"(this[\"webpackJsonp@dev-book/local-client\"]=this[\"webpackJsonp@dev-book/local-client\"]||[]).push([[464],{641:function(e,t){!function(e){e.languages.tt2=e.languages.extend(\"clike\",{comment:/#.*|\\[%#[\\s\\S]*?%\\]/,keyword:/\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\\b/,punctuation:/[[\\]{},()]/}),e.languages.insertBefore(\"tt2\",\"number\",{operator:/=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/,variable:{pattern:/\\b[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*\\b/i}}),e.languages.insertBefore(\"tt2\",\"keyword\",{delimiter:{pattern:/^(?:\\[%|%%)-?|-?%\\]$/,alias:\"punctuation\"}}),e.languages.insertBefore(\"tt2\",\"string\",{\"single-quoted-string\":{pattern:/'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,greedy:!0,alias:\"string\"},\"double-quoted-string\":{pattern:/\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,greedy:!0,alias:\"string\",inside:{variable:{pattern:/\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i}}}}),delete e.languages.tt2.string,e.hooks.add(\"before-tokenize\",(function(t){e.languages[\"markup-templating\"].buildPlaceholders(t,\"tt2\",/\\[%[\\s\\S]+?%\\]/g)})),e.hooks.add(\"after-tokenize\",(function(t){e.languages[\"markup-templating\"].tokenizePlaceholders(t,\"tt2\")}))}(Prism)}}]);","name":"static/js/464.2fce8dd0.chunk.js","map":{"version":3,"names":["this","push","module","exports","Prism","languages","tt2","extend","comment","keyword","punctuation","insertBefore","operator","variable","pattern","delimiter","alias","greedy","inside","string","hooks","add","env","buildPlaceholders","tokenizePlaceholders"],"sources":["static/js/464.2fce8dd0.chunk.js"],"mappings":"CAACA,KAAK,sCAAwCA,KAAK,uCAAyC,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEtG,IACA,SAAUC,EAAQC,IAExB,SAAWC,GACTA,EAAMC,UAAUC,IAAMF,EAAMC,UAAUE,OAAO,QAAS,CACpDC,QAAW,sBACXC,QAAW,0NACXC,YAAe,eAEjBN,EAAMC,UAAUM,aAAa,MAAO,SAAU,CAC5CC,SAAY,iDACZC,SAAY,CACVC,QAAS,mDAGbV,EAAMC,UAAUM,aAAa,MAAO,UAAW,CAC7CI,UAAa,CACXD,QAAS,uBACTE,MAAO,iBAGXZ,EAAMC,UAAUM,aAAa,MAAO,SAAU,CAC5C,uBAAwB,CACtBG,QAAS,gCACTG,QAAQ,EACRD,MAAO,UAET,uBAAwB,CACtBF,QAAS,gCACTG,QAAQ,EACRD,MAAO,SACPE,OAAQ,CACNL,SAAY,CACVC,QAAS,wDAOVV,EAAMC,UAAUC,IAAIa,OAC3Bf,EAAMgB,MAAMC,IAAI,mBAAmB,SAAUC,GAE3ClB,EAAMC,UAAU,qBAAqBkB,kBAAkBD,EAAK,MAD3C,kBAEnB,IACAlB,EAAMgB,MAAMC,IAAI,kBAAkB,SAAUC,GAC1ClB,EAAMC,UAAU,qBAAqBmB,qBAAqBF,EAAK,MACjE,GACD,CA7CD,CA6CGlB,MAEI"},"input":"(this[\"webpackJsonp@dev-book/local-client\"] = this[\"webpackJsonp@dev-book/local-client\"] || []).push([[464],{\n\n/***/ 641:\n/***/ (function(module, exports) {\n\n(function (Prism) {\n  Prism.languages.tt2 = Prism.languages.extend('clike', {\n    'comment': /#.*|\\[%#[\\s\\S]*?%\\]/,\n    'keyword': /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\\b/,\n    'punctuation': /[[\\]{},()]/\n  });\n  Prism.languages.insertBefore('tt2', 'number', {\n    'operator': /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/,\n    'variable': {\n      pattern: /\\b[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*\\b/i\n    }\n  });\n  Prism.languages.insertBefore('tt2', 'keyword', {\n    'delimiter': {\n      pattern: /^(?:\\[%|%%)-?|-?%\\]$/,\n      alias: 'punctuation'\n    }\n  });\n  Prism.languages.insertBefore('tt2', 'string', {\n    'single-quoted-string': {\n      pattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,\n      greedy: true,\n      alias: 'string'\n    },\n    'double-quoted-string': {\n      pattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'variable': {\n          pattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i\n        }\n      }\n    }\n  });\n\n  // The different types of TT2 strings \"replace\" the C-like standard string\n  delete Prism.languages.tt2.string;\n  Prism.hooks.add('before-tokenize', function (env) {\n    var tt2Pattern = /\\[%[\\s\\S]+?%\\]/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'tt2', tt2Pattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2');\n  });\n})(Prism);\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-tt2.js"],"names":["Prism","languages","tt2","extend","insertBefore","pattern","alias","greedy","inside","string","hooks","add","env","tt2Pattern","buildPlaceholders","tokenizePlaceholders"],"mappings":";;;;;AAAC,WAAUA,KAAK,EAAE;EAEjBA,KAAK,CAACC,SAAS,CAACC,GAAG,GAAGF,KAAK,CAACC,SAAS,CAACE,MAAM,CAAC,OAAO,EAAE;IACrD,SAAS,EAAE,qBAAqB;IAChC,SAAS,EAAE,yNAAyN;IACpO,aAAa,EAAE;EAChB,CAAC,CAAC;EAEFH,KAAK,CAACC,SAAS,CAACG,YAAY,CAAC,KAAK,EAAE,QAAQ,EAAE;IAC7C,UAAU,EAAE,gDAAgD;IAC5D,UAAU,EAAE;MACXC,OAAO,EAAE;IACV;EACD,CAAC,CAAC;EAEFL,KAAK,CAACC,SAAS,CAACG,YAAY,CAAC,KAAK,EAAE,SAAS,EAAE;IAC9C,WAAW,EAAE;MACZC,OAAO,EAAE,sBAAsB;MAC/BC,KAAK,EAAE;IACR;EACD,CAAC,CAAC;EAEFN,KAAK,CAACC,SAAS,CAACG,YAAY,CAAC,KAAK,EAAE,QAAQ,EAAE;IAC7C,sBAAsB,EAAE;MACvBC,OAAO,EAAE,+BAA+B;MACxCE,MAAM,EAAE,IAAI;MACZD,KAAK,EAAE;IACR,CAAC;IACD,sBAAsB,EAAE;MACvBD,OAAO,EAAE,+BAA+B;MACxCE,MAAM,EAAE,IAAI;MACZD,KAAK,EAAE,QAAQ;MACfE,MAAM,EAAE;QACP,UAAU,EAAE;UACXH,OAAO,EAAE;QACV;MACD;IACD;EACD,CAAC,CAAC;;EAEF;EACA,OAAOL,KAAK,CAACC,SAAS,CAACC,GAAG,CAACO,MAAM;EAEjCT,KAAK,CAACU,KAAK,CAACC,GAAG,CAAC,iBAAiB,EAAE,UAAUC,GAAG,EAAE;IACjD,IAAIC,UAAU,GAAG,iBAAiB;IAClCb,KAAK,CAACC,SAAS,CAAC,mBAAmB,CAAC,CAACa,iBAAiB,CAACF,GAAG,EAAE,KAAK,EAAEC,UAAU,CAAC;EAC/E,CAAC,CAAC;EAEFb,KAAK,CAACU,KAAK,CAACC,GAAG,CAAC,gBAAgB,EAAE,UAAUC,GAAG,EAAE;IAChDZ,KAAK,CAACC,SAAS,CAAC,mBAAmB,CAAC,CAACc,oBAAoB,CAACH,GAAG,EAAE,KAAK,CAAC;EACtE,CAAC,CAAC;AAEH,CAAC,EAACZ,KAAK,CAAC,C","file":"x","sourcesContent":["(function (Prism) {\n\n\tPrism.languages.tt2 = Prism.languages.extend('clike', {\n\t\t'comment': /#.*|\\[%#[\\s\\S]*?%\\]/,\n\t\t'keyword': /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\\b/,\n\t\t'punctuation': /[[\\]{},()]/\n\t});\n\n\tPrism.languages.insertBefore('tt2', 'number', {\n\t\t'operator': /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/,\n\t\t'variable': {\n\t\t\tpattern: /\\b[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*\\b/i\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('tt2', 'keyword', {\n\t\t'delimiter': {\n\t\t\tpattern: /^(?:\\[%|%%)-?|-?%\\]$/,\n\t\t\talias: 'punctuation'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('tt2', 'string', {\n\t\t'single-quoted-string': {\n\t\t\tpattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string'\n\t\t},\n\t\t'double-quoted-string': {\n\t\t\tpattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'variable': {\n\t\t\t\t\tpattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// The different types of TT2 strings \"replace\" the C-like standard string\n\tdelete Prism.languages.tt2.string;\n\n\tPrism.hooks.add('before-tokenize', function (env) {\n\t\tvar tt2Pattern = /\\[%[\\s\\S]+?%\\]/g;\n\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'tt2', tt2Pattern);\n\t});\n\n\tPrism.hooks.add('after-tokenize', function (env) {\n\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2');\n\t});\n\n}(Prism));\n"]}}