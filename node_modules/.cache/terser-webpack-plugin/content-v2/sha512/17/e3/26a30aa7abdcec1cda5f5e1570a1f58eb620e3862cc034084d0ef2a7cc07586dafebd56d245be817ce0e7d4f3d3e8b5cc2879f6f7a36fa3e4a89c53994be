{"code":"(this[\"webpackJsonp@dev-book/local-client\"]=this[\"webpackJsonp@dev-book/local-client\"]||[]).push([[413],{590:function(e,r){Prism.languages.scheme={comment:/;.*|#;\\s*(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\[(?:[^\\[\\]]|\\[[^\\[\\]]*\\])*\\])|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,string:{pattern:/\"(?:[^\"\\\\]|\\\\.)*\"/,greedy:!0},symbol:{pattern:/'[^()\\[\\]#'\\s]+/,greedy:!0},character:{pattern:/#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\\S)/,greedy:!0,alias:\"string\"},\"lambda-parameter\":[{pattern:/((?:^|[^'`#])[(\\[]lambda\\s+)(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,lookbehind:!0},{pattern:/((?:^|[^'`#])[(\\[]lambda\\s+[(\\[])[^()\\[\\]']+/,lookbehind:!0}],keyword:{pattern:/((?:^|[^'`#])[(\\[])(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|export|except|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\[\\]\\s]|$)/,lookbehind:!0},builtin:{pattern:/((?:^|[^'`#])[(\\[])(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\[\\]\\s]|$)/,lookbehind:!0},operator:{pattern:/((?:^|[^'`#])[(\\[])(?:[-+*%/]|[<>]=?|=>?)(?=[()\\[\\]\\s]|$)/,lookbehind:!0},number:{pattern:RegExp(function(e){for(var r in e)e[r]=e[r].replace(/<[\\w\\s]+>/g,(function(r){return\"(?:\"+e[r].trim()+\")\"}));return e[r]}({\"<ureal dec>\":\"\\\\d+(?:/\\\\d+)|(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:e[+-]?\\\\d+)?\",\"<real dec>\":\"[+-]?<ureal dec>|[+-](?:inf|nan)\\\\.0\",\"<imaginary dec>\":\"[+-](?:<ureal dec>|(?:inf|nan)\\\\.0)?i\",\"<complex dec>\":\"<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>\",\"<num dec>\":\"(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>\",\"<ureal box>\":\"[0-9a-f]+(?:/[0-9a-f]+)?\",\"<real box>\":\"[+-]?<ureal box>|[+-](?:inf|nan)\\\\.0\",\"<imaginary box>\":\"[+-](?:<ureal box>|(?:inf|nan)\\\\.0)?i\",\"<complex box>\":\"<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>\",\"<num box>\":\"#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>\",\"<number>\":\"(^|[()\\\\[\\\\]\\\\s])(?:<num dec>|<num box>)(?=[()\\\\[\\\\]\\\\s]|$)\"}),\"i\"),lookbehind:!0},boolean:{pattern:/(^|[()\\[\\]\\s])#(?:[ft]|false|true)(?=[()\\[\\]\\s]|$)/,lookbehind:!0},function:{pattern:/((?:^|[^'`#])[(\\[])(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\[\\]\\s]|$)/,lookbehind:!0},identifier:{pattern:/(^|[()\\[\\]\\s])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\[\\]\\s]|$)/,lookbehind:!0,greedy:!0},punctuation:/[()\\[\\]']/}}}]);","name":"static/js/413.7766918b.chunk.js","map":{"version":3,"names":["this","push","module","exports","Prism","languages","scheme","comment","string","pattern","greedy","symbol","character","alias","lookbehind","keyword","builtin","operator","number","RegExp","r","e","replace","trim","boolean","function","identifier","punctuation"],"sources":["static/js/413.7766918b.chunk.js"],"mappings":"CAACA,KAAK,sCAAwCA,KAAK,uCAAyC,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEtG,IACA,SAAUC,EAAQC,GAExBC,MAAMC,UAAUC,OAAS,CACvBC,QAAS,yIACTC,OAAQ,CACNC,QAAS,oBACTC,QAAQ,GAEVC,OAAQ,CACNF,QAAS,kBACTC,QAAQ,GAEVE,UAAW,CACTH,QAAS,0EACTC,QAAQ,EACRG,MAAO,UAET,mBAAoB,CAAC,CACnBJ,QAAS,qEACTK,YAAY,GACX,CACDL,QAAS,+CACTK,YAAY,IAEdC,QAAS,CACPN,QAAS,qZACTK,YAAY,GAEdE,QAAS,CACPP,QAAS,0oDACTK,YAAY,GAEdG,SAAU,CACRR,QAAS,4DACTK,YAAY,GAEdI,OAAQ,CACNT,QAASU,OAAO,SAAUC,GACxB,IAAK,IAAIC,KAAKD,EAAGA,EAAEC,GAAKD,EAAEC,GAAGC,QAAQ,cAAc,SAAUD,GAC3D,MAAO,MAAQD,EAAEC,GAAGE,OAAS,GAC/B,IACA,OAAOH,EAAEC,EACX,CALgB,CAKd,CACA,cAAe,4DACf,aAAc,uCACd,kBAAmB,wCACnB,gBAAiB,6DACjB,YAAa,8CACb,cAAe,2BACf,aAAc,uCACd,kBAAmB,wCACnB,gBAAiB,6DACjB,YAAa,iDACb,WAAY,gEACV,KACJP,YAAY,GAEdU,QAAS,CACPf,QAAS,qDACTK,YAAY,GAEdW,SAAU,CACRhB,QAAS,4EACTK,YAAY,GAEdY,WAAY,CACVjB,QAAS,oDACTK,YAAY,EACZJ,QAAQ,GAEViB,YAAa,YAGR"},"input":"(this[\"webpackJsonp@dev-book/local-client\"] = this[\"webpackJsonp@dev-book/local-client\"] || []).push([[413],{\n\n/***/ 590:\n/***/ (function(module, exports) {\n\nPrism.languages.scheme = {\n  comment: /;.*|#;\\s*(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\[(?:[^\\[\\]]|\\[[^\\[\\]]*\\])*\\])|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,\n  string: {\n    pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n    greedy: !0\n  },\n  symbol: {\n    pattern: /'[^()\\[\\]#'\\s]+/,\n    greedy: !0\n  },\n  character: {\n    pattern: /#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\\S)/,\n    greedy: !0,\n    alias: \"string\"\n  },\n  \"lambda-parameter\": [{\n    pattern: /((?:^|[^'`#])[(\\[]lambda\\s+)(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,\n    lookbehind: !0\n  }, {\n    pattern: /((?:^|[^'`#])[(\\[]lambda\\s+[(\\[])[^()\\[\\]']+/,\n    lookbehind: !0\n  }],\n  keyword: {\n    pattern: /((?:^|[^'`#])[(\\[])(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|export|except|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\[\\]\\s]|$)/,\n    lookbehind: !0\n  },\n  builtin: {\n    pattern: /((?:^|[^'`#])[(\\[])(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\[\\]\\s]|$)/,\n    lookbehind: !0\n  },\n  operator: {\n    pattern: /((?:^|[^'`#])[(\\[])(?:[-+*%/]|[<>]=?|=>?)(?=[()\\[\\]\\s]|$)/,\n    lookbehind: !0\n  },\n  number: {\n    pattern: RegExp(function (r) {\n      for (var e in r) r[e] = r[e].replace(/<[\\w\\s]+>/g, function (e) {\n        return \"(?:\" + r[e].trim() + \")\";\n      });\n      return r[e];\n    }({\n      \"<ureal dec>\": \"\\\\d+(?:/\\\\d+)|(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:e[+-]?\\\\d+)?\",\n      \"<real dec>\": \"[+-]?<ureal dec>|[+-](?:inf|nan)\\\\.0\",\n      \"<imaginary dec>\": \"[+-](?:<ureal dec>|(?:inf|nan)\\\\.0)?i\",\n      \"<complex dec>\": \"<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>\",\n      \"<num dec>\": \"(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>\",\n      \"<ureal box>\": \"[0-9a-f]+(?:/[0-9a-f]+)?\",\n      \"<real box>\": \"[+-]?<ureal box>|[+-](?:inf|nan)\\\\.0\",\n      \"<imaginary box>\": \"[+-](?:<ureal box>|(?:inf|nan)\\\\.0)?i\",\n      \"<complex box>\": \"<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>\",\n      \"<num box>\": \"#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>\",\n      \"<number>\": \"(^|[()\\\\[\\\\]\\\\s])(?:<num dec>|<num box>)(?=[()\\\\[\\\\]\\\\s]|$)\"\n    }), \"i\"),\n    lookbehind: !0\n  },\n  boolean: {\n    pattern: /(^|[()\\[\\]\\s])#(?:[ft]|false|true)(?=[()\\[\\]\\s]|$)/,\n    lookbehind: !0\n  },\n  function: {\n    pattern: /((?:^|[^'`#])[(\\[])(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\[\\]\\s]|$)/,\n    lookbehind: !0\n  },\n  identifier: {\n    pattern: /(^|[()\\[\\]\\s])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\[\\]\\s]|$)/,\n    lookbehind: !0,\n    greedy: !0\n  },\n  punctuation: /[()\\[\\]']/\n};\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-scheme.min.js"],"names":["Prism","languages","scheme","comment","string","pattern","greedy","symbol","character","alias","lookbehind","keyword","builtin","operator","number","RegExp","r","e","replace","trim","boolean","function","identifier","punctuation"],"mappings":";;;;;AAAAA,KAAK,CAACC,SAAS,CAACC,MAAM,GAAC;EAACC,OAAO,EAAC,wIAAwI;EAACC,MAAM,EAAC;IAACC,OAAO,EAAC,mBAAmB;IAACC,MAAM,EAAC,CAAC;EAAC,CAAC;EAACC,MAAM,EAAC;IAACF,OAAO,EAAC,iBAAiB;IAACC,MAAM,EAAC,CAAC;EAAC,CAAC;EAACE,SAAS,EAAC;IAACH,OAAO,EAAC,yEAAyE;IAACC,MAAM,EAAC,CAAC,CAAC;IAACG,KAAK,EAAC;EAAQ,CAAC;EAAC,kBAAkB,EAAC,CAAC;IAACJ,OAAO,EAAC,oEAAoE;IAACK,UAAU,EAAC,CAAC;EAAC,CAAC,EAAC;IAACL,OAAO,EAAC,8CAA8C;IAACK,UAAU,EAAC,CAAC;EAAC,CAAC,CAAC;EAACC,OAAO,EAAC;IAACN,OAAO,EAAC,oZAAoZ;IAACK,UAAU,EAAC,CAAC;EAAC,CAAC;EAACE,OAAO,EAAC;IAACP,OAAO,EAAC,yoDAAyoD;IAACK,UAAU,EAAC,CAAC;EAAC,CAAC;EAACG,QAAQ,EAAC;IAACR,OAAO,EAAC,2DAA2D;IAACK,UAAU,EAAC,CAAC;EAAC,CAAC;EAACI,MAAM,EAAC;IAACT,OAAO,EAACU,MAAM,CAAC,UAASC,CAAC,EAAC;MAAC,KAAI,IAAIC,CAAC,IAAID,CAAC,EAACA,CAAC,CAACC,CAAC,CAAC,GAACD,CAAC,CAACC,CAAC,CAAC,CAACC,OAAO,CAAC,YAAY,EAAC,UAASD,CAAC,EAAC;QAAC,OAAM,KAAK,GAACD,CAAC,CAACC,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC,GAAC,GAAG;MAAA,CAAC,CAAC;MAAC,OAAOH,CAAC,CAACC,CAAC,CAAC;IAAA,CAAC,CAAC;MAAC,aAAa,EAAC,2DAA2D;MAAC,YAAY,EAAC,sCAAsC;MAAC,iBAAiB,EAAC,uCAAuC;MAAC,eAAe,EAAC,4DAA4D;MAAC,WAAW,EAAC,6CAA6C;MAAC,aAAa,EAAC,0BAA0B;MAAC,YAAY,EAAC,sCAAsC;MAAC,iBAAiB,EAAC,uCAAuC;MAAC,eAAe,EAAC,4DAA4D;MAAC,WAAW,EAAC,gDAAgD;MAAC,UAAU,EAAC;IAA6D,CAAC,CAAC,EAAC,GAAG,CAAC;IAACP,UAAU,EAAC,CAAC;EAAC,CAAC;EAACU,OAAO,EAAC;IAACf,OAAO,EAAC,oDAAoD;IAACK,UAAU,EAAC,CAAC;EAAC,CAAC;EAACW,QAAQ,EAAC;IAAChB,OAAO,EAAC,2EAA2E;IAACK,UAAU,EAAC,CAAC;EAAC,CAAC;EAACY,UAAU,EAAC;IAACjB,OAAO,EAAC,mDAAmD;IAACK,UAAU,EAAC,CAAC,CAAC;IAACJ,MAAM,EAAC,CAAC;EAAC,CAAC;EAACiB,WAAW,EAAC;AAAW,CAAC,C","file":"x","sourcesContent":["Prism.languages.scheme={comment:/;.*|#;\\s*(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\[(?:[^\\[\\]]|\\[[^\\[\\]]*\\])*\\])|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,string:{pattern:/\"(?:[^\"\\\\]|\\\\.)*\"/,greedy:!0},symbol:{pattern:/'[^()\\[\\]#'\\s]+/,greedy:!0},character:{pattern:/#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\\S)/,greedy:!0,alias:\"string\"},\"lambda-parameter\":[{pattern:/((?:^|[^'`#])[(\\[]lambda\\s+)(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,lookbehind:!0},{pattern:/((?:^|[^'`#])[(\\[]lambda\\s+[(\\[])[^()\\[\\]']+/,lookbehind:!0}],keyword:{pattern:/((?:^|[^'`#])[(\\[])(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|export|except|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\[\\]\\s]|$)/,lookbehind:!0},builtin:{pattern:/((?:^|[^'`#])[(\\[])(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\[\\]\\s]|$)/,lookbehind:!0},operator:{pattern:/((?:^|[^'`#])[(\\[])(?:[-+*%/]|[<>]=?|=>?)(?=[()\\[\\]\\s]|$)/,lookbehind:!0},number:{pattern:RegExp(function(r){for(var e in r)r[e]=r[e].replace(/<[\\w\\s]+>/g,function(e){return\"(?:\"+r[e].trim()+\")\"});return r[e]}({\"<ureal dec>\":\"\\\\d+(?:/\\\\d+)|(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:e[+-]?\\\\d+)?\",\"<real dec>\":\"[+-]?<ureal dec>|[+-](?:inf|nan)\\\\.0\",\"<imaginary dec>\":\"[+-](?:<ureal dec>|(?:inf|nan)\\\\.0)?i\",\"<complex dec>\":\"<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>\",\"<num dec>\":\"(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>\",\"<ureal box>\":\"[0-9a-f]+(?:/[0-9a-f]+)?\",\"<real box>\":\"[+-]?<ureal box>|[+-](?:inf|nan)\\\\.0\",\"<imaginary box>\":\"[+-](?:<ureal box>|(?:inf|nan)\\\\.0)?i\",\"<complex box>\":\"<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>\",\"<num box>\":\"#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>\",\"<number>\":\"(^|[()\\\\[\\\\]\\\\s])(?:<num dec>|<num box>)(?=[()\\\\[\\\\]\\\\s]|$)\"}),\"i\"),lookbehind:!0},boolean:{pattern:/(^|[()\\[\\]\\s])#(?:[ft]|false|true)(?=[()\\[\\]\\s]|$)/,lookbehind:!0},function:{pattern:/((?:^|[^'`#])[(\\[])(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\[\\]\\s]|$)/,lookbehind:!0},identifier:{pattern:/(^|[()\\[\\]\\s])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\[\\]\\s]|$)/,lookbehind:!0,greedy:!0},punctuation:/[()\\[\\]']/};"]}}