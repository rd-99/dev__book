{"code":"(this[\"webpackJsonp@dev-book/local-client\"]=this[\"webpackJsonp@dev-book/local-client\"]||[]).push([[370],{547:function(e,i){Prism.languages.purescript=Prism.languages.extend(\"haskell\",{keyword:/\\b(?:ado|case|class|data|derive|do|else|forall|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\"import-statement\":{pattern:/(^[\\t ]*)import\\s+[A-Z][\\w']*(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+[A-Z][\\w']*(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,lookbehind:!0,inside:{keyword:/\\b(?:import|as|hiding)\\b/}},builtin:/\\b(?:absurd|add|ap|append|apply|between|bind|bottom|clamp|compare|comparing|compose|conj|const|degree|discard|disj|div|eq|flap|flip|gcd|identity|ifM|join|lcm|liftA1|liftM1|map|max|mempty|min|mod|mul|negate|not|notEq|one|otherwise|recip|show|sub|top|unit|unless|unlessM|void|when|whenM|zero)\\b/}),Prism.languages.purs=Prism.languages.purescript}}]);","name":"static/js/370.e6f770d6.chunk.js","map":{"version":3,"names":["this","push","module","exports","Prism","languages","purescript","extend","keyword","pattern","lookbehind","inside","builtin","purs"],"sources":["static/js/370.e6f770d6.chunk.js"],"mappings":"CAACA,KAAK,sCAAwCA,KAAK,uCAAyC,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEtG,IACA,SAAUC,EAAQC,GAExBC,MAAMC,UAAUC,WAAaF,MAAMC,UAAUE,OAAO,UAAW,CAC7DC,QAAW,iIACX,mBAAoB,CAIlBC,QAAS,6GACTC,YAAY,EACZC,OAAQ,CACNH,QAAW,6BAIfI,QAAW,ySAEbR,MAAMC,UAAUQ,KAAOT,MAAMC,UAAUC,UAEhC"},"input":"(this[\"webpackJsonp@dev-book/local-client\"] = this[\"webpackJsonp@dev-book/local-client\"] || []).push([[370],{\n\n/***/ 547:\n/***/ (function(module, exports) {\n\nPrism.languages.purescript = Prism.languages.extend('haskell', {\n  'keyword': /\\b(?:ado|case|class|data|derive|do|else|forall|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\n  'import-statement': {\n    // The imported or hidden names are not included in this import\n    // statement. This is because we want to highlight those exactly like\n    // we do for the names in the program.\n    pattern: /(^[\\t ]*)import\\s+[A-Z][\\w']*(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+[A-Z][\\w']*(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,\n    lookbehind: true,\n    inside: {\n      'keyword': /\\b(?:import|as|hiding)\\b/\n    }\n  },\n  // These are builtin functions only. Constructors are highlighted later as a constant.\n  'builtin': /\\b(?:absurd|add|ap|append|apply|between|bind|bottom|clamp|compare|comparing|compose|conj|const|degree|discard|disj|div|eq|flap|flip|gcd|identity|ifM|join|lcm|liftA1|liftM1|map|max|mempty|min|mod|mul|negate|not|notEq|one|otherwise|recip|show|sub|top|unit|unless|unlessM|void|when|whenM|zero)\\b/\n});\nPrism.languages.purs = Prism.languages.purescript;\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-purescript.js"],"names":["Prism","languages","purescript","extend","pattern","lookbehind","inside","purs"],"mappings":";;;;;AAAAA,KAAK,CAACC,SAAS,CAACC,UAAU,GAAGF,KAAK,CAACC,SAAS,CAACE,MAAM,CAAC,SAAS,EAAE;EAC9D,SAAS,EAAE,gIAAgI;EAE3I,kBAAkB,EAAE;IACnB;IACA;IACA;IACAC,OAAO,EAAE,4GAA4G;IACrHC,UAAU,EAAE,IAAI;IAChBC,MAAM,EAAE;MACP,SAAS,EAAE;IACZ;EACD,CAAC;EAED;EACA,SAAS,EAAE;AACZ,CAAC,CAAC;AAEFN,KAAK,CAACC,SAAS,CAACM,IAAI,GAAGP,KAAK,CAACC,SAAS,CAACC,UAAU,C","file":"x","sourcesContent":["Prism.languages.purescript = Prism.languages.extend('haskell', {\n\t'keyword': /\\b(?:ado|case|class|data|derive|do|else|forall|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\n\n\t'import-statement': {\n\t\t// The imported or hidden names are not included in this import\n\t\t// statement. This is because we want to highlight those exactly like\n\t\t// we do for the names in the program.\n\t\tpattern: /(^[\\t ]*)import\\s+[A-Z][\\w']*(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+[A-Z][\\w']*(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'keyword': /\\b(?:import|as|hiding)\\b/\n\t\t}\n\t},\n\n\t// These are builtin functions only. Constructors are highlighted later as a constant.\n\t'builtin': /\\b(?:absurd|add|ap|append|apply|between|bind|bottom|clamp|compare|comparing|compose|conj|const|degree|discard|disj|div|eq|flap|flip|gcd|identity|ifM|join|lcm|liftA1|liftM1|map|max|mempty|min|mod|mul|negate|not|notEq|one|otherwise|recip|show|sub|top|unit|unless|unlessM|void|when|whenM|zero)\\b/,\n});\n\nPrism.languages.purs = Prism.languages.purescript;\n"]}}