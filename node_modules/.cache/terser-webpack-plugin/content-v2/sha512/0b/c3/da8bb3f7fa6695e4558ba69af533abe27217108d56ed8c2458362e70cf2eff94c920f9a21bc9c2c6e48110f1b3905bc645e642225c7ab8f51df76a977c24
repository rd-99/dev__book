{"code":"(this[\"webpackJsonp@dev-book/local-client\"]=this[\"webpackJsonp@dev-book/local-client\"]||[]).push([[366],{543:function(e,t){!function(e){e.languages.pure={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0},/#!.+/],\"inline-lang\":{pattern:/%<[\\s\\S]+?%>/,greedy:!0,inside:{lang:{pattern:/(^%< *)-\\*-.+?-\\*-/,lookbehind:!0,alias:\"comment\"},delimiter:{pattern:/^%<.*|%>$/,alias:\"punctuation\"}}},string:{pattern:/\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,greedy:!0},number:{pattern:/((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?L?)/i,lookbehind:!0},keyword:/\\b(?:ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|NULL|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,function:/\\b(?:abs|add_(?:(?:fundef|interface|macdef|typedef)(?:_at)?|addr|constdef|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_(?:matrix|pointer)|byte_c?string(?:_pointer)?|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|short|sentry|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,special:{pattern:/\\b__[a-z]+__\\b/i,alias:\"builtin\"},operator:/(?:[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]|\\b_+\\b)+|\\b(?:and|div|mod|not|or)\\b/,punctuation:/[(){}\\[\\];,|]/};var t=/%< *-\\*- *<lang>\\d* *-\\*-[\\s\\S]+?%>/.source;[\"c\",{lang:\"c++\",alias:\"cpp\"},\"fortran\"].forEach((function(a){var r=a;if(\"string\"!==typeof a&&(r=a.alias,a=a.lang),e.languages[r]){var i={};i[\"inline-lang-\"+r]={pattern:RegExp(t.replace(\"<lang>\",a.replace(/([.+*?\\/\\\\(){}\\[\\]])/g,\"\\\\$1\")),\"i\"),inside:e.util.clone(e.languages.pure[\"inline-lang\"].inside)},i[\"inline-lang-\"+r].inside.rest=e.util.clone(e.languages[r]),e.languages.insertBefore(\"pure\",\"inline-lang\",i)}})),e.languages.c&&(e.languages.pure[\"inline-lang\"].inside.rest=e.util.clone(e.languages.c))}(Prism)}}]);","name":"static/js/366.3b89f2b6.chunk.js","map":{"version":3,"names":["this","push","module","exports","Prism","languages","pure","comment","pattern","lookbehind","greedy","inside","lang","alias","delimiter","string","number","keyword","function","special","operator","punctuation","inlineLanguageRe","source","forEach","o","RegExp","replace","util","clone","rest","insertBefore","c"],"sources":["static/js/366.3b89f2b6.chunk.js"],"mappings":"CAACA,KAAK,sCAAwCA,KAAK,uCAAyC,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEtG,IACA,SAAUC,EAAQC,IAExB,SAAWC,GAGTA,EAAMC,UAAUC,KAAO,CACrBC,QAAW,CAAC,CACVC,QAAS,4BACTC,YAAY,GACX,CACDD,QAAS,mBACTC,YAAY,GACX,QACH,cAAe,CACbD,QAAS,eACTE,QAAQ,EACRC,OAAQ,CACNC,KAAQ,CACNJ,QAAS,qBACTC,YAAY,EACZI,MAAO,WAETC,UAAa,CACXN,QAAS,YACTK,MAAO,iBAIbE,OAAU,CACRP,QAAS,wBACTE,QAAQ,GAEVM,OAAU,CAERR,QAAS,kGACTC,YAAY,GAEdQ,QAAW,0SACXC,SAAY,00DACZC,QAAW,CACTX,QAAS,kBACTK,MAAO,WAITO,SAAY,8GAEZC,YAAe,iBAEjB,IAIIC,EAAmB,sCAAsCC,OAJvC,CAAC,IAAK,CAC1BX,KAAM,MACNC,MAAO,OACN,WAEaW,SAAQ,SAAUZ,GAChC,IAAIC,EAAQD,EAKZ,GAJoB,kBAATA,IACTC,EAAQD,EAAKC,MACbD,EAAOA,EAAKA,MAEVR,EAAMC,UAAUQ,GAAQ,CAC1B,IAAIY,EAAI,CAAC,EACTA,EAAE,eAAiBZ,GAAS,CAC1BL,QAASkB,OAAOJ,EAAiBK,QAAQ,SAAUf,EAAKe,QAAQ,wBAAyB,SAAU,KACnGhB,OAAQP,EAAMwB,KAAKC,MAAMzB,EAAMC,UAAUC,KAAK,eAAeK,SAE/Dc,EAAE,eAAiBZ,GAAOF,OAAOmB,KAAO1B,EAAMwB,KAAKC,MAAMzB,EAAMC,UAAUQ,IACzET,EAAMC,UAAU0B,aAAa,OAAQ,cAAeN,EACtD,CACF,IAGIrB,EAAMC,UAAU2B,IAClB5B,EAAMC,UAAUC,KAAK,eAAeK,OAAOmB,KAAO1B,EAAMwB,KAAKC,MAAMzB,EAAMC,UAAU2B,GAEtF,CAzED,CAyEG5B,MAEI"},"input":"(this[\"webpackJsonp@dev-book/local-client\"] = this[\"webpackJsonp@dev-book/local-client\"] || []).push([[366],{\n\n/***/ 543:\n/***/ (function(module, exports) {\n\n(function (Prism) {\n  // https://agraef.github.io/pure-docs/pure.html#lexical-matters\n\n  Prism.languages.pure = {\n    'comment': [{\n      pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^\\\\:])\\/\\/.*/,\n      lookbehind: true\n    }, /#!.+/],\n    'inline-lang': {\n      pattern: /%<[\\s\\S]+?%>/,\n      greedy: true,\n      inside: {\n        'lang': {\n          pattern: /(^%< *)-\\*-.+?-\\*-/,\n          lookbehind: true,\n          alias: 'comment'\n        },\n        'delimiter': {\n          pattern: /^%<.*|%>$/,\n          alias: 'punctuation'\n        }\n      }\n    },\n    'string': {\n      pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    'number': {\n      // The look-behind prevents wrong highlighting of the .. operator\n      pattern: /((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?L?)/i,\n      lookbehind: true\n    },\n    'keyword': /\\b(?:ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|NULL|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,\n    'function': /\\b(?:abs|add_(?:(?:fundef|interface|macdef|typedef)(?:_at)?|addr|constdef|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_(?:matrix|pointer)|byte_c?string(?:_pointer)?|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|short|sentry|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,\n    'special': {\n      pattern: /\\b__[a-z]+__\\b/i,\n      alias: 'builtin'\n    },\n    // Any combination of operator chars can be an operator\n    // eslint-disable-next-line no-misleading-character-class\n    'operator': /(?:[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]|\\b_+\\b)+|\\b(?:and|div|mod|not|or)\\b/,\n    // FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?\n    'punctuation': /[(){}\\[\\];,|]/\n  };\n  var inlineLanguages = ['c', {\n    lang: 'c++',\n    alias: 'cpp'\n  }, 'fortran'];\n  var inlineLanguageRe = /%< *-\\*- *<lang>\\d* *-\\*-[\\s\\S]+?%>/.source;\n  inlineLanguages.forEach(function (lang) {\n    var alias = lang;\n    if (typeof lang !== 'string') {\n      alias = lang.alias;\n      lang = lang.lang;\n    }\n    if (Prism.languages[alias]) {\n      var o = {};\n      o['inline-lang-' + alias] = {\n        pattern: RegExp(inlineLanguageRe.replace('<lang>', lang.replace(/([.+*?\\/\\\\(){}\\[\\]])/g, '\\\\$1')), 'i'),\n        inside: Prism.util.clone(Prism.languages.pure['inline-lang'].inside)\n      };\n      o['inline-lang-' + alias].inside.rest = Prism.util.clone(Prism.languages[alias]);\n      Prism.languages.insertBefore('pure', 'inline-lang', o);\n    }\n  });\n\n  // C is the default inline language\n  if (Prism.languages.c) {\n    Prism.languages.pure['inline-lang'].inside.rest = Prism.util.clone(Prism.languages.c);\n  }\n})(Prism);\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-pure.js"],"names":["Prism","languages","pure","pattern","lookbehind","greedy","inside","alias","inlineLanguages","lang","inlineLanguageRe","source","forEach","o","RegExp","replace","util","clone","rest","insertBefore","c"],"mappings":";;;;;AAAC,WAAUA,KAAK,EAAE;EACjB;;EAEAA,KAAK,CAACC,SAAS,CAACC,IAAI,GAAG;IACtB,SAAS,EAAE,CACV;MACCC,OAAO,EAAE,2BAA2B;MACpCC,UAAU,EAAE;IACb,CAAC,EACD;MACCD,OAAO,EAAE,kBAAkB;MAC3BC,UAAU,EAAE;IACb,CAAC,EACD,MAAM,CACN;IACD,aAAa,EAAE;MACdD,OAAO,EAAE,cAAc;MACvBE,MAAM,EAAE,IAAI;MACZC,MAAM,EAAE;QACP,MAAM,EAAE;UACPH,OAAO,EAAE,oBAAoB;UAC7BC,UAAU,EAAE,IAAI;UAChBG,KAAK,EAAE;QACR,CAAC;QACD,WAAW,EAAE;UACZJ,OAAO,EAAE,WAAW;UACpBI,KAAK,EAAE;QACR;MACD;IACD,CAAC;IACD,QAAQ,EAAE;MACTJ,OAAO,EAAE,uBAAuB;MAChCE,MAAM,EAAE;IACT,CAAC;IACD,QAAQ,EAAE;MACT;MACAF,OAAO,EAAE,iGAAiG;MAC1GC,UAAU,EAAE;IACb,CAAC;IACD,SAAS,EAAE,ySAAyS;IACpT,UAAU,EAAE,y0DAAy0D;IACr1D,SAAS,EAAE;MACVD,OAAO,EAAE,iBAAiB;MAC1BI,KAAK,EAAE;IACR,CAAC;IACD;IACA;IACA,UAAU,EAAE,6GAA6G;IACzH;IACA,aAAa,EAAE;EAChB,CAAC;EAED,IAAIC,eAAe,GAAG,CACrB,GAAG,EACH;IAAEC,IAAI,EAAE,KAAK;IAAEF,KAAK,EAAE;EAAM,CAAC,EAC7B,SAAS,CACT;EACD,IAAIG,gBAAgB,GAAG,qCAAqC,CAACC,MAAM;EAEnEH,eAAe,CAACI,OAAO,CAAC,UAAUH,IAAI,EAAE;IACvC,IAAIF,KAAK,GAAGE,IAAI;IAChB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAC7BF,KAAK,GAAGE,IAAI,CAACF,KAAK;MAClBE,IAAI,GAAGA,IAAI,CAACA,IAAI;IACjB;IACA,IAAIT,KAAK,CAACC,SAAS,CAACM,KAAK,CAAC,EAAE;MAC3B,IAAIM,CAAC,GAAG,CAAC,CAAC;MACVA,CAAC,CAAC,cAAc,GAAGN,KAAK,CAAC,GAAG;QAC3BJ,OAAO,EAAEW,MAAM,CAACJ,gBAAgB,CAACK,OAAO,CAAC,QAAQ,EAAEN,IAAI,CAACM,OAAO,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC;QACvGT,MAAM,EAAEN,KAAK,CAACgB,IAAI,CAACC,KAAK,CAACjB,KAAK,CAACC,SAAS,CAACC,IAAI,CAAC,aAAa,CAAC,CAACI,MAAM;MACpE,CAAC;MACDO,CAAC,CAAC,cAAc,GAAGN,KAAK,CAAC,CAACD,MAAM,CAACY,IAAI,GAAGlB,KAAK,CAACgB,IAAI,CAACC,KAAK,CAACjB,KAAK,CAACC,SAAS,CAACM,KAAK,CAAC,CAAC;MAChFP,KAAK,CAACC,SAAS,CAACkB,YAAY,CAAC,MAAM,EAAE,aAAa,EAAEN,CAAC,CAAC;IACvD;EACD,CAAC,CAAC;;EAEF;EACA,IAAIb,KAAK,CAACC,SAAS,CAACmB,CAAC,EAAE;IACtBpB,KAAK,CAACC,SAAS,CAACC,IAAI,CAAC,aAAa,CAAC,CAACI,MAAM,CAACY,IAAI,GAAGlB,KAAK,CAACgB,IAAI,CAACC,KAAK,CAACjB,KAAK,CAACC,SAAS,CAACmB,CAAC,CAAC;EACtF;AAED,CAAC,EAACpB,KAAK,CAAC,C","file":"x","sourcesContent":["(function (Prism) {\n\t// https://agraef.github.io/pure-docs/pure.html#lexical-matters\n\n\tPrism.languages.pure = {\n\t\t'comment': [\n\t\t\t{\n\t\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t/#!.+/\n\t\t],\n\t\t'inline-lang': {\n\t\t\tpattern: /%<[\\s\\S]+?%>/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'lang': {\n\t\t\t\t\tpattern: /(^%< *)-\\*-.+?-\\*-/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'comment'\n\t\t\t\t},\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^%<.*|%>$/,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'string': {\n\t\t\tpattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n\t\t\tgreedy: true\n\t\t},\n\t\t'number': {\n\t\t\t// The look-behind prevents wrong highlighting of the .. operator\n\t\t\tpattern: /((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?L?)/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'keyword': /\\b(?:ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|NULL|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,\n\t\t'function': /\\b(?:abs|add_(?:(?:fundef|interface|macdef|typedef)(?:_at)?|addr|constdef|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_(?:matrix|pointer)|byte_c?string(?:_pointer)?|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|short|sentry|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,\n\t\t'special': {\n\t\t\tpattern: /\\b__[a-z]+__\\b/i,\n\t\t\talias: 'builtin'\n\t\t},\n\t\t// Any combination of operator chars can be an operator\n\t\t// eslint-disable-next-line no-misleading-character-class\n\t\t'operator': /(?:[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]|\\b_+\\b)+|\\b(?:and|div|mod|not|or)\\b/,\n\t\t// FIXME: How can we prevent | and , to be highlighted as operator when they are used alone?\n\t\t'punctuation': /[(){}\\[\\];,|]/\n\t};\n\n\tvar inlineLanguages = [\n\t\t'c',\n\t\t{ lang: 'c++', alias: 'cpp' },\n\t\t'fortran'\n\t];\n\tvar inlineLanguageRe = /%< *-\\*- *<lang>\\d* *-\\*-[\\s\\S]+?%>/.source;\n\n\tinlineLanguages.forEach(function (lang) {\n\t\tvar alias = lang;\n\t\tif (typeof lang !== 'string') {\n\t\t\talias = lang.alias;\n\t\t\tlang = lang.lang;\n\t\t}\n\t\tif (Prism.languages[alias]) {\n\t\t\tvar o = {};\n\t\t\to['inline-lang-' + alias] = {\n\t\t\t\tpattern: RegExp(inlineLanguageRe.replace('<lang>', lang.replace(/([.+*?\\/\\\\(){}\\[\\]])/g, '\\\\$1')), 'i'),\n\t\t\t\tinside: Prism.util.clone(Prism.languages.pure['inline-lang'].inside)\n\t\t\t};\n\t\t\to['inline-lang-' + alias].inside.rest = Prism.util.clone(Prism.languages[alias]);\n\t\t\tPrism.languages.insertBefore('pure', 'inline-lang', o);\n\t\t}\n\t});\n\n\t// C is the default inline language\n\tif (Prism.languages.c) {\n\t\tPrism.languages.pure['inline-lang'].inside.rest = Prism.util.clone(Prism.languages.c);\n\t}\n\n}(Prism));\n"]}}