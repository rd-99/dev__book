{"code":"(this[\"webpackJsonp@dev-book/local-client\"]=this[\"webpackJsonp@dev-book/local-client\"]||[]).push([[422],{599:function(e,t){!function(e){e.languages.smarty={comment:/\\{\\*[\\s\\S]*?\\*\\}/,delimiter:{pattern:/^\\{|\\}$/i,alias:\"punctuation\"},string:/([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,number:/\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,variable:[/\\$(?!\\d)\\w+/,/#(?!\\d)\\w+#/,{pattern:/(\\.|->)(?!\\d)\\w+/,lookbehind:!0},{pattern:/(\\[)(?!\\d)\\w+(?=\\])/,lookbehind:!0}],function:[{pattern:/(\\|\\s*)@?(?!\\d)\\w+/,lookbehind:!0},/^\\/?(?!\\d)\\w+/,/(?!\\d)\\w+(?=\\()/],\"attr-name\":{pattern:/\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,inside:{variable:{pattern:/(=\\s*)(?!\\d)\\w+/,lookbehind:!0},operator:/=/}},punctuation:[/[\\[\\]().,:`]|->/],operator:[/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,/\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,/\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/],keyword:/\\b(?:false|off|on|no|true|yes)\\b/},e.hooks.add(\"before-tokenize\",(function(t){var n=!1;e.languages[\"markup-templating\"].buildPlaceholders(t,\"smarty\",/\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g,(function(e){return\"{/literal}\"===e&&(n=!1),!n&&(\"{literal}\"===e&&(n=!0),!0)}))})),e.hooks.add(\"after-tokenize\",(function(t){e.languages[\"markup-templating\"].tokenizePlaceholders(t,\"smarty\")}))}(Prism)}}]);","name":"static/js/422.c3b9d0a5.chunk.js","map":{"version":3,"names":["this","push","module","exports","Prism","languages","smarty","comment","delimiter","pattern","alias","string","number","variable","lookbehind","function","inside","operator","punctuation","keyword","hooks","add","env","smartyLitteralMode","buildPlaceholders","match","tokenizePlaceholders"],"sources":["static/js/422.c3b9d0a5.chunk.js"],"mappings":"CAACA,KAAK,sCAAwCA,KAAK,uCAAyC,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEtG,IACA,SAAUC,EAAQC,IAOxB,SAAWC,GACTA,EAAMC,UAAUC,OAAS,CACvBC,QAAW,mBACXC,UAAa,CACXC,QAAS,WACTC,MAAO,eAETC,OAAU,mCACVC,OAAU,+DACVC,SAAY,CAAC,cAAe,cAAe,CACzCJ,QAAS,mBACTK,YAAY,GACX,CACDL,QAAS,sBACTK,YAAY,IAEdC,SAAY,CAAC,CACXN,QAAS,qBACTK,YAAY,GACX,gBAAiB,mBACpB,YAAa,CAEXL,QAAS,2BACTO,OAAQ,CACNH,SAAY,CACVJ,QAAS,kBACTK,YAAY,GAEdG,SAAY,MAGhBC,YAAe,CAAC,mBAChBD,SAAY,CAAC,mCAAoC,iDAAkD,kDACnGE,QAAW,oCAIbf,EAAMgB,MAAMC,IAAI,mBAAmB,SAAUC,GAC3C,IAGIC,GAAqB,EACzBnB,EAAMC,UAAU,qBAAqBmB,kBAAkBF,EAAK,SAJxC,kCAIiE,SAAUG,GAK7F,MAPsB,eAIlBA,IACFF,GAAqB,IAElBA,IARmB,cASlBE,IACFF,GAAqB,IAEhB,EAGX,GACF,IAGAnB,EAAMgB,MAAMC,IAAI,kBAAkB,SAAUC,GAC1ClB,EAAMC,UAAU,qBAAqBqB,qBAAqBJ,EAAK,SACjE,GACD,CA7DD,CA6DGlB,MAEI"},"input":"(this[\"webpackJsonp@dev-book/local-client\"] = this[\"webpackJsonp@dev-book/local-client\"] || []).push([[422],{\n\n/***/ 599:\n/***/ (function(module, exports) {\n\n/* TODO\n\tAdd support for variables inside double quoted strings\n\tAdd support for {php}\n*/\n\n(function (Prism) {\n  Prism.languages.smarty = {\n    'comment': /\\{\\*[\\s\\S]*?\\*\\}/,\n    'delimiter': {\n      pattern: /^\\{|\\}$/i,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n    'variable': [/\\$(?!\\d)\\w+/, /#(?!\\d)\\w+#/, {\n      pattern: /(\\.|->)(?!\\d)\\w+/,\n      lookbehind: true\n    }, {\n      pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n      lookbehind: true\n    }],\n    'function': [{\n      pattern: /(\\|\\s*)@?(?!\\d)\\w+/,\n      lookbehind: true\n    }, /^\\/?(?!\\d)\\w+/, /(?!\\d)\\w+(?=\\()/],\n    'attr-name': {\n      // Value is made optional because it may have already been tokenized\n      pattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,\n      inside: {\n        'variable': {\n          pattern: /(=\\s*)(?!\\d)\\w+/,\n          lookbehind: true\n        },\n        'operator': /=/\n      }\n    },\n    'punctuation': [/[\\[\\]().,:`]|->/],\n    'operator': [/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/, /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/, /\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/],\n    'keyword': /\\b(?:false|off|on|no|true|yes)\\b/\n  };\n\n  // Tokenize all inline Smarty expressions\n  Prism.hooks.add('before-tokenize', function (env) {\n    var smartyPattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g;\n    var smartyLitteralStart = '{literal}';\n    var smartyLitteralEnd = '{/literal}';\n    var smartyLitteralMode = false;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'smarty', smartyPattern, function (match) {\n      // Smarty tags inside {literal} block are ignored\n      if (match === smartyLitteralEnd) {\n        smartyLitteralMode = false;\n      }\n      if (!smartyLitteralMode) {\n        if (match === smartyLitteralStart) {\n          smartyLitteralMode = true;\n        }\n        return true;\n      }\n      return false;\n    });\n  });\n\n  // Re-insert the tokens after tokenizing\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty');\n  });\n})(Prism);\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-smarty.js"],"names":["Prism","languages","smarty","pattern","alias","lookbehind","inside","hooks","add","env","smartyPattern","smartyLitteralStart","smartyLitteralEnd","smartyLitteralMode","buildPlaceholders","match","tokenizePlaceholders"],"mappings":";;;;;AAAA;AACA;AACA;AACA;;AAEC,WAAUA,KAAK,EAAE;EAEjBA,KAAK,CAACC,SAAS,CAACC,MAAM,GAAG;IACxB,SAAS,EAAE,kBAAkB;IAC7B,WAAW,EAAE;MACZC,OAAO,EAAE,UAAU;MACnBC,KAAK,EAAE;IACR,CAAC;IACD,QAAQ,EAAE,kCAAkC;IAC5C,QAAQ,EAAE,8DAA8D;IACxE,UAAU,EAAE,CACX,aAAa,EACb,aAAa,EACb;MACCD,OAAO,EAAE,kBAAkB;MAC3BE,UAAU,EAAE;IACb,CAAC,EACD;MACCF,OAAO,EAAE,qBAAqB;MAC9BE,UAAU,EAAE;IACb,CAAC,CACD;IACD,UAAU,EAAE,CACX;MACCF,OAAO,EAAE,oBAAoB;MAC7BE,UAAU,EAAE;IACb,CAAC,EACD,eAAe,EACf,iBAAiB,CACjB;IACD,WAAW,EAAE;MACZ;MACAF,OAAO,EAAE,0BAA0B;MACnCG,MAAM,EAAE;QACP,UAAU,EAAE;UACXH,OAAO,EAAE,iBAAiB;UAC1BE,UAAU,EAAE;QACb,CAAC;QACD,UAAU,EAAE;MACb;IACD,CAAC;IACD,aAAa,EAAE,CACd,iBAAiB,CACjB;IACD,UAAU,EAAE,CACX,kCAAkC,EAClC,gDAAgD,EAChD,gDAAgD,CAChD;IACD,SAAS,EAAE;EACZ,CAAC;;EAED;EACAL,KAAK,CAACO,KAAK,CAACC,GAAG,CAAC,iBAAiB,EAAE,UAAUC,GAAG,EAAE;IACjD,IAAIC,aAAa,GAAG,gCAAgC;IACpD,IAAIC,mBAAmB,GAAG,WAAW;IACrC,IAAIC,iBAAiB,GAAG,YAAY;IACpC,IAAIC,kBAAkB,GAAG,KAAK;IAE9Bb,KAAK,CAACC,SAAS,CAAC,mBAAmB,CAAC,CAACa,iBAAiB,CAACL,GAAG,EAAE,QAAQ,EAAEC,aAAa,EAAE,UAAUK,KAAK,EAAE;MACrG;MACA,IAAIA,KAAK,KAAKH,iBAAiB,EAAE;QAChCC,kBAAkB,GAAG,KAAK;MAC3B;MAEA,IAAI,CAACA,kBAAkB,EAAE;QACxB,IAAIE,KAAK,KAAKJ,mBAAmB,EAAE;UAClCE,kBAAkB,GAAG,IAAI;QAC1B;QAEA,OAAO,IAAI;MACZ;MACA,OAAO,KAAK;IACb,CAAC,CAAC;EACH,CAAC,CAAC;;EAEF;EACAb,KAAK,CAACO,KAAK,CAACC,GAAG,CAAC,gBAAgB,EAAE,UAAUC,GAAG,EAAE;IAChDT,KAAK,CAACC,SAAS,CAAC,mBAAmB,CAAC,CAACe,oBAAoB,CAACP,GAAG,EAAE,QAAQ,CAAC;EACzE,CAAC,CAAC;AAEH,CAAC,EAACT,KAAK,CAAC,C","file":"x","sourcesContent":["/* TODO\n\tAdd support for variables inside double quoted strings\n\tAdd support for {php}\n*/\n\n(function (Prism) {\n\n\tPrism.languages.smarty = {\n\t\t'comment': /\\{\\*[\\s\\S]*?\\*\\}/,\n\t\t'delimiter': {\n\t\t\tpattern: /^\\{|\\}$/i,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\t'number': /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n\t\t'variable': [\n\t\t\t/\\$(?!\\d)\\w+/,\n\t\t\t/#(?!\\d)\\w+#/,\n\t\t\t{\n\t\t\t\tpattern: /(\\.|->)(?!\\d)\\w+/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t],\n\t\t'function': [\n\t\t\t{\n\t\t\t\tpattern: /(\\|\\s*)@?(?!\\d)\\w+/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t/^\\/?(?!\\d)\\w+/,\n\t\t\t/(?!\\d)\\w+(?=\\()/\n\t\t],\n\t\t'attr-name': {\n\t\t\t// Value is made optional because it may have already been tokenized\n\t\t\tpattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,\n\t\t\tinside: {\n\t\t\t\t'variable': {\n\t\t\t\t\tpattern: /(=\\s*)(?!\\d)\\w+/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\t'operator': /=/\n\t\t\t}\n\t\t},\n\t\t'punctuation': [\n\t\t\t/[\\[\\]().,:`]|->/\n\t\t],\n\t\t'operator': [\n\t\t\t/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,\n\t\t\t/\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,\n\t\t\t/\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/\n\t\t],\n\t\t'keyword': /\\b(?:false|off|on|no|true|yes)\\b/\n\t};\n\n\t// Tokenize all inline Smarty expressions\n\tPrism.hooks.add('before-tokenize', function (env) {\n\t\tvar smartyPattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g;\n\t\tvar smartyLitteralStart = '{literal}';\n\t\tvar smartyLitteralEnd = '{/literal}';\n\t\tvar smartyLitteralMode = false;\n\n\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'smarty', smartyPattern, function (match) {\n\t\t\t// Smarty tags inside {literal} block are ignored\n\t\t\tif (match === smartyLitteralEnd) {\n\t\t\t\tsmartyLitteralMode = false;\n\t\t\t}\n\n\t\t\tif (!smartyLitteralMode) {\n\t\t\t\tif (match === smartyLitteralStart) {\n\t\t\t\t\tsmartyLitteralMode = true;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t});\n\n\t// Re-insert the tokens after tokenizing\n\tPrism.hooks.add('after-tokenize', function (env) {\n\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty');\n\t});\n\n}(Prism));\n"]}}