{"ast":null,"code":"// https://www.graphviz.org/doc/info/lang.html\n\n(function (Prism) {\n  var ID = '(?:' + [\n  // an identifier\n  /[a-zA-Z_\\x80-\\uFFFF][\\w\\x80-\\uFFFF]*/.source,\n  // a number\n  /-?(?:\\.\\d+|\\d+(?:\\.\\d*)?)/.source,\n  // a double-quoted string\n  /\"[^\"\\\\]*(?:\\\\[\\s\\S][^\"\\\\]*)*\"/.source,\n  // HTML-like string\n  /<(?:[^<>]|(?!<!--)<(?:[^<>\"']|\"[^\"]*\"|'[^']*')+>|<!--(?:[^-]|-(?!->))*-->)*>/.source].join('|') + ')';\n  var IDInside = {\n    'markup': {\n      pattern: /(^<)[\\s\\S]+(?=>$)/,\n      lookbehind: true,\n      alias: ['language-markup', 'language-html', 'language-xml'],\n      inside: Prism.languages.markup\n    }\n  };\n\n  /**\n   * @param {string} source\n   * @param {string} flags\n   * @returns {RegExp}\n   */\n  function withID(source, flags) {\n    return RegExp(source.replace(/<ID>/g, function () {\n      return ID;\n    }), flags);\n  }\n  Prism.languages.dot = {\n    'comment': {\n      pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|^#.*/m,\n      greedy: true\n    },\n    'graph-name': {\n      pattern: withID(/(\\b(?:digraph|graph|subgraph)[ \\t\\r\\n]+)<ID>/.source, 'i'),\n      lookbehind: true,\n      greedy: true,\n      alias: 'class-name',\n      inside: IDInside\n    },\n    'attr-value': {\n      pattern: withID(/(=[ \\t\\r\\n]*)<ID>/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: IDInside\n    },\n    'attr-name': {\n      pattern: withID(/([\\[;, \\t\\r\\n])<ID>(?=[ \\t\\r\\n]*=)/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: IDInside\n    },\n    'keyword': /\\b(?:digraph|edge|graph|node|strict|subgraph)\\b/i,\n    'compass-point': {\n      pattern: /(:[ \\t\\r\\n]*)(?:[ns][ew]?|[ewc_])(?![\\w\\x80-\\uFFFF])/,\n      lookbehind: true,\n      alias: 'builtin'\n    },\n    'node': {\n      pattern: withID(/(^|[^-.\\w\\x80-\\uFFFF\\\\])<ID>/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: IDInside\n    },\n    'operator': /[=:]|-[->]/,\n    'punctuation': /[\\[\\]{};,]/\n  };\n  Prism.languages.gv = Prism.languages.dot;\n})(Prism);","map":{"version":3,"names":["Prism","ID","source","join","IDInside","pattern","lookbehind","alias","inside","languages","markup","withID","flags","RegExp","replace","dot","greedy","gv"],"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-dot.js"],"sourcesContent":["// https://www.graphviz.org/doc/info/lang.html\n\n(function (Prism) {\n\n\tvar ID = '(?:' + [\n\t\t// an identifier\n\t\t/[a-zA-Z_\\x80-\\uFFFF][\\w\\x80-\\uFFFF]*/.source,\n\t\t// a number\n\t\t/-?(?:\\.\\d+|\\d+(?:\\.\\d*)?)/.source,\n\t\t// a double-quoted string\n\t\t/\"[^\"\\\\]*(?:\\\\[\\s\\S][^\"\\\\]*)*\"/.source,\n\t\t// HTML-like string\n\t\t/<(?:[^<>]|(?!<!--)<(?:[^<>\"']|\"[^\"]*\"|'[^']*')+>|<!--(?:[^-]|-(?!->))*-->)*>/.source\n\t].join('|') + ')';\n\n\tvar IDInside = {\n\t\t'markup': {\n\t\t\tpattern: /(^<)[\\s\\S]+(?=>$)/,\n\t\t\tlookbehind: true,\n\t\t\talias: ['language-markup', 'language-html', 'language-xml'],\n\t\t\tinside: Prism.languages.markup\n\t\t}\n\t};\n\n\t/**\n\t * @param {string} source\n\t * @param {string} flags\n\t * @returns {RegExp}\n\t */\n\tfunction withID(source, flags) {\n\t\treturn RegExp(source.replace(/<ID>/g, function () { return ID; }), flags);\n\t}\n\n\tPrism.languages.dot = {\n\t\t'comment': {\n\t\t\tpattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|^#.*/m,\n\t\t\tgreedy: true\n\t\t},\n\t\t'graph-name': {\n\t\t\tpattern: withID(/(\\b(?:digraph|graph|subgraph)[ \\t\\r\\n]+)<ID>/.source, 'i'),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\talias: 'class-name',\n\t\t\tinside: IDInside\n\t\t},\n\t\t'attr-value': {\n\t\t\tpattern: withID(/(=[ \\t\\r\\n]*)<ID>/.source),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: IDInside\n\t\t},\n\t\t'attr-name': {\n\t\t\tpattern: withID(/([\\[;, \\t\\r\\n])<ID>(?=[ \\t\\r\\n]*=)/.source),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: IDInside\n\t\t},\n\t\t'keyword': /\\b(?:digraph|edge|graph|node|strict|subgraph)\\b/i,\n\t\t'compass-point': {\n\t\t\tpattern: /(:[ \\t\\r\\n]*)(?:[ns][ew]?|[ewc_])(?![\\w\\x80-\\uFFFF])/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'builtin'\n\t\t},\n\t\t'node': {\n\t\t\tpattern: withID(/(^|[^-.\\w\\x80-\\uFFFF\\\\])<ID>/.source),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: IDInside\n\t\t},\n\t\t'operator': /[=:]|-[->]/,\n\t\t'punctuation': /[\\[\\]{};,]/\n\t};\n\n\tPrism.languages.gv = Prism.languages.dot;\n\n}(Prism));\n"],"mappings":"AAAA;;AAEC,WAAUA,KAAK,EAAE;EAEjB,IAAIC,EAAE,GAAG,KAAK,GAAG;EAChB;EACA,sCAAsC,CAACC,MAAM;EAC7C;EACA,2BAA2B,CAACA,MAAM;EAClC;EACA,+BAA+B,CAACA,MAAM;EACtC;EACA,8EAA8E,CAACA,MAAM,CACrF,CAACC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;EAEjB,IAAIC,QAAQ,GAAG;IACd,QAAQ,EAAE;MACTC,OAAO,EAAE,mBAAmB;MAC5BC,UAAU,EAAE,IAAI;MAChBC,KAAK,EAAE,CAAC,iBAAiB,EAAE,eAAe,EAAE,cAAc,CAAC;MAC3DC,MAAM,EAAER,KAAK,CAACS,SAAS,CAACC;IACzB;EACD,CAAC;;EAED;AACD;AACA;AACA;AACA;EACC,SAASC,MAAMA,CAACT,MAAM,EAAEU,KAAK,EAAE;IAC9B,OAAOC,MAAM,CAACX,MAAM,CAACY,OAAO,CAAC,OAAO,EAAE,YAAY;MAAE,OAAOb,EAAE;IAAE,CAAC,CAAC,EAAEW,KAAK,CAAC;EAC1E;EAEAZ,KAAK,CAACS,SAAS,CAACM,GAAG,GAAG;IACrB,SAAS,EAAE;MACVV,OAAO,EAAE,+BAA+B;MACxCW,MAAM,EAAE;IACT,CAAC;IACD,YAAY,EAAE;MACbX,OAAO,EAAEM,MAAM,CAAC,8CAA8C,CAACT,MAAM,EAAE,GAAG,CAAC;MAC3EI,UAAU,EAAE,IAAI;MAChBU,MAAM,EAAE,IAAI;MACZT,KAAK,EAAE,YAAY;MACnBC,MAAM,EAAEJ;IACT,CAAC;IACD,YAAY,EAAE;MACbC,OAAO,EAAEM,MAAM,CAAC,mBAAmB,CAACT,MAAM,CAAC;MAC3CI,UAAU,EAAE,IAAI;MAChBU,MAAM,EAAE,IAAI;MACZR,MAAM,EAAEJ;IACT,CAAC;IACD,WAAW,EAAE;MACZC,OAAO,EAAEM,MAAM,CAAC,oCAAoC,CAACT,MAAM,CAAC;MAC5DI,UAAU,EAAE,IAAI;MAChBU,MAAM,EAAE,IAAI;MACZR,MAAM,EAAEJ;IACT,CAAC;IACD,SAAS,EAAE,kDAAkD;IAC7D,eAAe,EAAE;MAChBC,OAAO,EAAE,sDAAsD;MAC/DC,UAAU,EAAE,IAAI;MAChBC,KAAK,EAAE;IACR,CAAC;IACD,MAAM,EAAE;MACPF,OAAO,EAAEM,MAAM,CAAC,8BAA8B,CAACT,MAAM,CAAC;MACtDI,UAAU,EAAE,IAAI;MAChBU,MAAM,EAAE,IAAI;MACZR,MAAM,EAAEJ;IACT,CAAC;IACD,UAAU,EAAE,YAAY;IACxB,aAAa,EAAE;EAChB,CAAC;EAEDJ,KAAK,CAACS,SAAS,CAACQ,EAAE,GAAGjB,KAAK,CAACS,SAAS,CAACM,GAAG;AAEzC,CAAC,EAACf,KAAK,CAAC"},"metadata":{},"sourceType":"script"}