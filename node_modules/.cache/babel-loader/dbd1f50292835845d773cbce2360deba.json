{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalize = void 0;\nvar defaults = {\n  parser: require(\"../parsers/esprima\"),\n  tabWidth: 4,\n  useTabs: false,\n  reuseWhitespace: true,\n  lineTerminator: require(\"os\").EOL || \"\\n\",\n  wrapColumn: 74,\n  sourceFileName: null,\n  sourceMapName: null,\n  sourceRoot: null,\n  inputSourceMap: null,\n  range: false,\n  tolerant: true,\n  quote: null,\n  trailingComma: false,\n  arrayBracketSpacing: false,\n  objectCurlySpacing: true,\n  arrowParensAlways: false,\n  flowObjectCommas: true,\n  tokens: true\n};\nvar hasOwn = defaults.hasOwnProperty;\n// Copy options and fill in default values.\nfunction normalize(opts) {\n  var options = opts || defaults;\n  function get(key) {\n    return hasOwn.call(options, key) ? options[key] : defaults[key];\n  }\n  return {\n    tabWidth: +get(\"tabWidth\"),\n    useTabs: !!get(\"useTabs\"),\n    reuseWhitespace: !!get(\"reuseWhitespace\"),\n    lineTerminator: get(\"lineTerminator\"),\n    wrapColumn: Math.max(get(\"wrapColumn\"), 0),\n    sourceFileName: get(\"sourceFileName\"),\n    sourceMapName: get(\"sourceMapName\"),\n    sourceRoot: get(\"sourceRoot\"),\n    inputSourceMap: get(\"inputSourceMap\"),\n    parser: get(\"esprima\") || get(\"parser\"),\n    range: get(\"range\"),\n    tolerant: get(\"tolerant\"),\n    quote: get(\"quote\"),\n    trailingComma: get(\"trailingComma\"),\n    arrayBracketSpacing: get(\"arrayBracketSpacing\"),\n    objectCurlySpacing: get(\"objectCurlySpacing\"),\n    arrowParensAlways: get(\"arrowParensAlways\"),\n    flowObjectCommas: get(\"flowObjectCommas\"),\n    tokens: !!get(\"tokens\")\n  };\n}\nexports.normalize = normalize;","map":{"version":3,"names":["Object","defineProperty","exports","value","normalize","defaults","parser","require","tabWidth","useTabs","reuseWhitespace","lineTerminator","EOL","wrapColumn","sourceFileName","sourceMapName","sourceRoot","inputSourceMap","range","tolerant","quote","trailingComma","arrayBracketSpacing","objectCurlySpacing","arrowParensAlways","flowObjectCommas","tokens","hasOwn","hasOwnProperty","opts","options","get","key","call","Math","max"],"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/jscodeshift/node_modules/recast/lib/options.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalize = void 0;\nvar defaults = {\n    parser: require(\"../parsers/esprima\"),\n    tabWidth: 4,\n    useTabs: false,\n    reuseWhitespace: true,\n    lineTerminator: require(\"os\").EOL || \"\\n\",\n    wrapColumn: 74,\n    sourceFileName: null,\n    sourceMapName: null,\n    sourceRoot: null,\n    inputSourceMap: null,\n    range: false,\n    tolerant: true,\n    quote: null,\n    trailingComma: false,\n    arrayBracketSpacing: false,\n    objectCurlySpacing: true,\n    arrowParensAlways: false,\n    flowObjectCommas: true,\n    tokens: true,\n};\nvar hasOwn = defaults.hasOwnProperty;\n// Copy options and fill in default values.\nfunction normalize(opts) {\n    var options = opts || defaults;\n    function get(key) {\n        return hasOwn.call(options, key) ? options[key] : defaults[key];\n    }\n    return {\n        tabWidth: +get(\"tabWidth\"),\n        useTabs: !!get(\"useTabs\"),\n        reuseWhitespace: !!get(\"reuseWhitespace\"),\n        lineTerminator: get(\"lineTerminator\"),\n        wrapColumn: Math.max(get(\"wrapColumn\"), 0),\n        sourceFileName: get(\"sourceFileName\"),\n        sourceMapName: get(\"sourceMapName\"),\n        sourceRoot: get(\"sourceRoot\"),\n        inputSourceMap: get(\"inputSourceMap\"),\n        parser: get(\"esprima\") || get(\"parser\"),\n        range: get(\"range\"),\n        tolerant: get(\"tolerant\"),\n        quote: get(\"quote\"),\n        trailingComma: get(\"trailingComma\"),\n        arrayBracketSpacing: get(\"arrayBracketSpacing\"),\n        objectCurlySpacing: get(\"objectCurlySpacing\"),\n        arrowParensAlways: get(\"arrowParensAlways\"),\n        flowObjectCommas: get(\"flowObjectCommas\"),\n        tokens: !!get(\"tokens\"),\n    };\n}\nexports.normalize = normalize;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,SAAS,GAAG,KAAK,CAAC;AAC1B,IAAIC,QAAQ,GAAG;EACXC,MAAM,EAAEC,OAAO,CAAC,oBAAoB,CAAC;EACrCC,QAAQ,EAAE,CAAC;EACXC,OAAO,EAAE,KAAK;EACdC,eAAe,EAAE,IAAI;EACrBC,cAAc,EAAEJ,OAAO,CAAC,IAAI,CAAC,CAACK,GAAG,IAAI,IAAI;EACzCC,UAAU,EAAE,EAAE;EACdC,cAAc,EAAE,IAAI;EACpBC,aAAa,EAAE,IAAI;EACnBC,UAAU,EAAE,IAAI;EAChBC,cAAc,EAAE,IAAI;EACpBC,KAAK,EAAE,KAAK;EACZC,QAAQ,EAAE,IAAI;EACdC,KAAK,EAAE,IAAI;EACXC,aAAa,EAAE,KAAK;EACpBC,mBAAmB,EAAE,KAAK;EAC1BC,kBAAkB,EAAE,IAAI;EACxBC,iBAAiB,EAAE,KAAK;EACxBC,gBAAgB,EAAE,IAAI;EACtBC,MAAM,EAAE;AACZ,CAAC;AACD,IAAIC,MAAM,GAAGtB,QAAQ,CAACuB,cAAc;AACpC;AACA,SAASxB,SAASA,CAACyB,IAAI,EAAE;EACrB,IAAIC,OAAO,GAAGD,IAAI,IAAIxB,QAAQ;EAC9B,SAAS0B,GAAGA,CAACC,GAAG,EAAE;IACd,OAAOL,MAAM,CAACM,IAAI,CAACH,OAAO,EAAEE,GAAG,CAAC,GAAGF,OAAO,CAACE,GAAG,CAAC,GAAG3B,QAAQ,CAAC2B,GAAG,CAAC;EACnE;EACA,OAAO;IACHxB,QAAQ,EAAE,CAACuB,GAAG,CAAC,UAAU,CAAC;IAC1BtB,OAAO,EAAE,CAAC,CAACsB,GAAG,CAAC,SAAS,CAAC;IACzBrB,eAAe,EAAE,CAAC,CAACqB,GAAG,CAAC,iBAAiB,CAAC;IACzCpB,cAAc,EAAEoB,GAAG,CAAC,gBAAgB,CAAC;IACrClB,UAAU,EAAEqB,IAAI,CAACC,GAAG,CAACJ,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;IAC1CjB,cAAc,EAAEiB,GAAG,CAAC,gBAAgB,CAAC;IACrChB,aAAa,EAAEgB,GAAG,CAAC,eAAe,CAAC;IACnCf,UAAU,EAAEe,GAAG,CAAC,YAAY,CAAC;IAC7Bd,cAAc,EAAEc,GAAG,CAAC,gBAAgB,CAAC;IACrCzB,MAAM,EAAEyB,GAAG,CAAC,SAAS,CAAC,IAAIA,GAAG,CAAC,QAAQ,CAAC;IACvCb,KAAK,EAAEa,GAAG,CAAC,OAAO,CAAC;IACnBZ,QAAQ,EAAEY,GAAG,CAAC,UAAU,CAAC;IACzBX,KAAK,EAAEW,GAAG,CAAC,OAAO,CAAC;IACnBV,aAAa,EAAEU,GAAG,CAAC,eAAe,CAAC;IACnCT,mBAAmB,EAAES,GAAG,CAAC,qBAAqB,CAAC;IAC/CR,kBAAkB,EAAEQ,GAAG,CAAC,oBAAoB,CAAC;IAC7CP,iBAAiB,EAAEO,GAAG,CAAC,mBAAmB,CAAC;IAC3CN,gBAAgB,EAAEM,GAAG,CAAC,kBAAkB,CAAC;IACzCL,MAAM,EAAE,CAAC,CAACK,GAAG,CAAC,QAAQ;EAC1B,CAAC;AACL;AACA7B,OAAO,CAACE,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script"}