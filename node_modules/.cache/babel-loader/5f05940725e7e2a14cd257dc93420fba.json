{"ast":null,"code":"!function (r) {\n  r.languages.pure = {\n    comment: [{\n      pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n      lookbehind: !0\n    }, {\n      pattern: /(^|[^\\\\:])\\/\\/.*/,\n      lookbehind: !0\n    }, /#!.+/],\n    \"inline-lang\": {\n      pattern: /%<[\\s\\S]+?%>/,\n      greedy: !0,\n      inside: {\n        lang: {\n          pattern: /(^%< *)-\\*-.+?-\\*-/,\n          lookbehind: !0,\n          alias: \"comment\"\n        },\n        delimiter: {\n          pattern: /^%<.*|%>$/,\n          alias: \"punctuation\"\n        }\n      }\n    },\n    string: {\n      pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n      greedy: !0\n    },\n    number: {\n      pattern: /((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?L?)/i,\n      lookbehind: !0\n    },\n    keyword: /\\b(?:ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|NULL|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,\n    function: /\\b(?:abs|add_(?:(?:fundef|interface|macdef|typedef)(?:_at)?|addr|constdef|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_(?:matrix|pointer)|byte_c?string(?:_pointer)?|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|short|sentry|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,\n    special: {\n      pattern: /\\b__[a-z]+__\\b/i,\n      alias: \"builtin\"\n    },\n    operator: /(?:[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]|\\b_+\\b)+|\\b(?:and|div|mod|not|or)\\b/,\n    punctuation: /[(){}\\[\\];,|]/\n  };\n  [\"c\", {\n    lang: \"c++\",\n    alias: \"cpp\"\n  }, \"fortran\"].forEach(function (e) {\n    var t = e;\n    if (\"string\" != typeof e && (t = e.alias, e = e.lang), r.languages[t]) {\n      var a = {};\n      a[\"inline-lang-\" + t] = {\n        pattern: RegExp(\"%< *-\\\\*- *<lang>\\\\d* *-\\\\*-[^]+?%>\".replace(\"<lang>\", e.replace(/([.+*?\\/\\\\(){}\\[\\]])/g, \"\\\\$1\")), \"i\"),\n        inside: r.util.clone(r.languages.pure[\"inline-lang\"].inside)\n      }, a[\"inline-lang-\" + t].inside.rest = r.util.clone(r.languages[t]), r.languages.insertBefore(\"pure\", \"inline-lang\", a);\n    }\n  }), r.languages.c && (r.languages.pure[\"inline-lang\"].inside.rest = r.util.clone(r.languages.c));\n}(Prism);","map":{"version":3,"names":["r","languages","pure","comment","pattern","lookbehind","greedy","inside","lang","alias","delimiter","string","number","keyword","function","special","operator","punctuation","forEach","e","t","a","RegExp","replace","util","clone","rest","insertBefore","c","Prism"],"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-pure.min.js"],"sourcesContent":["!function(r){r.languages.pure={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0},/#!.+/],\"inline-lang\":{pattern:/%<[\\s\\S]+?%>/,greedy:!0,inside:{lang:{pattern:/(^%< *)-\\*-.+?-\\*-/,lookbehind:!0,alias:\"comment\"},delimiter:{pattern:/^%<.*|%>$/,alias:\"punctuation\"}}},string:{pattern:/\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,greedy:!0},number:{pattern:/((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?L?)/i,lookbehind:!0},keyword:/\\b(?:ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|NULL|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,function:/\\b(?:abs|add_(?:(?:fundef|interface|macdef|typedef)(?:_at)?|addr|constdef|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_(?:matrix|pointer)|byte_c?string(?:_pointer)?|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|short|sentry|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,special:{pattern:/\\b__[a-z]+__\\b/i,alias:\"builtin\"},operator:/(?:[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]|\\b_+\\b)+|\\b(?:and|div|mod|not|or)\\b/,punctuation:/[(){}\\[\\];,|]/};[\"c\",{lang:\"c++\",alias:\"cpp\"},\"fortran\"].forEach(function(e){var t=e;if(\"string\"!=typeof e&&(t=e.alias,e=e.lang),r.languages[t]){var a={};a[\"inline-lang-\"+t]={pattern:RegExp(\"%< *-\\\\*- *<lang>\\\\d* *-\\\\*-[^]+?%>\".replace(\"<lang>\",e.replace(/([.+*?\\/\\\\(){}\\[\\]])/g,\"\\\\$1\")),\"i\"),inside:r.util.clone(r.languages.pure[\"inline-lang\"].inside)},a[\"inline-lang-\"+t].inside.rest=r.util.clone(r.languages[t]),r.languages.insertBefore(\"pure\",\"inline-lang\",a)}}),r.languages.c&&(r.languages.pure[\"inline-lang\"].inside.rest=r.util.clone(r.languages.c))}(Prism);"],"mappings":"AAAA,CAAC,UAASA,CAAC,EAAC;EAACA,CAAC,CAACC,SAAS,CAACC,IAAI,GAAC;IAACC,OAAO,EAAC,CAAC;MAACC,OAAO,EAAC,2BAA2B;MAACC,UAAU,EAAC,CAAC;IAAC,CAAC,EAAC;MAACD,OAAO,EAAC,kBAAkB;MAACC,UAAU,EAAC,CAAC;IAAC,CAAC,EAAC,MAAM,CAAC;IAAC,aAAa,EAAC;MAACD,OAAO,EAAC,cAAc;MAACE,MAAM,EAAC,CAAC,CAAC;MAACC,MAAM,EAAC;QAACC,IAAI,EAAC;UAACJ,OAAO,EAAC,oBAAoB;UAACC,UAAU,EAAC,CAAC,CAAC;UAACI,KAAK,EAAC;QAAS,CAAC;QAACC,SAAS,EAAC;UAACN,OAAO,EAAC,WAAW;UAACK,KAAK,EAAC;QAAa;MAAC;IAAC,CAAC;IAACE,MAAM,EAAC;MAACP,OAAO,EAAC,uBAAuB;MAACE,MAAM,EAAC,CAAC;IAAC,CAAC;IAACM,MAAM,EAAC;MAACR,OAAO,EAAC,iGAAiG;MAACC,UAAU,EAAC,CAAC;IAAC,CAAC;IAACQ,OAAO,EAAC,ySAAyS;IAACC,QAAQ,EAAC,y0DAAy0D;IAACC,OAAO,EAAC;MAACX,OAAO,EAAC,iBAAiB;MAACK,KAAK,EAAC;IAAS,CAAC;IAACO,QAAQ,EAAC,6GAA6G;IAACC,WAAW,EAAC;EAAe,CAAC;EAAC,CAAC,GAAG,EAAC;IAACT,IAAI,EAAC,KAAK;IAACC,KAAK,EAAC;EAAK,CAAC,EAAC,SAAS,CAAC,CAACS,OAAO,CAAC,UAASC,CAAC,EAAC;IAAC,IAAIC,CAAC,GAACD,CAAC;IAAC,IAAG,QAAQ,IAAE,OAAOA,CAAC,KAAGC,CAAC,GAACD,CAAC,CAACV,KAAK,EAACU,CAAC,GAACA,CAAC,CAACX,IAAI,CAAC,EAACR,CAAC,CAACC,SAAS,CAACmB,CAAC,CAAC,EAAC;MAAC,IAAIC,CAAC,GAAC,CAAC,CAAC;MAACA,CAAC,CAAC,cAAc,GAACD,CAAC,CAAC,GAAC;QAAChB,OAAO,EAACkB,MAAM,CAAC,qCAAqC,CAACC,OAAO,CAAC,QAAQ,EAACJ,CAAC,CAACI,OAAO,CAAC,uBAAuB,EAAC,MAAM,CAAC,CAAC,EAAC,GAAG,CAAC;QAAChB,MAAM,EAACP,CAAC,CAACwB,IAAI,CAACC,KAAK,CAACzB,CAAC,CAACC,SAAS,CAACC,IAAI,CAAC,aAAa,CAAC,CAACK,MAAM;MAAC,CAAC,EAACc,CAAC,CAAC,cAAc,GAACD,CAAC,CAAC,CAACb,MAAM,CAACmB,IAAI,GAAC1B,CAAC,CAACwB,IAAI,CAACC,KAAK,CAACzB,CAAC,CAACC,SAAS,CAACmB,CAAC,CAAC,CAAC,EAACpB,CAAC,CAACC,SAAS,CAAC0B,YAAY,CAAC,MAAM,EAAC,aAAa,EAACN,CAAC,CAAC;IAAA;EAAC,CAAC,CAAC,EAACrB,CAAC,CAACC,SAAS,CAAC2B,CAAC,KAAG5B,CAAC,CAACC,SAAS,CAACC,IAAI,CAAC,aAAa,CAAC,CAACK,MAAM,CAACmB,IAAI,GAAC1B,CAAC,CAACwB,IAAI,CAACC,KAAK,CAACzB,CAAC,CAACC,SAAS,CAAC2B,CAAC,CAAC,CAAC;AAAA,CAAC,CAACC,KAAK,CAAC"},"metadata":{},"sourceType":"script"}