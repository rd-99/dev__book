{"ast":null,"code":"(function (Prism) {\n  var comment = {\n    pattern: /(^[ \\t]*| {2}|\\t)#.*/m,\n    lookbehind: true,\n    greedy: true\n  };\n  var variable = {\n    pattern: /((?:^|[^\\\\])(?:\\\\{2})*)[$@&%]\\{(?:[^{}\\r\\n]|\\{[^{}\\r\\n]*\\})*\\}/,\n    lookbehind: true,\n    inside: {\n      'punctuation': /^[$@&%]\\{|\\}$/\n    }\n  };\n  function createSection(name, inside) {\n    var extendecInside = {};\n    extendecInside['section-header'] = {\n      pattern: /^ ?\\*{3}.+?\\*{3}/,\n      alias: 'keyword'\n    };\n\n    // copy inside tokens\n    for (var token in inside) {\n      extendecInside[token] = inside[token];\n    }\n    extendecInside['tag'] = {\n      pattern: /([\\r\\n](?: {2}|\\t)[ \\t]*)\\[[-\\w]+\\]/,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\[|\\]/\n      }\n    };\n    extendecInside['variable'] = variable;\n    extendecInside['comment'] = comment;\n    return {\n      pattern: RegExp(/^ ?\\*{3}[ \\t]*<name>[ \\t]*\\*{3}(?:.|[\\r\\n](?!\\*{3}))*/.source.replace(/<name>/g, function () {\n        return name;\n      }), 'im'),\n      alias: 'section',\n      inside: extendecInside\n    };\n  }\n  var docTag = {\n    pattern: /(\\[Documentation\\](?: {2}|\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,\n    lookbehind: true,\n    alias: 'string'\n  };\n  var testNameLike = {\n    pattern: /([\\r\\n] ?)(?!#)(?:\\S(?:[ \\t]\\S)*)+/,\n    lookbehind: true,\n    alias: 'function',\n    inside: {\n      'variable': variable\n    }\n  };\n  var testPropertyLike = {\n    pattern: /([\\r\\n](?: {2}|\\t)[ \\t]*)(?!\\[|\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,\n    lookbehind: true,\n    inside: {\n      'variable': variable\n    }\n  };\n  Prism.languages['robotframework'] = {\n    'settings': createSection('Settings', {\n      'documentation': {\n        pattern: /([\\r\\n] ?Documentation(?: {2}|\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,\n        lookbehind: true,\n        alias: 'string'\n      },\n      'property': {\n        pattern: /([\\r\\n] ?)(?!\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,\n        lookbehind: true\n      }\n    }),\n    'variables': createSection('Variables'),\n    'test-cases': createSection('Test Cases', {\n      'test-name': testNameLike,\n      'documentation': docTag,\n      'property': testPropertyLike\n    }),\n    'keywords': createSection('Keywords', {\n      'keyword-name': testNameLike,\n      'documentation': docTag,\n      'property': testPropertyLike\n    }),\n    'tasks': createSection('Tasks', {\n      'task-name': testNameLike,\n      'documentation': docTag,\n      'property': testPropertyLike\n    }),\n    'comment': comment\n  };\n  Prism.languages.robot = Prism.languages['robotframework'];\n})(Prism);","map":{"version":3,"names":["Prism","comment","pattern","lookbehind","greedy","variable","inside","createSection","name","extendecInside","alias","token","RegExp","source","replace","docTag","testNameLike","testPropertyLike","languages","robot"],"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-robotframework.js"],"sourcesContent":["(function (Prism) {\n\n\tvar comment = {\n\t\tpattern: /(^[ \\t]*| {2}|\\t)#.*/m,\n\t\tlookbehind: true,\n\t\tgreedy: true\n\t};\n\n\tvar variable = {\n\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)[$@&%]\\{(?:[^{}\\r\\n]|\\{[^{}\\r\\n]*\\})*\\}/,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'punctuation': /^[$@&%]\\{|\\}$/\n\t\t}\n\t};\n\n\tfunction createSection(name, inside) {\n\t\tvar extendecInside = {};\n\n\t\textendecInside['section-header'] = {\n\t\t\tpattern: /^ ?\\*{3}.+?\\*{3}/,\n\t\t\talias: 'keyword'\n\t\t};\n\n\t\t// copy inside tokens\n\t\tfor (var token in inside) {\n\t\t\textendecInside[token] = inside[token];\n\t\t}\n\n\t\textendecInside['tag'] = {\n\t\t\tpattern: /([\\r\\n](?: {2}|\\t)[ \\t]*)\\[[-\\w]+\\]/,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /\\[|\\]/\n\t\t\t}\n\t\t};\n\t\textendecInside['variable'] = variable;\n\t\textendecInside['comment'] = comment;\n\n\t\treturn {\n\t\t\tpattern: RegExp(/^ ?\\*{3}[ \\t]*<name>[ \\t]*\\*{3}(?:.|[\\r\\n](?!\\*{3}))*/.source.replace(/<name>/g, function () { return name; }), 'im'),\n\t\t\talias: 'section',\n\t\t\tinside: extendecInside\n\t\t};\n\t}\n\n\n\tvar docTag = {\n\t\tpattern: /(\\[Documentation\\](?: {2}|\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,\n\t\tlookbehind: true,\n\t\talias: 'string'\n\t};\n\n\tvar testNameLike = {\n\t\tpattern: /([\\r\\n] ?)(?!#)(?:\\S(?:[ \\t]\\S)*)+/,\n\t\tlookbehind: true,\n\t\talias: 'function',\n\t\tinside: {\n\t\t\t'variable': variable\n\t\t}\n\t};\n\n\tvar testPropertyLike = {\n\t\tpattern: /([\\r\\n](?: {2}|\\t)[ \\t]*)(?!\\[|\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'variable': variable\n\t\t}\n\t};\n\n\tPrism.languages['robotframework'] = {\n\t\t'settings': createSection('Settings', {\n\t\t\t'documentation': {\n\t\t\t\tpattern: /([\\r\\n] ?Documentation(?: {2}|\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'string'\n\t\t\t},\n\t\t\t'property': {\n\t\t\t\tpattern: /([\\r\\n] ?)(?!\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t}),\n\t\t'variables': createSection('Variables'),\n\t\t'test-cases': createSection('Test Cases', {\n\t\t\t'test-name': testNameLike,\n\t\t\t'documentation': docTag,\n\t\t\t'property': testPropertyLike\n\t\t}),\n\t\t'keywords': createSection('Keywords', {\n\t\t\t'keyword-name': testNameLike,\n\t\t\t'documentation': docTag,\n\t\t\t'property': testPropertyLike\n\t\t}),\n\t\t'tasks': createSection('Tasks', {\n\t\t\t'task-name': testNameLike,\n\t\t\t'documentation': docTag,\n\t\t\t'property': testPropertyLike\n\t\t}),\n\t\t'comment': comment\n\t};\n\n\tPrism.languages.robot = Prism.languages['robotframework'];\n\n}(Prism));\n"],"mappings":"AAAC,WAAUA,KAAK,EAAE;EAEjB,IAAIC,OAAO,GAAG;IACbC,OAAO,EAAE,uBAAuB;IAChCC,UAAU,EAAE,IAAI;IAChBC,MAAM,EAAE;EACT,CAAC;EAED,IAAIC,QAAQ,GAAG;IACdH,OAAO,EAAE,gEAAgE;IACzEC,UAAU,EAAE,IAAI;IAChBG,MAAM,EAAE;MACP,aAAa,EAAE;IAChB;EACD,CAAC;EAED,SAASC,aAAaA,CAACC,IAAI,EAAEF,MAAM,EAAE;IACpC,IAAIG,cAAc,GAAG,CAAC,CAAC;IAEvBA,cAAc,CAAC,gBAAgB,CAAC,GAAG;MAClCP,OAAO,EAAE,kBAAkB;MAC3BQ,KAAK,EAAE;IACR,CAAC;;IAED;IACA,KAAK,IAAIC,KAAK,IAAIL,MAAM,EAAE;MACzBG,cAAc,CAACE,KAAK,CAAC,GAAGL,MAAM,CAACK,KAAK,CAAC;IACtC;IAEAF,cAAc,CAAC,KAAK,CAAC,GAAG;MACvBP,OAAO,EAAE,qCAAqC;MAC9CC,UAAU,EAAE,IAAI;MAChBG,MAAM,EAAE;QACP,aAAa,EAAE;MAChB;IACD,CAAC;IACDG,cAAc,CAAC,UAAU,CAAC,GAAGJ,QAAQ;IACrCI,cAAc,CAAC,SAAS,CAAC,GAAGR,OAAO;IAEnC,OAAO;MACNC,OAAO,EAAEU,MAAM,CAAC,uDAAuD,CAACC,MAAM,CAACC,OAAO,CAAC,SAAS,EAAE,YAAY;QAAE,OAAON,IAAI;MAAE,CAAC,CAAC,EAAE,IAAI,CAAC;MACtIE,KAAK,EAAE,SAAS;MAChBJ,MAAM,EAAEG;IACT,CAAC;EACF;EAGA,IAAIM,MAAM,GAAG;IACZb,OAAO,EAAE,+EAA+E;IACxFC,UAAU,EAAE,IAAI;IAChBO,KAAK,EAAE;EACR,CAAC;EAED,IAAIM,YAAY,GAAG;IAClBd,OAAO,EAAE,oCAAoC;IAC7CC,UAAU,EAAE,IAAI;IAChBO,KAAK,EAAE,UAAU;IACjBJ,MAAM,EAAE;MACP,UAAU,EAAED;IACb;EACD,CAAC;EAED,IAAIY,gBAAgB,GAAG;IACtBf,OAAO,EAAE,4DAA4D;IACrEC,UAAU,EAAE,IAAI;IAChBG,MAAM,EAAE;MACP,UAAU,EAAED;IACb;EACD,CAAC;EAEDL,KAAK,CAACkB,SAAS,CAAC,gBAAgB,CAAC,GAAG;IACnC,UAAU,EAAEX,aAAa,CAAC,UAAU,EAAE;MACrC,eAAe,EAAE;QAChBL,OAAO,EAAE,mFAAmF;QAC5FC,UAAU,EAAE,IAAI;QAChBO,KAAK,EAAE;MACR,CAAC;MACD,UAAU,EAAE;QACXR,OAAO,EAAE,0CAA0C;QACnDC,UAAU,EAAE;MACb;IACD,CAAC,CAAC;IACF,WAAW,EAAEI,aAAa,CAAC,WAAW,CAAC;IACvC,YAAY,EAAEA,aAAa,CAAC,YAAY,EAAE;MACzC,WAAW,EAAES,YAAY;MACzB,eAAe,EAAED,MAAM;MACvB,UAAU,EAAEE;IACb,CAAC,CAAC;IACF,UAAU,EAAEV,aAAa,CAAC,UAAU,EAAE;MACrC,cAAc,EAAES,YAAY;MAC5B,eAAe,EAAED,MAAM;MACvB,UAAU,EAAEE;IACb,CAAC,CAAC;IACF,OAAO,EAAEV,aAAa,CAAC,OAAO,EAAE;MAC/B,WAAW,EAAES,YAAY;MACzB,eAAe,EAAED,MAAM;MACvB,UAAU,EAAEE;IACb,CAAC,CAAC;IACF,SAAS,EAAEhB;EACZ,CAAC;EAEDD,KAAK,CAACkB,SAAS,CAACC,KAAK,GAAGnB,KAAK,CAACkB,SAAS,CAAC,gBAAgB,CAAC;AAE1D,CAAC,EAAClB,KAAK,CAAC"},"metadata":{},"sourceType":"script"}