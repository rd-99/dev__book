{"ast":null,"code":"// https://mc-stan.org/docs/2_24/reference-manual/bnf-grammars.html\n\nPrism.languages.stan = {\n  'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|#(?!include).*/,\n  'string': {\n    // String literals can contain spaces and any printable ASCII characters except for \" and \\\n    // https://mc-stan.org/docs/2_24/reference-manual/print-statements-section.html#string-literals\n    pattern: /\"[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]*\"/,\n    greedy: true\n  },\n  'directive': {\n    pattern: /^([ \\t]*)#include\\b.*/m,\n    lookbehind: true,\n    alias: 'property'\n  },\n  'function-arg': {\n    pattern: /(\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\s*\\(\\s*)[a-zA-Z]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'constraint': {\n    pattern: /(\\b(?:int|matrix|real|row_vector|vector)\\s*)<[^<>]*>/,\n    lookbehind: true,\n    inside: {\n      'expression': {\n        pattern: /(=\\s*)\\S(?:\\S|\\s+(?!\\s))*?(?=\\s*(?:>$|,\\s*\\w+\\s*=))/,\n        lookbehind: true,\n        inside: null // see below\n      },\n\n      'property': /\\b[a-z]\\w*(?=\\s*=)/i,\n      'operator': /=/,\n      'punctuation': /^<|>$|,/\n    }\n  },\n  'keyword': [/\\b(?:break|cholesky_factor_corr|cholesky_factor_cov|continue|corr_matrix|cov_matrix|data|else|for|functions|generated|if|in|increment_log_prob|int|matrix|model|ordered|parameters|positive_ordered|print|quantities|real|reject|return|row_vector|simplex|target|transformed|unit_vector|vector|void|while)\\b/,\n  // these are functions that are known to take another function as their first argument.\n  /\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\b/],\n  'function': /\\b[a-z]\\w*(?=\\s*\\()/i,\n  'number': /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:false|true)\\b/,\n  'operator': /<-|\\.[*/]=?|\\|\\|?|&&|[!=<>+\\-*/]=?|['^%~?:]/,\n  'punctuation': /[()\\[\\]{},;]/\n};\nPrism.languages.stan.constraint.inside.expression.inside = Prism.languages.stan;","map":{"version":3,"names":["Prism","languages","stan","pattern","greedy","lookbehind","alias","inside","constraint","expression"],"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-stan.js"],"sourcesContent":["// https://mc-stan.org/docs/2_24/reference-manual/bnf-grammars.html\n\nPrism.languages.stan = {\n\t'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|#(?!include).*/,\n\t'string': {\n\t\t// String literals can contain spaces and any printable ASCII characters except for \" and \\\n\t\t// https://mc-stan.org/docs/2_24/reference-manual/print-statements-section.html#string-literals\n\t\tpattern: /\"[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]*\"/,\n\t\tgreedy: true\n\t},\n\t'directive': {\n\t\tpattern: /^([ \\t]*)#include\\b.*/m,\n\t\tlookbehind: true,\n\t\talias: 'property'\n\t},\n\n\t'function-arg': {\n\t\tpattern: /(\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\s*\\(\\s*)[a-zA-Z]\\w*/,\n\t\tlookbehind: true,\n\t\talias: 'function'\n\t},\n\t'constraint': {\n\t\tpattern: /(\\b(?:int|matrix|real|row_vector|vector)\\s*)<[^<>]*>/,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'expression': {\n\t\t\t\tpattern: /(=\\s*)\\S(?:\\S|\\s+(?!\\s))*?(?=\\s*(?:>$|,\\s*\\w+\\s*=))/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: null // see below\n\t\t\t},\n\t\t\t'property': /\\b[a-z]\\w*(?=\\s*=)/i,\n\t\t\t'operator': /=/,\n\t\t\t'punctuation': /^<|>$|,/\n\t\t}\n\t},\n\t'keyword': [\n\t\t/\\b(?:break|cholesky_factor_corr|cholesky_factor_cov|continue|corr_matrix|cov_matrix|data|else|for|functions|generated|if|in|increment_log_prob|int|matrix|model|ordered|parameters|positive_ordered|print|quantities|real|reject|return|row_vector|simplex|target|transformed|unit_vector|vector|void|while)\\b/,\n\t\t// these are functions that are known to take another function as their first argument.\n\t\t/\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\b/\n\t],\n\t'function': /\\b[a-z]\\w*(?=\\s*\\()/i,\n\t'number': /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?\\b/i,\n\t'boolean': /\\b(?:false|true)\\b/,\n\n\t'operator': /<-|\\.[*/]=?|\\|\\|?|&&|[!=<>+\\-*/]=?|['^%~?:]/,\n\t'punctuation': /[()\\[\\]{},;]/\n};\n\nPrism.languages.stan.constraint.inside.expression.inside = Prism.languages.stan;\n"],"mappings":"AAAA;;AAEAA,KAAK,CAACC,SAAS,CAACC,IAAI,GAAG;EACtB,SAAS,EAAE,wCAAwC;EACnD,QAAQ,EAAE;IACT;IACA;IACAC,OAAO,EAAE,iCAAiC;IAC1CC,MAAM,EAAE;EACT,CAAC;EACD,WAAW,EAAE;IACZD,OAAO,EAAE,wBAAwB;IACjCE,UAAU,EAAE,IAAI;IAChBC,KAAK,EAAE;EACR,CAAC;EAED,cAAc,EAAE;IACfH,OAAO,EAAE,oHAAoH;IAC7HE,UAAU,EAAE,IAAI;IAChBC,KAAK,EAAE;EACR,CAAC;EACD,YAAY,EAAE;IACbH,OAAO,EAAE,sDAAsD;IAC/DE,UAAU,EAAE,IAAI;IAChBE,MAAM,EAAE;MACP,YAAY,EAAE;QACbJ,OAAO,EAAE,qDAAqD;QAC9DE,UAAU,EAAE,IAAI;QAChBE,MAAM,EAAE,IAAI,CAAC;MACd,CAAC;;MACD,UAAU,EAAE,qBAAqB;MACjC,UAAU,EAAE,GAAG;MACf,aAAa,EAAE;IAChB;EACD,CAAC;EACD,SAAS,EAAE,CACV,gTAAgT;EAChT;EACA,iGAAiG,CACjG;EACD,UAAU,EAAE,sBAAsB;EAClC,QAAQ,EAAE,8CAA8C;EACxD,SAAS,EAAE,oBAAoB;EAE/B,UAAU,EAAE,6CAA6C;EACzD,aAAa,EAAE;AAChB,CAAC;AAEDP,KAAK,CAACC,SAAS,CAACC,IAAI,CAACM,UAAU,CAACD,MAAM,CAACE,UAAU,CAACF,MAAM,GAAGP,KAAK,CAACC,SAAS,CAACC,IAAI"},"metadata":{},"sourceType":"script"}