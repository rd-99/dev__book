{"ast":null,"code":"'use strict';\n\nvar _assertThisInitialized = require(\"C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _toConsumableArray = require(\"C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _get = require(\"C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _taggedTemplateLiteral = require(\"C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _slicedToArray = require(\"C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createClass = require(\"C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nvar Position = /*#__PURE__*/_createClass(function Position(line, col, index) {\n  _classCallCheck(this, Position);\n  this.line = void 0;\n  this.column = void 0;\n  this.index = void 0;\n  this.line = line;\n  this.column = col;\n  this.index = index;\n});\nvar SourceLocation = /*#__PURE__*/_createClass(function SourceLocation(start, end) {\n  _classCallCheck(this, SourceLocation);\n  this.start = void 0;\n  this.end = void 0;\n  this.filename = void 0;\n  this.identifierName = void 0;\n  this.start = start;\n  this.end = end;\n});\nfunction createPositionWithColumnOffset(position, columnOffset) {\n  var line = position.line,\n    column = position.column,\n    index = position.index;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\nvar ParseErrorCode = {\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n};\nvar reflect = function reflect(keys) {\n  var last = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : keys.length - 1;\n  return {\n    get: function get() {\n      return keys.reduce(function (object, key) {\n        return object[key];\n      }, this);\n    },\n    set: function set(value) {\n      keys.reduce(function (item, key, i) {\n        return i === last ? item[key] = value : item[key];\n      }, this);\n    }\n  };\n};\nvar instantiate = function instantiate(constructor, properties, descriptors) {\n  return Object.keys(descriptors).map(function (key) {\n    return [key, descriptors[key]];\n  }).filter(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      descriptor = _ref4[1];\n    return !!descriptor;\n  }).map(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n      key = _ref6[0],\n      descriptor = _ref6[1];\n    return [key, typeof descriptor === \"function\" ? {\n      value: descriptor,\n      enumerable: false\n    } : typeof descriptor.reflect === \"string\" ? Object.assign({}, descriptor, reflect(descriptor.reflect.split(\".\"))) : descriptor];\n  }).reduce(function (instance, _ref7) {\n    var _ref8 = _slicedToArray(_ref7, 2),\n      key = _ref8[0],\n      descriptor = _ref8[1];\n    return Object.defineProperty(instance, key, Object.assign({\n      configurable: true\n    }, descriptor));\n  }, Object.assign(new constructor(), properties));\n};\nvar ModuleErrors = {\n  ImportMetaOutsideModule: {\n    message: \"import.meta may appear only with 'sourceType: \\\"module\\\"'\",\n    code: ParseErrorCode.SourceTypeModuleError\n  },\n  ImportOutsideModule: {\n    message: \"'import' and 'export' may appear only with 'sourceType: \\\"module\\\"'\",\n    code: ParseErrorCode.SourceTypeModuleError\n  }\n};\nvar NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\"\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\"\n};\nvar toNodeDescription = function toNodeDescription(_ref9) {\n  var type = _ref9.type,\n    prefix = _ref9.prefix;\n  return type === \"UpdateExpression\" ? NodeDescriptions.UpdateExpression[String(prefix)] : NodeDescriptions[type];\n};\nvar StandardErrors = {\n  AccessorIsGenerator: function AccessorIsGenerator(_ref10) {\n    var kind = _ref10.kind;\n    return \"A \".concat(kind, \"ter cannot be a generator.\");\n  },\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitUsingNotInAsyncContext: \"'await using' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: function DeclarationMissingInitializer(_ref11) {\n    var kind = _ref11.kind;\n    return \"Missing initializer in \".concat(kind, \" declaration.\");\n  },\n  DecoratorArgumentsOutsideParentheses: \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport: \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: function DuplicateExport(_ref12) {\n    var exportName = _ref12.exportName;\n    return \"`\".concat(exportName, \"` has already been exported. Exported identifiers must be unique.\");\n  },\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: function ExportBindingIsString(_ref13) {\n    var localName = _ref13.localName,\n      exportName = _ref13.exportName;\n    return \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '\".concat(localName, \"' as '\").concat(exportName, \"' } from 'some-module'`?\");\n  },\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: function ForInOfLoopInitializer(_ref14) {\n    var type = _ref14.type;\n    return \"'\".concat(type === \"ForInStatement\" ? \"for-in\" : \"for-of\", \"' loop variable declaration may not have an initializer.\");\n  },\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: function IllegalBreakContinue(_ref15) {\n    var type = _ref15.type;\n    return \"Unsyntactic \".concat(type === \"BreakStatement\" ? \"break\" : \"continue\", \".\");\n  },\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportAttributesUseAssert: \"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedAssertSyntax: true` option in the import attributes plugin to suppress this error.\",\n  ImportBindingIsString: function ImportBindingIsString(_ref16) {\n    var importName = _ref16.importName;\n    return \"A string literal cannot be used as an imported binding.\\n- Did you mean `import { \\\"\".concat(importName, \"\\\" as foo }`?\");\n  },\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: function ImportCallArity(_ref17) {\n    var maxArgumentCount = _ref17.maxArgumentCount;\n    return \"`import()` requires exactly \".concat(maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\", \".\");\n  },\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault: \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding: 'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags: \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: function InvalidDigit(_ref18) {\n    var radix = _ref18.radix;\n    return \"Expected number in radix \".concat(radix, \".\");\n  },\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: function InvalidEscapedReservedWord(_ref19) {\n    var reservedWord = _ref19.reservedWord;\n    return \"Escape sequence in keyword \".concat(reservedWord, \".\");\n  },\n  InvalidIdentifier: function InvalidIdentifier(_ref20) {\n    var identifierName = _ref20.identifierName;\n    return \"Invalid identifier \".concat(identifierName, \".\");\n  },\n  InvalidLhs: function InvalidLhs(_ref21) {\n    var ancestor = _ref21.ancestor;\n    return \"Invalid left-hand side in \".concat(toNodeDescription(ancestor), \".\");\n  },\n  InvalidLhsBinding: function InvalidLhsBinding(_ref22) {\n    var ancestor = _ref22.ancestor;\n    return \"Binding invalid left-hand side in \".concat(toNodeDescription(ancestor), \".\");\n  },\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: function InvalidOrUnexpectedToken(_ref23) {\n    var unexpected = _ref23.unexpected;\n    return \"Unexpected character '\".concat(unexpected, \"'.\");\n  },\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: function InvalidPrivateFieldResolution(_ref24) {\n    var identifierName = _ref24.identifierName;\n    return \"Private name #\".concat(identifierName, \" is not defined.\");\n  },\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: function LabelRedeclaration(_ref25) {\n    var labelName = _ref25.labelName;\n    return \"Label '\".concat(labelName, \"' is already declared.\");\n  },\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: function MissingPlugin(_ref26) {\n    var missingPlugin = _ref26.missingPlugin;\n    return \"This experimental syntax requires enabling the parser plugin: \".concat(missingPlugin.map(function (name) {\n      return JSON.stringify(name);\n    }).join(\", \"), \".\");\n  },\n  MissingOneOfPlugins: function MissingOneOfPlugins(_ref27) {\n    var missingPlugin = _ref27.missingPlugin;\n    return \"This experimental syntax requires enabling one of the following parser plugin(s): \".concat(missingPlugin.map(function (name) {\n      return JSON.stringify(name);\n    }).join(\", \"), \".\");\n  },\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: function ModuleAttributesWithDuplicateKeys(_ref28) {\n    var key = _ref28.key;\n    return \"Duplicate key \\\"\".concat(key, \"\\\" is not allowed in module attributes.\");\n  },\n  ModuleExportNameHasLoneSurrogate: function ModuleExportNameHasLoneSurrogate(_ref29) {\n    var surrogateCharCode = _ref29.surrogateCharCode;\n    return \"An export name cannot include a lone surrogate, found '\\\\u\".concat(surrogateCharCode.toString(16), \"'.\");\n  },\n  ModuleExportUndefined: function ModuleExportUndefined(_ref30) {\n    var localName = _ref30.localName;\n    return \"Export '\".concat(localName, \"' is not defined.\");\n  },\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: function PrivateInExpectedIn(_ref31) {\n    var identifierName = _ref31.identifierName;\n    return \"Private names are only allowed in property accesses (`obj.#\".concat(identifierName, \"`) or in `in` expressions (`#\").concat(identifierName, \" in obj`).\");\n  },\n  PrivateNameRedeclaration: function PrivateNameRedeclaration(_ref32) {\n    var identifierName = _ref32.identifierName;\n    return \"Duplicate private name #\".concat(identifierName, \".\");\n  },\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: function UnexpectedKeyword(_ref33) {\n    var keyword = _ref33.keyword;\n    return \"Unexpected keyword '\".concat(keyword, \"'.\");\n  },\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: function UnexpectedReservedWord(_ref34) {\n    var reservedWord = _ref34.reservedWord;\n    return \"Unexpected reserved word '\".concat(reservedWord, \"'.\");\n  },\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: function UnexpectedToken(_ref35) {\n    var expected = _ref35.expected,\n      unexpected = _ref35.unexpected;\n    return \"Unexpected token\".concat(unexpected ? \" '\".concat(unexpected, \"'.\") : \"\").concat(expected ? \", expected \\\"\".concat(expected, \"\\\"\") : \"\");\n  },\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration: \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: function UnsupportedMetaProperty(_ref36) {\n    var target = _ref36.target,\n      onlyValidPropertyName = _ref36.onlyValidPropertyName;\n    return \"The only valid meta property for \".concat(target, \" is \").concat(target, \".\").concat(onlyValidPropertyName, \".\");\n  },\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationHasBindingPattern: \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: function VarRedeclaration(_ref37) {\n    var identifierName = _ref37.identifierName;\n    return \"Identifier '\".concat(identifierName, \"' has already been declared.\");\n  },\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n};\nvar StrictModeErrors = {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: function StrictEvalArguments(_ref38) {\n    var referenceName = _ref38.referenceName;\n    return \"Assigning to '\".concat(referenceName, \"' in strict mode.\");\n  },\n  StrictEvalArgumentsBinding: function StrictEvalArgumentsBinding(_ref39) {\n    var bindingName = _ref39.bindingName;\n    return \"Binding '\".concat(bindingName, \"' in strict mode.\");\n  },\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\"\n};\nvar UnparenthesizedPipeBodyDescriptions = new Set([\"ArrowFunctionExpression\", \"AssignmentExpression\", \"ConditionalExpression\", \"YieldExpression\"]);\nvar PipelineOperatorErrors = {\n  PipeBodyIsTighter: \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound: \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: function PipeTopicUnconfiguredToken(_ref40) {\n    var token = _ref40.token;\n    return \"Invalid topic token \".concat(token, \". In order to use \").concat(token, \" as a topic reference, the pipelineOperator plugin must be configured with { \\\"proposal\\\": \\\"hack\\\", \\\"topicToken\\\": \\\"\").concat(token, \"\\\" }.\");\n  },\n  PipeTopicUnused: \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: function PipeUnparenthesizedBody(_ref41) {\n    var type = _ref41.type;\n    return \"Hack-style pipe body cannot be an unparenthesized \".concat(toNodeDescription({\n      type: type\n    }), \"; please wrap it in parentheses.\");\n  },\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.'\n};\nvar _excluded$1 = [\"toMessage\"],\n  _excluded2$1 = [\"message\"];\nfunction toParseErrorConstructor(_ref) {\n  var toMessage = _ref.toMessage,\n    properties = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n  return function constructor(_ref42) {\n    var loc = _ref42.loc,\n      details = _ref42.details;\n    return instantiate(SyntaxError, Object.assign({}, properties, {\n      loc: loc\n    }), {\n      clone: function clone() {\n        var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var loc = overrides.loc || {};\n        return constructor({\n          loc: new Position(\"line\" in loc ? loc.line : this.loc.line, \"column\" in loc ? loc.column : this.loc.column, \"index\" in loc ? loc.index : this.loc.index),\n          details: Object.assign({}, this.details, overrides.details)\n        });\n      },\n      details: {\n        value: details,\n        enumerable: false\n      },\n      message: {\n        get: function get() {\n          return \"\".concat(toMessage(this.details), \" (\").concat(this.loc.line, \":\").concat(this.loc.column, \")\");\n        },\n        set: function set(value) {\n          Object.defineProperty(this, \"message\", {\n            value: value\n          });\n        }\n      },\n      pos: {\n        reflect: \"loc.index\",\n        enumerable: true\n      },\n      missingPlugin: \"missingPlugin\" in details && {\n        reflect: \"details.missingPlugin\",\n        enumerable: true\n      }\n    });\n  };\n}\nfunction ParseErrorEnum(argument, syntaxPlugin) {\n  if (Array.isArray(argument)) {\n    return function (parseErrorTemplates) {\n      return ParseErrorEnum(parseErrorTemplates, argument[0]);\n    };\n  }\n  var ParseErrorConstructors = {};\n  var _loop = function _loop() {\n    var reasonCode = _Object$keys[_i];\n    var template = argument[reasonCode];\n    var _ref2 = typeof template === \"string\" ? {\n        message: function message() {\n          return template;\n        }\n      } : typeof template === \"function\" ? {\n        message: template\n      } : template,\n      message = _ref2.message,\n      rest = _objectWithoutPropertiesLoose(_ref2, _excluded2$1);\n    var toMessage = typeof message === \"string\" ? function () {\n      return message;\n    } : message;\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({\n      code: ParseErrorCode.SyntaxError,\n      reasonCode: reasonCode,\n      toMessage: toMessage\n    }, syntaxPlugin ? {\n      syntaxPlugin: syntaxPlugin\n    } : {}, rest));\n  };\n  for (var _i = 0, _Object$keys = Object.keys(argument); _i < _Object$keys.length; _i++) {\n    _loop();\n  }\n  return ParseErrorConstructors;\n}\nvar Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum(_templateObject || (_templateObject = _taggedTemplateLiteral([\"pipelineOperator\"])))(PipelineOperatorErrors));\nvar defineProperty = Object.defineProperty;\nvar toUnenumerable = function toUnenumerable(object, key) {\n  return defineProperty(object, key, {\n    enumerable: false,\n    value: object[key]\n  });\n};\nfunction toESTreeLocation(node) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n  return node;\n}\nvar estree = function estree(superClass) {\n  return /*#__PURE__*/function (_superClass) {\n    _inherits(ESTreeParserMixin, _superClass);\n    var _super = _createSuper(ESTreeParserMixin);\n    function ESTreeParserMixin() {\n      _classCallCheck(this, ESTreeParserMixin);\n      return _super.apply(this, arguments);\n    }\n    _createClass(ESTreeParserMixin, [{\n      key: \"parse\",\n      value: function parse() {\n        var file = toESTreeLocation(_get(_getPrototypeOf(ESTreeParserMixin.prototype), \"parse\", this).call(this));\n        if (this.options.tokens) {\n          file.tokens = file.tokens.map(toESTreeLocation);\n        }\n        return file;\n      }\n    }, {\n      key: \"parseRegExpLiteral\",\n      value: function parseRegExpLiteral(_ref43) {\n        var pattern = _ref43.pattern,\n          flags = _ref43.flags;\n        var regex = null;\n        try {\n          regex = new RegExp(pattern, flags);\n        } catch (e) {}\n        var node = this.estreeParseLiteral(regex);\n        node.regex = {\n          pattern: pattern,\n          flags: flags\n        };\n        return node;\n      }\n    }, {\n      key: \"parseBigIntLiteral\",\n      value: function parseBigIntLiteral(value) {\n        var bigInt;\n        try {\n          bigInt = BigInt(value);\n        } catch (_unused) {\n          bigInt = null;\n        }\n        var node = this.estreeParseLiteral(bigInt);\n        node.bigint = String(node.value || value);\n        return node;\n      }\n    }, {\n      key: \"parseDecimalLiteral\",\n      value: function parseDecimalLiteral(value) {\n        var decimal = null;\n        var node = this.estreeParseLiteral(decimal);\n        node.decimal = String(node.value || value);\n        return node;\n      }\n    }, {\n      key: \"estreeParseLiteral\",\n      value: function estreeParseLiteral(value) {\n        return this.parseLiteral(value, \"Literal\");\n      }\n    }, {\n      key: \"parseStringLiteral\",\n      value: function parseStringLiteral(value) {\n        return this.estreeParseLiteral(value);\n      }\n    }, {\n      key: \"parseNumericLiteral\",\n      value: function parseNumericLiteral(value) {\n        return this.estreeParseLiteral(value);\n      }\n    }, {\n      key: \"parseNullLiteral\",\n      value: function parseNullLiteral() {\n        return this.estreeParseLiteral(null);\n      }\n    }, {\n      key: \"parseBooleanLiteral\",\n      value: function parseBooleanLiteral(value) {\n        return this.estreeParseLiteral(value);\n      }\n    }, {\n      key: \"directiveToStmt\",\n      value: function directiveToStmt(directive) {\n        var expression = directive.value;\n        delete directive.value;\n        expression.type = \"Literal\";\n        expression.raw = expression.extra.raw;\n        expression.value = expression.extra.expressionValue;\n        var stmt = directive;\n        stmt.type = \"ExpressionStatement\";\n        stmt.expression = expression;\n        stmt.directive = expression.extra.rawValue;\n        delete expression.extra;\n        return stmt;\n      }\n    }, {\n      key: \"initFunction\",\n      value: function initFunction(node, isAsync) {\n        _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"initFunction\", this).call(this, node, isAsync);\n        node.expression = false;\n      }\n    }, {\n      key: \"checkDeclaration\",\n      value: function checkDeclaration(node) {\n        if (node != null && this.isObjectProperty(node)) {\n          this.checkDeclaration(node.value);\n        } else {\n          _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"checkDeclaration\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"getObjectOrClassMethodParams\",\n      value: function getObjectOrClassMethodParams(method) {\n        return method.value.params;\n      }\n    }, {\n      key: \"isValidDirective\",\n      value: function isValidDirective(stmt) {\n        var _stmt$expression$extr;\n        return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n      }\n    }, {\n      key: \"parseBlockBody\",\n      value: function parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n        var _this2 = this;\n        _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"parseBlockBody\", this).call(this, node, allowDirectives, topLevel, end, afterBlockParse);\n        var directiveStatements = node.directives.map(function (d) {\n          return _this2.directiveToStmt(d);\n        });\n        node.body = directiveStatements.concat(node.body);\n        delete node.directives;\n      }\n    }, {\n      key: \"pushClassMethod\",\n      value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n        this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n        if (method.typeParameters) {\n          method.value.typeParameters = method.typeParameters;\n          delete method.typeParameters;\n        }\n        classBody.body.push(method);\n      }\n    }, {\n      key: \"parsePrivateName\",\n      value: function parsePrivateName() {\n        var node = _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"parsePrivateName\", this).call(this);\n        {\n          if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n            return node;\n          }\n        }\n        return this.convertPrivateNameToPrivateIdentifier(node);\n      }\n    }, {\n      key: \"convertPrivateNameToPrivateIdentifier\",\n      value: function convertPrivateNameToPrivateIdentifier(node) {\n        var name = _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"getPrivateNameSV\", this).call(this, node);\n        node = node;\n        delete node.id;\n        node.name = name;\n        node.type = \"PrivateIdentifier\";\n        return node;\n      }\n    }, {\n      key: \"isPrivateName\",\n      value: function isPrivateName(node) {\n        {\n          if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n            return _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"isPrivateName\", this).call(this, node);\n          }\n        }\n        return node.type === \"PrivateIdentifier\";\n      }\n    }, {\n      key: \"getPrivateNameSV\",\n      value: function getPrivateNameSV(node) {\n        {\n          if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n            return _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"getPrivateNameSV\", this).call(this, node);\n          }\n        }\n        return node.name;\n      }\n    }, {\n      key: \"parseLiteral\",\n      value: function parseLiteral(value, type) {\n        var node = _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"parseLiteral\", this).call(this, value, type);\n        node.raw = node.extra.raw;\n        delete node.extra;\n        return node;\n      }\n    }, {\n      key: \"parseFunctionBody\",\n      value: function parseFunctionBody(node, allowExpression) {\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"parseFunctionBody\", this).call(this, node, allowExpression, isMethod);\n        node.expression = node.body.type !== \"BlockStatement\";\n      }\n    }, {\n      key: \"parseMethod\",\n      value: function parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n        var inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n        var funcNode = this.startNode();\n        funcNode.kind = node.kind;\n        funcNode = _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"parseMethod\", this).call(this, funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n        funcNode.type = \"FunctionExpression\";\n        delete funcNode.kind;\n        node.value = funcNode;\n        if (type === \"ClassPrivateMethod\") {\n          node.computed = false;\n        }\n        return this.finishNode(node, \"MethodDefinition\");\n      }\n    }, {\n      key: \"parseClassProperty\",\n      value: function parseClassProperty() {\n        var _get2;\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        var propertyNode = (_get2 = _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"parseClassProperty\", this)).call.apply(_get2, [this].concat(args));\n        {\n          if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n            return propertyNode;\n          }\n        }\n        propertyNode.type = \"PropertyDefinition\";\n        return propertyNode;\n      }\n    }, {\n      key: \"parseClassPrivateProperty\",\n      value: function parseClassPrivateProperty() {\n        var _get3;\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n        var propertyNode = (_get3 = _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"parseClassPrivateProperty\", this)).call.apply(_get3, [this].concat(args));\n        {\n          if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n            return propertyNode;\n          }\n        }\n        propertyNode.type = \"PropertyDefinition\";\n        propertyNode.computed = false;\n        return propertyNode;\n      }\n    }, {\n      key: \"parseObjectMethod\",\n      value: function parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n        var node = _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"parseObjectMethod\", this).call(this, prop, isGenerator, isAsync, isPattern, isAccessor);\n        if (node) {\n          node.type = \"Property\";\n          if (node.kind === \"method\") {\n            node.kind = \"init\";\n          }\n          node.shorthand = false;\n        }\n        return node;\n      }\n    }, {\n      key: \"parseObjectProperty\",\n      value: function parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {\n        var node = _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"parseObjectProperty\", this).call(this, prop, startLoc, isPattern, refExpressionErrors);\n        if (node) {\n          node.kind = \"init\";\n          node.type = \"Property\";\n        }\n        return node;\n      }\n    }, {\n      key: \"isValidLVal\",\n      value: function isValidLVal(type, isUnparenthesizedInAssign, binding) {\n        return type === \"Property\" ? \"value\" : _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"isValidLVal\", this).call(this, type, isUnparenthesizedInAssign, binding);\n      }\n    }, {\n      key: \"isAssignable\",\n      value: function isAssignable(node, isBinding) {\n        if (node != null && this.isObjectProperty(node)) {\n          return this.isAssignable(node.value, isBinding);\n        }\n        return _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"isAssignable\", this).call(this, node, isBinding);\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        var isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        if (node != null && this.isObjectProperty(node)) {\n          var key = node.key,\n            value = node.value;\n          if (this.isPrivateName(key)) {\n            this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n          }\n          this.toAssignable(value, isLHS);\n        } else {\n          _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"toAssignable\", this).call(this, node, isLHS);\n        }\n      }\n    }, {\n      key: \"toAssignableObjectExpressionProp\",\n      value: function toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n        if (prop.kind === \"get\" || prop.kind === \"set\") {\n          this.raise(Errors.PatternHasAccessor, {\n            at: prop.key\n          });\n        } else if (prop.method) {\n          this.raise(Errors.PatternHasMethod, {\n            at: prop.key\n          });\n        } else {\n          _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"toAssignableObjectExpressionProp\", this).call(this, prop, isLast, isLHS);\n        }\n      }\n    }, {\n      key: \"finishCallExpression\",\n      value: function finishCallExpression(unfinished, optional) {\n        var node = _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"finishCallExpression\", this).call(this, unfinished, optional);\n        if (node.callee.type === \"Import\") {\n          node.type = \"ImportExpression\";\n          node.source = node.arguments[0];\n          if (this.hasPlugin(\"importAttributes\") || this.hasPlugin(\"importAssertions\")) {\n            var _node$arguments$;\n            node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n          }\n          delete node.arguments;\n          delete node.callee;\n        }\n        return node;\n      }\n    }, {\n      key: \"toReferencedArguments\",\n      value: function toReferencedArguments(node) {\n        if (node.type === \"ImportExpression\") {\n          return;\n        }\n        _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"toReferencedArguments\", this).call(this, node);\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(unfinished, decorators) {\n        var exportStartLoc = this.state.lastTokStartLoc;\n        var node = _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"parseExport\", this).call(this, unfinished, decorators);\n        switch (node.type) {\n          case \"ExportAllDeclaration\":\n            node.exported = null;\n            break;\n          case \"ExportNamedDeclaration\":\n            if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n              node.type = \"ExportAllDeclaration\";\n              node.exported = node.specifiers[0].exported;\n              delete node.specifiers;\n            }\n          case \"ExportDefaultDeclaration\":\n            {\n              var _declaration$decorato;\n              var declaration = node.declaration;\n              if ((declaration == null ? void 0 : declaration.type) === \"ClassDeclaration\" && ((_declaration$decorato = declaration.decorators) == null ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node.start) {\n                this.resetStartLocation(node, exportStartLoc);\n              }\n            }\n            break;\n        }\n        return node;\n      }\n    }, {\n      key: \"parseSubscript\",\n      value: function parseSubscript(base, startLoc, noCalls, state) {\n        var node = _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"parseSubscript\", this).call(this, base, startLoc, noCalls, state);\n        if (state.optionalChainMember) {\n          if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n            node.type = node.type.substring(8);\n          }\n          if (state.stop) {\n            var chain = this.startNodeAtNode(node);\n            chain.expression = node;\n            return this.finishNode(chain, \"ChainExpression\");\n          }\n        } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n          node.optional = false;\n        }\n        return node;\n      }\n    }, {\n      key: \"hasPropertyAsPrivateName\",\n      value: function hasPropertyAsPrivateName(node) {\n        if (node.type === \"ChainExpression\") {\n          node = node.expression;\n        }\n        return _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"hasPropertyAsPrivateName\", this).call(this, node);\n      }\n    }, {\n      key: \"isObjectProperty\",\n      value: function isObjectProperty(node) {\n        return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n      }\n    }, {\n      key: \"isObjectMethod\",\n      value: function isObjectMethod(node) {\n        return node.method || node.kind === \"get\" || node.kind === \"set\";\n      }\n    }, {\n      key: \"finishNodeAt\",\n      value: function finishNodeAt(node, type, endLoc) {\n        return toESTreeLocation(_get(_getPrototypeOf(ESTreeParserMixin.prototype), \"finishNodeAt\", this).call(this, node, type, endLoc));\n      }\n    }, {\n      key: \"resetStartLocation\",\n      value: function resetStartLocation(node, startLoc) {\n        _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"resetStartLocation\", this).call(this, node, startLoc);\n        toESTreeLocation(node);\n      }\n    }, {\n      key: \"resetEndLocation\",\n      value: function resetEndLocation(node) {\n        var endLoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEndLoc;\n        _get(_getPrototypeOf(ESTreeParserMixin.prototype), \"resetEndLocation\", this).call(this, node, endLoc);\n        toESTreeLocation(node);\n      }\n    }]);\n    return ESTreeParserMixin;\n  }(superClass);\n};\nvar TokContext = /*#__PURE__*/_createClass(function TokContext(token, preserveSpace) {\n  _classCallCheck(this, TokContext);\n  this.token = void 0;\n  this.preserveSpace = void 0;\n  this.token = token;\n  this.preserveSpace = !!preserveSpace;\n});\nvar types = {\n  brace: new TokContext(\"{\"),\n  j_oTag: new TokContext(\"<tag\"),\n  j_cTag: new TokContext(\"</tag\"),\n  j_expr: new TokContext(\"<tag>...</tag>\", true)\n};\n{\n  types.template = new TokContext(\"`\", true);\n}\nvar beforeExpr = true;\nvar startsExpr = true;\nvar isLoop = true;\nvar isAssign = true;\nvar prefix = true;\nvar postfix = true;\nvar ExportedTokenType = /*#__PURE__*/_createClass(function ExportedTokenType(label) {\n  var conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  _classCallCheck(this, ExportedTokenType);\n  this.label = void 0;\n  this.keyword = void 0;\n  this.beforeExpr = void 0;\n  this.startsExpr = void 0;\n  this.rightAssociative = void 0;\n  this.isLoop = void 0;\n  this.isAssign = void 0;\n  this.prefix = void 0;\n  this.postfix = void 0;\n  this.binop = void 0;\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.rightAssociative = !!conf.rightAssociative;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop != null ? conf.binop : null;\n  {\n    this.updateContext = null;\n  }\n});\nvar keywords$1 = new Map();\nfunction createKeyword(name) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.keyword = name;\n  var token = createToken(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\nfunction createBinop(name, binop) {\n  return createToken(name, {\n    beforeExpr: beforeExpr,\n    binop: binop\n  });\n}\nvar tokenTypeCounter = -1;\nvar tokenTypes = [];\nvar tokenLabels = [];\nvar tokenBinops = [];\nvar tokenBeforeExprs = [];\nvar tokenStartsExprs = [];\nvar tokenPrefixes = [];\nfunction createToken(name) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);\n  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);\n  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);\n  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n  return tokenTypeCounter;\n}\nfunction createKeywordLike(name) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;\n  ++tokenTypeCounter;\n  keywords$1.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);\n  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);\n  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);\n  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n  return tokenTypeCounter;\n}\nvar tt = {\n  bracketL: createToken(\"[\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  bracketHashL: createToken(\"#[\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  bracketBarL: createToken(\"[|\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  braceBarL: createToken(\"{|\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  braceHashL: createToken(\"#{\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", {\n    beforeExpr: beforeExpr\n  }),\n  semi: createToken(\";\", {\n    beforeExpr: beforeExpr\n  }),\n  colon: createToken(\":\", {\n    beforeExpr: beforeExpr\n  }),\n  doubleColon: createToken(\"::\", {\n    beforeExpr: beforeExpr\n  }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", {\n    beforeExpr: beforeExpr\n  }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", {\n    beforeExpr: beforeExpr\n  }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", {\n    beforeExpr: beforeExpr\n  }),\n  backQuote: createToken(\"`\", {\n    startsExpr: startsExpr\n  }),\n  dollarBraceL: createToken(\"${\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  templateTail: createToken(\"...`\", {\n    startsExpr: startsExpr\n  }),\n  templateNonTail: createToken(\"...${\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", {\n    startsExpr: startsExpr\n  }),\n  interpreterDirective: createToken(\"#!...\"),\n  eq: createToken(\"=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign\n  }),\n  assign: createToken(\"_=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign\n  }),\n  slashAssign: createToken(\"_=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign\n  }),\n  xorAssign: createToken(\"_=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign\n  }),\n  moduloAssign: createToken(\"_=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign\n  }),\n  incDec: createToken(\"++/--\", {\n    prefix: prefix,\n    postfix: postfix,\n    startsExpr: startsExpr\n  }),\n  bang: createToken(\"!\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  tilde: createToken(\"~\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  doubleCaret: createToken(\"^^\", {\n    startsExpr: startsExpr\n  }),\n  doubleAt: createToken(\"@@\", {\n    startsExpr: startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", {\n    beforeExpr: beforeExpr,\n    binop: 9,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  modulo: createToken(\"%\", {\n    binop: 10,\n    startsExpr: startsExpr\n  }),\n  star: createToken(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr: beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr: beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr: beforeExpr,\n    binop: 7\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr: beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr: beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr: beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", {\n    startsExpr: startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr: beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr: startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr: startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr: startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr: beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr: startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr: startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr: startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr: startsExpr\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop: isLoop,\n    beforeExpr: beforeExpr\n  }),\n  _for: createKeyword(\"for\", {\n    isLoop: isLoop\n  }),\n  _while: createKeyword(\"while\", {\n    isLoop: isLoop\n  }),\n  _as: createKeywordLike(\"as\", {\n    startsExpr: startsExpr\n  }),\n  _assert: createKeywordLike(\"assert\", {\n    startsExpr: startsExpr\n  }),\n  _async: createKeywordLike(\"async\", {\n    startsExpr: startsExpr\n  }),\n  _await: createKeywordLike(\"await\", {\n    startsExpr: startsExpr\n  }),\n  _from: createKeywordLike(\"from\", {\n    startsExpr: startsExpr\n  }),\n  _get: createKeywordLike(\"get\", {\n    startsExpr: startsExpr\n  }),\n  _let: createKeywordLike(\"let\", {\n    startsExpr: startsExpr\n  }),\n  _meta: createKeywordLike(\"meta\", {\n    startsExpr: startsExpr\n  }),\n  _of: createKeywordLike(\"of\", {\n    startsExpr: startsExpr\n  }),\n  _sent: createKeywordLike(\"sent\", {\n    startsExpr: startsExpr\n  }),\n  _set: createKeywordLike(\"set\", {\n    startsExpr: startsExpr\n  }),\n  _static: createKeywordLike(\"static\", {\n    startsExpr: startsExpr\n  }),\n  _using: createKeywordLike(\"using\", {\n    startsExpr: startsExpr\n  }),\n  _yield: createKeywordLike(\"yield\", {\n    startsExpr: startsExpr\n  }),\n  _asserts: createKeywordLike(\"asserts\", {\n    startsExpr: startsExpr\n  }),\n  _checks: createKeywordLike(\"checks\", {\n    startsExpr: startsExpr\n  }),\n  _exports: createKeywordLike(\"exports\", {\n    startsExpr: startsExpr\n  }),\n  _global: createKeywordLike(\"global\", {\n    startsExpr: startsExpr\n  }),\n  _implements: createKeywordLike(\"implements\", {\n    startsExpr: startsExpr\n  }),\n  _intrinsic: createKeywordLike(\"intrinsic\", {\n    startsExpr: startsExpr\n  }),\n  _infer: createKeywordLike(\"infer\", {\n    startsExpr: startsExpr\n  }),\n  _is: createKeywordLike(\"is\", {\n    startsExpr: startsExpr\n  }),\n  _mixins: createKeywordLike(\"mixins\", {\n    startsExpr: startsExpr\n  }),\n  _proto: createKeywordLike(\"proto\", {\n    startsExpr: startsExpr\n  }),\n  _require: createKeywordLike(\"require\", {\n    startsExpr: startsExpr\n  }),\n  _satisfies: createKeywordLike(\"satisfies\", {\n    startsExpr: startsExpr\n  }),\n  _keyof: createKeywordLike(\"keyof\", {\n    startsExpr: startsExpr\n  }),\n  _readonly: createKeywordLike(\"readonly\", {\n    startsExpr: startsExpr\n  }),\n  _unique: createKeywordLike(\"unique\", {\n    startsExpr: startsExpr\n  }),\n  _abstract: createKeywordLike(\"abstract\", {\n    startsExpr: startsExpr\n  }),\n  _declare: createKeywordLike(\"declare\", {\n    startsExpr: startsExpr\n  }),\n  _enum: createKeywordLike(\"enum\", {\n    startsExpr: startsExpr\n  }),\n  _module: createKeywordLike(\"module\", {\n    startsExpr: startsExpr\n  }),\n  _namespace: createKeywordLike(\"namespace\", {\n    startsExpr: startsExpr\n  }),\n  _interface: createKeywordLike(\"interface\", {\n    startsExpr: startsExpr\n  }),\n  _type: createKeywordLike(\"type\", {\n    startsExpr: startsExpr\n  }),\n  _opaque: createKeywordLike(\"opaque\", {\n    startsExpr: startsExpr\n  }),\n  name: createToken(\"name\", {\n    startsExpr: startsExpr\n  }),\n  string: createToken(\"string\", {\n    startsExpr: startsExpr\n  }),\n  num: createToken(\"num\", {\n    startsExpr: startsExpr\n  }),\n  bigint: createToken(\"bigint\", {\n    startsExpr: startsExpr\n  }),\n  decimal: createToken(\"decimal\", {\n    startsExpr: startsExpr\n  }),\n  regexp: createToken(\"regexp\", {\n    startsExpr: startsExpr\n  }),\n  privateName: createToken(\"#name\", {\n    startsExpr: startsExpr\n  }),\n  eof: createToken(\"eof\"),\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", {\n    beforeExpr: true\n  }),\n  jsxTagStart: createToken(\"jsxTagStart\", {\n    startsExpr: true\n  }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n  placeholder: createToken(\"%%\", {\n    startsExpr: true\n  })\n};\nfunction tokenIsIdentifier(token) {\n  return token >= 93 && token <= 130;\n}\nfunction tokenKeywordOrIdentifierIsKeyword(token) {\n  return token <= 92;\n}\nfunction tokenIsKeywordOrIdentifier(token) {\n  return token >= 58 && token <= 130;\n}\nfunction tokenIsLiteralPropertyName(token) {\n  return token >= 58 && token <= 134;\n}\nfunction tokenComesBeforeExpression(token) {\n  return tokenBeforeExprs[token];\n}\nfunction tokenCanStartExpression(token) {\n  return tokenStartsExprs[token];\n}\nfunction tokenIsAssignment(token) {\n  return token >= 29 && token <= 33;\n}\nfunction tokenIsFlowInterfaceOrTypeOrOpaque(token) {\n  return token >= 127 && token <= 129;\n}\nfunction tokenIsLoop(token) {\n  return token >= 90 && token <= 92;\n}\nfunction tokenIsKeyword(token) {\n  return token >= 58 && token <= 92;\n}\nfunction tokenIsOperator(token) {\n  return token >= 39 && token <= 59;\n}\nfunction tokenIsPostfix(token) {\n  return token === 34;\n}\nfunction tokenIsPrefix(token) {\n  return tokenPrefixes[token];\n}\nfunction tokenIsTSTypeOperator(token) {\n  return token >= 119 && token <= 121;\n}\nfunction tokenIsTSDeclarationStart(token) {\n  return token >= 122 && token <= 128;\n}\nfunction tokenLabelName(token) {\n  return tokenLabels[token];\n}\nfunction tokenOperatorPrecedence(token) {\n  return tokenBinops[token];\n}\nfunction tokenIsRightAssociative(token) {\n  return token === 57;\n}\nfunction tokenIsTemplate(token) {\n  return token >= 24 && token <= 25;\n}\nfunction getExportedToken(token) {\n  return tokenTypes[token];\n}\n{\n  tokenTypes[8].updateContext = function (context) {\n    context.pop();\n  };\n  tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = function (context) {\n    context.push(types.brace);\n  };\n  tokenTypes[22].updateContext = function (context) {\n    if (context[context.length - 1] === types.template) {\n      context.pop();\n    } else {\n      context.push(types.template);\n    }\n  };\n  tokenTypes[140].updateContext = function (context) {\n    context.push(types.j_expr, types.j_oTag);\n  };\n}\nvar nonASCIIidentifierStartChars = \"\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";\nvar nonASCIIidentifierChars = \"\\u200C\\u200D\\xB7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0898-\\u089F\\u08CA-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B55-\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C04\\u0C3C\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0CF3\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D81-\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECE\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u180F-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1ABF-\\u1ACE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DFF\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA82C\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA8FF-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F\";\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nvar astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938, 6, 4191];\nvar astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\nvar reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nvar keywords = new Set(reservedWords.keyword);\nvar reservedWordsStrictSet = new Set(reservedWords.strict);\nvar reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\nfunction isIteratorStart(current, next, next2) {\n  return current === 64 && next === 64 && isIdentifierStart(next2);\n}\nvar reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\nvar SCOPE_OTHER = 0,\n  SCOPE_PROGRAM = 1,\n  SCOPE_FUNCTION = 2,\n  SCOPE_ARROW = 4,\n  SCOPE_SIMPLE_CATCH = 8,\n  SCOPE_SUPER = 16,\n  SCOPE_DIRECT_SUPER = 32,\n  SCOPE_CLASS = 64,\n  SCOPE_STATIC_BLOCK = 128,\n  SCOPE_TS_MODULE = 256,\n  SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_STATIC_BLOCK | SCOPE_TS_MODULE;\nvar BIND_KIND_VALUE = 1,\n  BIND_KIND_TYPE = 2,\n  BIND_SCOPE_VAR = 4,\n  BIND_SCOPE_LEXICAL = 8,\n  BIND_SCOPE_FUNCTION = 16,\n  BIND_FLAGS_NONE = 64,\n  BIND_FLAGS_CLASS = 128,\n  BIND_FLAGS_TS_ENUM = 256,\n  BIND_FLAGS_TS_CONST_ENUM = 512,\n  BIND_FLAGS_TS_EXPORT_ONLY = 1024,\n  BIND_FLAGS_FLOW_DECLARE_FN = 2048,\n  BIND_FLAGS_TS_IMPORT = 4096,\n  BIND_FLAGS_NO_LET_IN_LEXICAL = 8192;\nvar BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS | BIND_FLAGS_NO_LET_IN_LEXICAL,\n  BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | BIND_FLAGS_NO_LET_IN_LEXICAL,\n  BIND_CATCH_PARAM = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n  BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n  BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n  BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n  BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n  BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM | BIND_FLAGS_NO_LET_IN_LEXICAL,\n  BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n  BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n  BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n  BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_TS_TYPE_IMPORT = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_TS_IMPORT,\n  BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nvar CLASS_ELEMENT_FLAG_STATIC = 4,\n  CLASS_ELEMENT_KIND_GETTER = 2,\n  CLASS_ELEMENT_KIND_SETTER = 1,\n  CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nvar CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n  CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n  CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n  CLASS_ELEMENT_OTHER = 0;\nvar Scope = /*#__PURE__*/_createClass(function Scope(flags) {\n  _classCallCheck(this, Scope);\n  this.var = new Set();\n  this.lexical = new Set();\n  this.functions = new Set();\n  this.flags = flags;\n});\nvar ScopeHandler = /*#__PURE__*/function () {\n  function ScopeHandler(parser, inModule) {\n    _classCallCheck(this, ScopeHandler);\n    this.parser = void 0;\n    this.scopeStack = [];\n    this.inModule = void 0;\n    this.undefinedExports = new Map();\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n  _createClass(ScopeHandler, [{\n    key: \"inTopLevel\",\n    get: function get() {\n      return (this.currentScope().flags & SCOPE_PROGRAM) > 0;\n    }\n  }, {\n    key: \"inFunction\",\n    get: function get() {\n      return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n    }\n  }, {\n    key: \"allowSuper\",\n    get: function get() {\n      return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n    }\n  }, {\n    key: \"allowDirectSuper\",\n    get: function get() {\n      return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n    }\n  }, {\n    key: \"inClass\",\n    get: function get() {\n      return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n    }\n  }, {\n    key: \"inClassAndNotInNonArrowFunction\",\n    get: function get() {\n      var flags = this.currentThisScopeFlags();\n      return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n    }\n  }, {\n    key: \"inStaticBlock\",\n    get: function get() {\n      for (var i = this.scopeStack.length - 1;; i--) {\n        var flags = this.scopeStack[i].flags;\n        if (flags & SCOPE_STATIC_BLOCK) {\n          return true;\n        }\n        if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n          return false;\n        }\n      }\n    }\n  }, {\n    key: \"inNonArrowFunction\",\n    get: function get() {\n      return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n    }\n  }, {\n    key: \"treatFunctionsAsVar\",\n    get: function get() {\n      return this.treatFunctionsAsVarInScope(this.currentScope());\n    }\n  }, {\n    key: \"createScope\",\n    value: function createScope(flags) {\n      return new Scope(flags);\n    }\n  }, {\n    key: \"enter\",\n    value: function enter(flags) {\n      this.scopeStack.push(this.createScope(flags));\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      var scope = this.scopeStack.pop();\n      return scope.flags;\n    }\n  }, {\n    key: \"treatFunctionsAsVarInScope\",\n    value: function treatFunctionsAsVarInScope(scope) {\n      return !!(scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) || !this.parser.inModule && scope.flags & SCOPE_PROGRAM);\n    }\n  }, {\n    key: \"declareName\",\n    value: function declareName(name, bindingType, loc) {\n      var scope = this.currentScope();\n      if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        if (bindingType & BIND_SCOPE_FUNCTION) {\n          scope.functions.add(name);\n        } else {\n          scope.lexical.add(name);\n        }\n        if (bindingType & BIND_SCOPE_LEXICAL) {\n          this.maybeExportDefined(scope, name);\n        }\n      } else if (bindingType & BIND_SCOPE_VAR) {\n        for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n          scope = this.scopeStack[i];\n          this.checkRedeclarationInScope(scope, name, bindingType, loc);\n          scope.var.add(name);\n          this.maybeExportDefined(scope, name);\n          if (scope.flags & SCOPE_VAR) break;\n        }\n      }\n      if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n        this.undefinedExports.delete(name);\n      }\n    }\n  }, {\n    key: \"maybeExportDefined\",\n    value: function maybeExportDefined(scope, name) {\n      if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n        this.undefinedExports.delete(name);\n      }\n    }\n  }, {\n    key: \"checkRedeclarationInScope\",\n    value: function checkRedeclarationInScope(scope, name, bindingType, loc) {\n      if (this.isRedeclaredInScope(scope, name, bindingType)) {\n        this.parser.raise(Errors.VarRedeclaration, {\n          at: loc,\n          identifierName: name\n        });\n      }\n    }\n  }, {\n    key: \"isRedeclaredInScope\",\n    value: function isRedeclaredInScope(scope, name, bindingType) {\n      if (!(bindingType & BIND_KIND_VALUE)) return false;\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n      }\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n      }\n      return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n    }\n  }, {\n    key: \"checkLocalExport\",\n    value: function checkLocalExport(id) {\n      var name = id.name;\n      var topLevelScope = this.scopeStack[0];\n      if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n        this.undefinedExports.set(name, id.loc.start);\n      }\n    }\n  }, {\n    key: \"currentScope\",\n    value: function currentScope() {\n      return this.scopeStack[this.scopeStack.length - 1];\n    }\n  }, {\n    key: \"currentVarScopeFlags\",\n    value: function currentVarScopeFlags() {\n      for (var i = this.scopeStack.length - 1;; i--) {\n        var flags = this.scopeStack[i].flags;\n        if (flags & SCOPE_VAR) {\n          return flags;\n        }\n      }\n    }\n  }, {\n    key: \"currentThisScopeFlags\",\n    value: function currentThisScopeFlags() {\n      for (var i = this.scopeStack.length - 1;; i--) {\n        var flags = this.scopeStack[i].flags;\n        if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n          return flags;\n        }\n      }\n    }\n  }]);\n  return ScopeHandler;\n}();\nvar FlowScope = /*#__PURE__*/function (_Scope) {\n  _inherits(FlowScope, _Scope);\n  var _super2 = _createSuper(FlowScope);\n  function FlowScope() {\n    var _this3;\n    _classCallCheck(this, FlowScope);\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    _this3 = _super2.call.apply(_super2, [this].concat(args));\n    _this3.declareFunctions = new Set();\n    return _this3;\n  }\n  return _createClass(FlowScope);\n}(Scope);\nvar FlowScopeHandler = /*#__PURE__*/function (_ScopeHandler) {\n  _inherits(FlowScopeHandler, _ScopeHandler);\n  var _super3 = _createSuper(FlowScopeHandler);\n  function FlowScopeHandler() {\n    _classCallCheck(this, FlowScopeHandler);\n    return _super3.apply(this, arguments);\n  }\n  _createClass(FlowScopeHandler, [{\n    key: \"createScope\",\n    value: function createScope(flags) {\n      return new FlowScope(flags);\n    }\n  }, {\n    key: \"declareName\",\n    value: function declareName(name, bindingType, loc) {\n      var scope = this.currentScope();\n      if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n        scope.declareFunctions.add(name);\n        return;\n      }\n      _get(_getPrototypeOf(FlowScopeHandler.prototype), \"declareName\", this).call(this, name, bindingType, loc);\n    }\n  }, {\n    key: \"isRedeclaredInScope\",\n    value: function isRedeclaredInScope(scope, name, bindingType) {\n      if (_get(_getPrototypeOf(FlowScopeHandler.prototype), \"isRedeclaredInScope\", this).call(this, scope, name, bindingType)) return true;\n      if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n        return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n      }\n      return false;\n    }\n  }, {\n    key: \"checkLocalExport\",\n    value: function checkLocalExport(id) {\n      if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n        _get(_getPrototypeOf(FlowScopeHandler.prototype), \"checkLocalExport\", this).call(this, id);\n      }\n    }\n  }]);\n  return FlowScopeHandler;\n}(ScopeHandler);\nvar BaseParser = /*#__PURE__*/function () {\n  function BaseParser() {\n    _classCallCheck(this, BaseParser);\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n  _createClass(BaseParser, [{\n    key: \"hasPlugin\",\n    value: function hasPlugin(pluginConfig) {\n      if (typeof pluginConfig === \"string\") {\n        return this.plugins.has(pluginConfig);\n      } else {\n        var _pluginConfig = _slicedToArray(pluginConfig, 2),\n          pluginName = _pluginConfig[0],\n          pluginOptions = _pluginConfig[1];\n        if (!this.hasPlugin(pluginName)) {\n          return false;\n        }\n        var actualOptions = this.plugins.get(pluginName);\n        for (var _i2 = 0, _Object$keys2 = Object.keys(pluginOptions); _i2 < _Object$keys2.length; _i2++) {\n          var key = _Object$keys2[_i2];\n          if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {\n            return false;\n          }\n        }\n        return true;\n      }\n    }\n  }, {\n    key: \"getPluginOption\",\n    value: function getPluginOption(plugin, name) {\n      var _this$plugins$get;\n      return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];\n    }\n  }]);\n  return BaseParser;\n}();\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    var _node$trailingComment;\n    (_node$trailingComment = node.trailingComments).unshift.apply(_node$trailingComment, _toConsumableArray(comments));\n  }\n}\nfunction setLeadingComments(node, comments) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    var _node$leadingComments;\n    (_node$leadingComments = node.leadingComments).unshift.apply(_node$leadingComments, _toConsumableArray(comments));\n  }\n}\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    var _node$innerComments;\n    (_node$innerComments = node.innerComments).unshift.apply(_node$innerComments, _toConsumableArray(comments));\n  }\n}\nfunction adjustInnerComments(node, elements, commentWS) {\n  var lastElement = null;\n  var i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\nvar CommentsParser = /*#__PURE__*/function (_BaseParser) {\n  _inherits(CommentsParser, _BaseParser);\n  var _super4 = _createSuper(CommentsParser);\n  function CommentsParser() {\n    _classCallCheck(this, CommentsParser);\n    return _super4.apply(this, arguments);\n  }\n  _createClass(CommentsParser, [{\n    key: \"addComment\",\n    value: function addComment(comment) {\n      if (this.filename) comment.loc.filename = this.filename;\n      this.state.comments.push(comment);\n    }\n  }, {\n    key: \"processComment\",\n    value: function processComment(node) {\n      var commentStack = this.state.commentStack;\n      var commentStackLength = commentStack.length;\n      if (commentStackLength === 0) return;\n      var i = commentStackLength - 1;\n      var lastCommentWS = commentStack[i];\n      if (lastCommentWS.start === node.end) {\n        lastCommentWS.leadingNode = node;\n        i--;\n      }\n      var nodeStart = node.start;\n      for (; i >= 0; i--) {\n        var commentWS = commentStack[i];\n        var commentEnd = commentWS.end;\n        if (commentEnd > nodeStart) {\n          commentWS.containingNode = node;\n          this.finalizeComment(commentWS);\n          commentStack.splice(i, 1);\n        } else {\n          if (commentEnd === nodeStart) {\n            commentWS.trailingNode = node;\n          }\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"finalizeComment\",\n    value: function finalizeComment(commentWS) {\n      var comments = commentWS.comments;\n      if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n        if (commentWS.leadingNode !== null) {\n          setTrailingComments(commentWS.leadingNode, comments);\n        }\n        if (commentWS.trailingNode !== null) {\n          setLeadingComments(commentWS.trailingNode, comments);\n        }\n      } else {\n        var node = commentWS.containingNode,\n          commentStart = commentWS.start;\n        if (this.input.charCodeAt(commentStart - 1) === 44) {\n          switch (node.type) {\n            case \"ObjectExpression\":\n            case \"ObjectPattern\":\n            case \"RecordExpression\":\n              adjustInnerComments(node, node.properties, commentWS);\n              break;\n            case \"CallExpression\":\n            case \"OptionalCallExpression\":\n              adjustInnerComments(node, node.arguments, commentWS);\n              break;\n            case \"FunctionDeclaration\":\n            case \"FunctionExpression\":\n            case \"ArrowFunctionExpression\":\n            case \"ObjectMethod\":\n            case \"ClassMethod\":\n            case \"ClassPrivateMethod\":\n              adjustInnerComments(node, node.params, commentWS);\n              break;\n            case \"ArrayExpression\":\n            case \"ArrayPattern\":\n            case \"TupleExpression\":\n              adjustInnerComments(node, node.elements, commentWS);\n              break;\n            case \"ExportNamedDeclaration\":\n            case \"ImportDeclaration\":\n              adjustInnerComments(node, node.specifiers, commentWS);\n              break;\n            default:\n              {\n                setInnerComments(node, comments);\n              }\n          }\n        } else {\n          setInnerComments(node, comments);\n        }\n      }\n    }\n  }, {\n    key: \"finalizeRemainingComments\",\n    value: function finalizeRemainingComments() {\n      var commentStack = this.state.commentStack;\n      for (var i = commentStack.length - 1; i >= 0; i--) {\n        this.finalizeComment(commentStack[i]);\n      }\n      this.state.commentStack = [];\n    }\n  }, {\n    key: \"resetPreviousNodeTrailingComments\",\n    value: function resetPreviousNodeTrailingComments(node) {\n      var commentStack = this.state.commentStack;\n      var length = commentStack.length;\n      if (length === 0) return;\n      var commentWS = commentStack[length - 1];\n      if (commentWS.leadingNode === node) {\n        commentWS.leadingNode = null;\n      }\n    }\n  }, {\n    key: \"resetPreviousIdentifierLeadingComments\",\n    value: function resetPreviousIdentifierLeadingComments(node) {\n      var commentStack = this.state.commentStack;\n      var length = commentStack.length;\n      if (length === 0) return;\n      if (commentStack[length - 1].trailingNode === node) {\n        commentStack[length - 1].trailingNode = null;\n      } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {\n        commentStack[length - 2].trailingNode = null;\n      }\n    }\n  }, {\n    key: \"takeSurroundingComments\",\n    value: function takeSurroundingComments(node, start, end) {\n      var commentStack = this.state.commentStack;\n      var commentStackLength = commentStack.length;\n      if (commentStackLength === 0) return;\n      var i = commentStackLength - 1;\n      for (; i >= 0; i--) {\n        var commentWS = commentStack[i];\n        var commentEnd = commentWS.end;\n        var commentStart = commentWS.start;\n        if (commentStart === end) {\n          commentWS.leadingNode = node;\n        } else if (commentEnd === start) {\n          commentWS.trailingNode = node;\n        } else if (commentEnd < start) {\n          break;\n        }\n      }\n    }\n  }]);\n  return CommentsParser;\n}(BaseParser);\nvar lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n    default:\n      return false;\n  }\n}\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nvar skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\nvar skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n    default:\n      return false;\n  }\n}\nvar State = /*#__PURE__*/function () {\n  function State() {\n    _classCallCheck(this, State);\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.lineStart = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.inDisallowConditionalTypesContext = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.comments = [];\n    this.commentStack = [];\n    this.pos = 0;\n    this.type = 137;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.context = [types.brace];\n    this.canStartJSXElement = true;\n    this.containsEsc = false;\n    this.firstInvalidTemplateEscapePos = null;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n  _createClass(State, [{\n    key: \"init\",\n    value: function init(_ref44) {\n      var strictMode = _ref44.strictMode,\n        sourceType = _ref44.sourceType,\n        startLine = _ref44.startLine,\n        startColumn = _ref44.startColumn;\n      this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === \"module\";\n      this.curLine = startLine;\n      this.lineStart = -startColumn;\n      this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n    }\n  }, {\n    key: \"curPosition\",\n    value: function curPosition() {\n      return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(skipArrays) {\n      var state = new State();\n      var keys = Object.keys(this);\n      for (var i = 0, length = keys.length; i < length; i++) {\n        var key = keys[i];\n        var val = this[key];\n        if (!skipArrays && Array.isArray(val)) {\n          val = val.slice();\n        }\n        state[key] = val;\n      }\n      return state;\n    }\n  }]);\n  return State;\n}();\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nvar forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),\n  hex: new Set([46, 88, 95, 120])\n};\nvar isAllowedNumericSeparatorSibling = {\n  bin: function bin(ch) {\n    return ch === 48 || ch === 49;\n  },\n  oct: function oct(ch) {\n    return ch >= 48 && ch <= 55;\n  },\n  dec: function dec(ch) {\n    return ch >= 48 && ch <= 57;\n  },\n  hex: function hex(ch) {\n    return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;\n  }\n};\nfunction readStringContents(type, input, pos, lineStart, curLine, errors) {\n  var initialPos = pos;\n  var initialLineStart = lineStart;\n  var initialCurLine = curLine;\n  var out = \"\";\n  var firstInvalidLoc = null;\n  var chunkStart = pos;\n  var length = input.length;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    var ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === 92) {\n      out += input.slice(chunkStart, pos);\n      var res = readEscapedChar(input, pos, lineStart, curLine, type === \"template\", errors);\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = {\n          pos: pos,\n          lineStart: lineStart,\n          curLine: curLine\n        };\n      } else {\n        out += res.ch;\n      }\n      pos = res.pos;\n      lineStart = res.lineStart;\n      curLine = res.curLine;\n      chunkStart = pos;\n    } else if (ch === 8232 || ch === 8233) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === 10 || ch === 13) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (ch === 13 && input.charCodeAt(pos) === 10) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return {\n    pos: pos,\n    str: out,\n    firstInvalidLoc: firstInvalidLoc,\n    lineStart: lineStart,\n    curLine: curLine,\n    containsInvalid: !!firstInvalidLoc\n  };\n}\nfunction isStringEnd(type, ch, input, pos) {\n  if (type === \"template\") {\n    return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;\n  }\n  return ch === (type === \"double\" ? 34 : 39);\n}\nfunction readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {\n  var throwOnInvalid = !inTemplate;\n  pos++;\n  var res = function res(ch) {\n    return {\n      pos: pos,\n      ch: ch,\n      lineStart: lineStart,\n      curLine: curLine\n    };\n  };\n  var ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case 110:\n      return res(\"\\n\");\n    case 114:\n      return res(\"\\r\");\n    case 120:\n      {\n        var code;\n        var _readHexChar = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors);\n        code = _readHexChar.code;\n        pos = _readHexChar.pos;\n        return res(code === null ? null : String.fromCharCode(code));\n      }\n    case 117:\n      {\n        var _code;\n        var _readCodePoint = _readCodePoint2(input, pos, lineStart, curLine, throwOnInvalid, errors);\n        _code = _readCodePoint.code;\n        pos = _readCodePoint.pos;\n        return res(_code === null ? null : String.fromCodePoint(_code));\n      }\n    case 116:\n      return res(\"\\t\");\n    case 98:\n      return res(\"\\b\");\n    case 118:\n      return res(\"\\x0B\");\n    case 102:\n      return res(\"\\f\");\n    case 13:\n      if (input.charCodeAt(pos) === 10) {\n        ++pos;\n      }\n    case 10:\n      lineStart = pos;\n      ++curLine;\n    case 8232:\n    case 8233:\n      return res(\"\");\n    case 56:\n    case 57:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    default:\n      if (ch >= 48 && ch <= 55) {\n        var startPos = pos - 1;\n        var match = input.slice(startPos, pos + 2).match(/^[0-7]+/);\n        var octalStr = match[0];\n        var octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        var next = input.charCodeAt(pos);\n        if (octalStr !== \"0\" || next === 56 || next === 57) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n        return res(String.fromCharCode(octal));\n      }\n      return res(String.fromCharCode(ch));\n  }\n}\nfunction readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {\n  var initialPos = pos;\n  var n;\n  var _readInt = _readInt2(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid);\n  n = _readInt.n;\n  pos = _readInt.pos;\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return {\n    code: n,\n    pos: pos\n  };\n}\nfunction _readInt2(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {\n  var start = pos;\n  var forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n  var isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;\n  var invalid = false;\n  var total = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    var code = input.charCodeAt(pos);\n    var val = void 0;\n    if (code === 95 && allowNumSeparator !== \"bail\") {\n      var prev = input.charCodeAt(pos - 1);\n      var next = input.charCodeAt(pos + 1);\n      if (!allowNumSeparator) {\n        if (bailOnError) return {\n          n: null,\n          pos: pos\n        };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {\n        if (bailOnError) return {\n          n: null,\n          pos: pos\n        };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n      ++pos;\n      continue;\n    }\n    if (code >= 97) {\n      val = code - 97 + 10;\n    } else if (code >= 65) {\n      val = code - 65 + 10;\n    } else if (_isDigit(code)) {\n      val = code - 48;\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      if (val <= 9 && bailOnError) {\n        return {\n          n: null,\n          pos: pos\n        };\n      } else if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || len != null && pos - start !== len || invalid) {\n    return {\n      n: null,\n      pos: pos\n    };\n  }\n  return {\n    n: total,\n    pos: pos\n  };\n}\nfunction _readCodePoint2(input, pos, lineStart, curLine, throwOnInvalid, errors) {\n  var ch = input.charCodeAt(pos);\n  var code;\n  if (ch === 123) {\n    ++pos;\n    var _readHexChar2 = readHexChar(input, pos, lineStart, curLine, input.indexOf(\"}\", pos) - pos, true, throwOnInvalid, errors);\n    code = _readHexChar2.code;\n    pos = _readHexChar2.pos;\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return {\n          code: null,\n          pos: pos\n        };\n      }\n    }\n  } else {\n    var _readHexChar3 = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors);\n    code = _readHexChar3.code;\n    pos = _readHexChar3.pos;\n  }\n  return {\n    code: code,\n    pos: pos\n  };\n}\nvar _excluded = [\"at\"],\n  _excluded2 = [\"at\"];\nfunction buildPosition(pos, lineStart, curLine) {\n  return new Position(curLine, pos - lineStart, pos);\n}\nvar VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100, 118]);\nvar Token = /*#__PURE__*/_createClass(function Token(state) {\n  _classCallCheck(this, Token);\n  this.type = state.type;\n  this.value = state.value;\n  this.start = state.start;\n  this.end = state.end;\n  this.loc = new SourceLocation(state.startLoc, state.endLoc);\n});\nvar Tokenizer = /*#__PURE__*/function (_CommentsParser) {\n  _inherits(Tokenizer, _CommentsParser);\n  var _super5 = _createSuper(Tokenizer);\n  function Tokenizer(options, input) {\n    var _this4;\n    _classCallCheck(this, Tokenizer);\n    _this4 = _super5.call(this);\n    _this4.isLookahead = void 0;\n    _this4.tokens = [];\n    _this4.errorHandlers_readInt = {\n      invalidDigit: function invalidDigit(pos, lineStart, curLine, radix) {\n        if (!_this4.options.errorRecovery) return false;\n        _this4.raise(Errors.InvalidDigit, {\n          at: buildPosition(pos, lineStart, curLine),\n          radix: radix\n        });\n        return true;\n      },\n      numericSeparatorInEscapeSequence: _this4.errorBuilder(Errors.NumericSeparatorInEscapeSequence),\n      unexpectedNumericSeparator: _this4.errorBuilder(Errors.UnexpectedNumericSeparator)\n    };\n    _this4.errorHandlers_readCodePoint = Object.assign({}, _this4.errorHandlers_readInt, {\n      invalidEscapeSequence: _this4.errorBuilder(Errors.InvalidEscapeSequence),\n      invalidCodePoint: _this4.errorBuilder(Errors.InvalidCodePoint)\n    });\n    _this4.errorHandlers_readStringContents_string = Object.assign({}, _this4.errorHandlers_readCodePoint, {\n      strictNumericEscape: function strictNumericEscape(pos, lineStart, curLine) {\n        _this4.recordStrictModeErrors(Errors.StrictNumericEscape, {\n          at: buildPosition(pos, lineStart, curLine)\n        });\n      },\n      unterminated: function unterminated(pos, lineStart, curLine) {\n        throw _this4.raise(Errors.UnterminatedString, {\n          at: buildPosition(pos - 1, lineStart, curLine)\n        });\n      }\n    });\n    _this4.errorHandlers_readStringContents_template = Object.assign({}, _this4.errorHandlers_readCodePoint, {\n      strictNumericEscape: _this4.errorBuilder(Errors.StrictNumericEscape),\n      unterminated: function unterminated(pos, lineStart, curLine) {\n        throw _this4.raise(Errors.UnterminatedTemplate, {\n          at: buildPosition(pos, lineStart, curLine)\n        });\n      }\n    });\n    _this4.state = new State();\n    _this4.state.init(options);\n    _this4.input = input;\n    _this4.length = input.length;\n    _this4.isLookahead = false;\n    return _this4;\n  }\n  _createClass(Tokenizer, [{\n    key: \"pushToken\",\n    value: function pushToken(token) {\n      this.tokens.length = this.state.tokensLength;\n      this.tokens.push(token);\n      ++this.state.tokensLength;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      this.checkKeywordEscapes();\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n      this.state.lastTokStart = this.state.start;\n      this.state.lastTokEndLoc = this.state.endLoc;\n      this.state.lastTokStartLoc = this.state.startLoc;\n      this.nextToken();\n    }\n  }, {\n    key: \"eat\",\n    value: function eat(type) {\n      if (this.match(type)) {\n        this.next();\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"match\",\n    value: function match(type) {\n      return this.state.type === type;\n    }\n  }, {\n    key: \"createLookaheadState\",\n    value: function createLookaheadState(state) {\n      return {\n        pos: state.pos,\n        value: null,\n        type: state.type,\n        start: state.start,\n        end: state.end,\n        context: [this.curContext()],\n        inType: state.inType,\n        startLoc: state.startLoc,\n        lastTokEndLoc: state.lastTokEndLoc,\n        curLine: state.curLine,\n        lineStart: state.lineStart,\n        curPosition: state.curPosition\n      };\n    }\n  }, {\n    key: \"lookahead\",\n    value: function lookahead() {\n      var old = this.state;\n      this.state = this.createLookaheadState(old);\n      this.isLookahead = true;\n      this.nextToken();\n      this.isLookahead = false;\n      var curr = this.state;\n      this.state = old;\n      return curr;\n    }\n  }, {\n    key: \"nextTokenStart\",\n    value: function nextTokenStart() {\n      return this.nextTokenStartSince(this.state.pos);\n    }\n  }, {\n    key: \"nextTokenStartSince\",\n    value: function nextTokenStartSince(pos) {\n      skipWhiteSpace.lastIndex = pos;\n      return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n    }\n  }, {\n    key: \"lookaheadCharCode\",\n    value: function lookaheadCharCode() {\n      return this.input.charCodeAt(this.nextTokenStart());\n    }\n  }, {\n    key: \"nextTokenInLineStart\",\n    value: function nextTokenInLineStart() {\n      return this.nextTokenInLineStartSince(this.state.pos);\n    }\n  }, {\n    key: \"nextTokenInLineStartSince\",\n    value: function nextTokenInLineStartSince(pos) {\n      skipWhiteSpaceInLine.lastIndex = pos;\n      return skipWhiteSpaceInLine.test(this.input) ? skipWhiteSpaceInLine.lastIndex : pos;\n    }\n  }, {\n    key: \"lookaheadInLineCharCode\",\n    value: function lookaheadInLineCharCode() {\n      return this.input.charCodeAt(this.nextTokenInLineStart());\n    }\n  }, {\n    key: \"codePointAtPos\",\n    value: function codePointAtPos(pos) {\n      var cp = this.input.charCodeAt(pos);\n      if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n        var trail = this.input.charCodeAt(pos);\n        if ((trail & 0xfc00) === 0xdc00) {\n          cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n        }\n      }\n      return cp;\n    }\n  }, {\n    key: \"setStrict\",\n    value: function setStrict(strict) {\n      var _this5 = this;\n      this.state.strict = strict;\n      if (strict) {\n        this.state.strictErrors.forEach(function (_ref45) {\n          var _ref46 = _slicedToArray(_ref45, 2),\n            toParseError = _ref46[0],\n            at = _ref46[1];\n          return _this5.raise(toParseError, {\n            at: at\n          });\n        });\n        this.state.strictErrors.clear();\n      }\n    }\n  }, {\n    key: \"curContext\",\n    value: function curContext() {\n      return this.state.context[this.state.context.length - 1];\n    }\n  }, {\n    key: \"nextToken\",\n    value: function nextToken() {\n      this.skipSpace();\n      this.state.start = this.state.pos;\n      if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n      if (this.state.pos >= this.length) {\n        this.finishToken(137);\n        return;\n      }\n      this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n    }\n  }, {\n    key: \"skipBlockComment\",\n    value: function skipBlockComment(commentEnd) {\n      var startLoc;\n      if (!this.isLookahead) startLoc = this.state.curPosition();\n      var start = this.state.pos;\n      var end = this.input.indexOf(commentEnd, start + 2);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition()\n        });\n      }\n      this.state.pos = end + commentEnd.length;\n      lineBreakG.lastIndex = start + 2;\n      while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n        ++this.state.curLine;\n        this.state.lineStart = lineBreakG.lastIndex;\n      }\n      if (this.isLookahead) return;\n      var comment = {\n        type: \"CommentBlock\",\n        value: this.input.slice(start + 2, end),\n        start: start,\n        end: end + commentEnd.length,\n        loc: new SourceLocation(startLoc, this.state.curPosition())\n      };\n      if (this.options.tokens) this.pushToken(comment);\n      return comment;\n    }\n  }, {\n    key: \"skipLineComment\",\n    value: function skipLineComment(startSkip) {\n      var start = this.state.pos;\n      var startLoc;\n      if (!this.isLookahead) startLoc = this.state.curPosition();\n      var ch = this.input.charCodeAt(this.state.pos += startSkip);\n      if (this.state.pos < this.length) {\n        while (!isNewLine(ch) && ++this.state.pos < this.length) {\n          ch = this.input.charCodeAt(this.state.pos);\n        }\n      }\n      if (this.isLookahead) return;\n      var end = this.state.pos;\n      var value = this.input.slice(start + startSkip, end);\n      var comment = {\n        type: \"CommentLine\",\n        value: value,\n        start: start,\n        end: end,\n        loc: new SourceLocation(startLoc, this.state.curPosition())\n      };\n      if (this.options.tokens) this.pushToken(comment);\n      return comment;\n    }\n  }, {\n    key: \"skipSpace\",\n    value: function skipSpace() {\n      var spaceStart = this.state.pos;\n      var comments = [];\n      loop: while (this.state.pos < this.length) {\n        var ch = this.input.charCodeAt(this.state.pos);\n        switch (ch) {\n          case 32:\n          case 160:\n          case 9:\n            ++this.state.pos;\n            break;\n          case 13:\n            if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n              ++this.state.pos;\n            }\n          case 10:\n          case 8232:\n          case 8233:\n            ++this.state.pos;\n            ++this.state.curLine;\n            this.state.lineStart = this.state.pos;\n            break;\n          case 47:\n            switch (this.input.charCodeAt(this.state.pos + 1)) {\n              case 42:\n                {\n                  var comment = this.skipBlockComment(\"*/\");\n                  if (comment !== undefined) {\n                    this.addComment(comment);\n                    if (this.options.attachComment) comments.push(comment);\n                  }\n                  break;\n                }\n              case 47:\n                {\n                  var _comment = this.skipLineComment(2);\n                  if (_comment !== undefined) {\n                    this.addComment(_comment);\n                    if (this.options.attachComment) comments.push(_comment);\n                  }\n                  break;\n                }\n              default:\n                break loop;\n            }\n            break;\n          default:\n            if (isWhitespace(ch)) {\n              ++this.state.pos;\n            } else if (ch === 45 && !this.inModule && this.options.annexB) {\n              var pos = this.state.pos;\n              if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n                var _comment2 = this.skipLineComment(3);\n                if (_comment2 !== undefined) {\n                  this.addComment(_comment2);\n                  if (this.options.attachComment) comments.push(_comment2);\n                }\n              } else {\n                break loop;\n              }\n            } else if (ch === 60 && !this.inModule && this.options.annexB) {\n              var _pos = this.state.pos;\n              if (this.input.charCodeAt(_pos + 1) === 33 && this.input.charCodeAt(_pos + 2) === 45 && this.input.charCodeAt(_pos + 3) === 45) {\n                var _comment3 = this.skipLineComment(4);\n                if (_comment3 !== undefined) {\n                  this.addComment(_comment3);\n                  if (this.options.attachComment) comments.push(_comment3);\n                }\n              } else {\n                break loop;\n              }\n            } else {\n              break loop;\n            }\n        }\n      }\n      if (comments.length > 0) {\n        var end = this.state.pos;\n        var commentWhitespace = {\n          start: spaceStart,\n          end: end,\n          comments: comments,\n          leadingNode: null,\n          trailingNode: null,\n          containingNode: null\n        };\n        this.state.commentStack.push(commentWhitespace);\n      }\n    }\n  }, {\n    key: \"finishToken\",\n    value: function finishToken(type, val) {\n      this.state.end = this.state.pos;\n      this.state.endLoc = this.state.curPosition();\n      var prevType = this.state.type;\n      this.state.type = type;\n      this.state.value = val;\n      if (!this.isLookahead) {\n        this.updateContext(prevType);\n      }\n    }\n  }, {\n    key: \"replaceToken\",\n    value: function replaceToken(type) {\n      this.state.type = type;\n      this.updateContext();\n    }\n  }, {\n    key: \"readToken_numberSign\",\n    value: function readToken_numberSign() {\n      if (this.state.pos === 0 && this.readToken_interpreter()) {\n        return;\n      }\n      var nextPos = this.state.pos + 1;\n      var next = this.codePointAtPos(nextPos);\n      if (next >= 48 && next <= 57) {\n        throw this.raise(Errors.UnexpectedDigitAfterHash, {\n          at: this.state.curPosition()\n        });\n      }\n      if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n        this.expectPlugin(\"recordAndTuple\");\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\") {\n          throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, {\n            at: this.state.curPosition()\n          });\n        }\n        this.state.pos += 2;\n        if (next === 123) {\n          this.finishToken(7);\n        } else {\n          this.finishToken(1);\n        }\n      } else if (isIdentifierStart(next)) {\n        ++this.state.pos;\n        this.finishToken(136, this.readWord1(next));\n      } else if (next === 92) {\n        ++this.state.pos;\n        this.finishToken(136, this.readWord1());\n      } else {\n        this.finishOp(27, 1);\n      }\n    }\n  }, {\n    key: \"readToken_dot\",\n    value: function readToken_dot() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n      if (next >= 48 && next <= 57) {\n        this.readNumber(true);\n        return;\n      }\n      if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n        this.state.pos += 3;\n        this.finishToken(21);\n      } else {\n        ++this.state.pos;\n        this.finishToken(16);\n      }\n    }\n  }, {\n    key: \"readToken_slash\",\n    value: function readToken_slash() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n      if (next === 61) {\n        this.finishOp(31, 2);\n      } else {\n        this.finishOp(56, 1);\n      }\n    }\n  }, {\n    key: \"readToken_interpreter\",\n    value: function readToken_interpreter() {\n      if (this.state.pos !== 0 || this.length < 2) return false;\n      var ch = this.input.charCodeAt(this.state.pos + 1);\n      if (ch !== 33) return false;\n      var start = this.state.pos;\n      this.state.pos += 1;\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n      var value = this.input.slice(start + 2, this.state.pos);\n      this.finishToken(28, value);\n      return true;\n    }\n  }, {\n    key: \"readToken_mult_modulo\",\n    value: function readToken_mult_modulo(code) {\n      var type = code === 42 ? 55 : 54;\n      var width = 1;\n      var next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === 42 && next === 42) {\n        width++;\n        next = this.input.charCodeAt(this.state.pos + 2);\n        type = 57;\n      }\n      if (next === 61 && !this.state.inType) {\n        width++;\n        type = code === 37 ? 33 : 30;\n      }\n      this.finishOp(type, width);\n    }\n  }, {\n    key: \"readToken_pipe_amp\",\n    value: function readToken_pipe_amp(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n      if (next === code) {\n        if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n          this.finishOp(30, 3);\n        } else {\n          this.finishOp(code === 124 ? 41 : 42, 2);\n        }\n        return;\n      }\n      if (code === 124) {\n        if (next === 62) {\n          this.finishOp(39, 2);\n          return;\n        }\n        if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n              at: this.state.curPosition()\n            });\n          }\n          this.state.pos += 2;\n          this.finishToken(9);\n          return;\n        }\n        if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n              at: this.state.curPosition()\n            });\n          }\n          this.state.pos += 2;\n          this.finishToken(4);\n          return;\n        }\n      }\n      if (next === 61) {\n        this.finishOp(30, 2);\n        return;\n      }\n      this.finishOp(code === 124 ? 43 : 45, 1);\n    }\n  }, {\n    key: \"readToken_caret\",\n    value: function readToken_caret() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n      if (next === 61 && !this.state.inType) {\n        this.finishOp(32, 2);\n      } else if (next === 94 && this.hasPlugin([\"pipelineOperator\", {\n        proposal: \"hack\",\n        topicToken: \"^^\"\n      }])) {\n        this.finishOp(37, 2);\n        var lookaheadCh = this.input.codePointAt(this.state.pos);\n        if (lookaheadCh === 94) {\n          this.unexpected();\n        }\n      } else {\n        this.finishOp(44, 1);\n      }\n    }\n  }, {\n    key: \"readToken_atSign\",\n    value: function readToken_atSign() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n      if (next === 64 && this.hasPlugin([\"pipelineOperator\", {\n        proposal: \"hack\",\n        topicToken: \"@@\"\n      }])) {\n        this.finishOp(38, 2);\n      } else {\n        this.finishOp(26, 1);\n      }\n    }\n  }, {\n    key: \"readToken_plus_min\",\n    value: function readToken_plus_min(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n      if (next === code) {\n        this.finishOp(34, 2);\n        return;\n      }\n      if (next === 61) {\n        this.finishOp(30, 2);\n      } else {\n        this.finishOp(53, 1);\n      }\n    }\n  }, {\n    key: \"readToken_lt\",\n    value: function readToken_lt() {\n      var pos = this.state.pos;\n      var next = this.input.charCodeAt(pos + 1);\n      if (next === 60) {\n        if (this.input.charCodeAt(pos + 2) === 61) {\n          this.finishOp(30, 3);\n          return;\n        }\n        this.finishOp(51, 2);\n        return;\n      }\n      if (next === 61) {\n        this.finishOp(49, 2);\n        return;\n      }\n      this.finishOp(47, 1);\n    }\n  }, {\n    key: \"readToken_gt\",\n    value: function readToken_gt() {\n      var pos = this.state.pos;\n      var next = this.input.charCodeAt(pos + 1);\n      if (next === 62) {\n        var size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;\n        if (this.input.charCodeAt(pos + size) === 61) {\n          this.finishOp(30, size + 1);\n          return;\n        }\n        this.finishOp(52, size);\n        return;\n      }\n      if (next === 61) {\n        this.finishOp(49, 2);\n        return;\n      }\n      this.finishOp(48, 1);\n    }\n  }, {\n    key: \"readToken_eq_excl\",\n    value: function readToken_eq_excl(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n      if (next === 61) {\n        this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n        return;\n      }\n      if (code === 61 && next === 62) {\n        this.state.pos += 2;\n        this.finishToken(19);\n        return;\n      }\n      this.finishOp(code === 61 ? 29 : 35, 1);\n    }\n  }, {\n    key: \"readToken_question\",\n    value: function readToken_question() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n      var next2 = this.input.charCodeAt(this.state.pos + 2);\n      if (next === 63) {\n        if (next2 === 61) {\n          this.finishOp(30, 3);\n        } else {\n          this.finishOp(40, 2);\n        }\n      } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n        this.state.pos += 2;\n        this.finishToken(18);\n      } else {\n        ++this.state.pos;\n        this.finishToken(17);\n      }\n    }\n  }, {\n    key: \"getTokenFromCode\",\n    value: function getTokenFromCode(code) {\n      switch (code) {\n        case 46:\n          this.readToken_dot();\n          return;\n        case 40:\n          ++this.state.pos;\n          this.finishToken(10);\n          return;\n        case 41:\n          ++this.state.pos;\n          this.finishToken(11);\n          return;\n        case 59:\n          ++this.state.pos;\n          this.finishToken(13);\n          return;\n        case 44:\n          ++this.state.pos;\n          this.finishToken(12);\n          return;\n        case 91:\n          if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n            if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n              throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, {\n                at: this.state.curPosition()\n              });\n            }\n            this.state.pos += 2;\n            this.finishToken(2);\n          } else {\n            ++this.state.pos;\n            this.finishToken(0);\n          }\n          return;\n        case 93:\n          ++this.state.pos;\n          this.finishToken(3);\n          return;\n        case 123:\n          if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n            if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n              throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, {\n                at: this.state.curPosition()\n              });\n            }\n            this.state.pos += 2;\n            this.finishToken(6);\n          } else {\n            ++this.state.pos;\n            this.finishToken(5);\n          }\n          return;\n        case 125:\n          ++this.state.pos;\n          this.finishToken(8);\n          return;\n        case 58:\n          if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n            this.finishOp(15, 2);\n          } else {\n            ++this.state.pos;\n            this.finishToken(14);\n          }\n          return;\n        case 63:\n          this.readToken_question();\n          return;\n        case 96:\n          this.readTemplateToken();\n          return;\n        case 48:\n          {\n            var next = this.input.charCodeAt(this.state.pos + 1);\n            if (next === 120 || next === 88) {\n              this.readRadixNumber(16);\n              return;\n            }\n            if (next === 111 || next === 79) {\n              this.readRadixNumber(8);\n              return;\n            }\n            if (next === 98 || next === 66) {\n              this.readRadixNumber(2);\n              return;\n            }\n          }\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n          this.readNumber(false);\n          return;\n        case 34:\n        case 39:\n          this.readString(code);\n          return;\n        case 47:\n          this.readToken_slash();\n          return;\n        case 37:\n        case 42:\n          this.readToken_mult_modulo(code);\n          return;\n        case 124:\n        case 38:\n          this.readToken_pipe_amp(code);\n          return;\n        case 94:\n          this.readToken_caret();\n          return;\n        case 43:\n        case 45:\n          this.readToken_plus_min(code);\n          return;\n        case 60:\n          this.readToken_lt();\n          return;\n        case 62:\n          this.readToken_gt();\n          return;\n        case 61:\n        case 33:\n          this.readToken_eq_excl(code);\n          return;\n        case 126:\n          this.finishOp(36, 1);\n          return;\n        case 64:\n          this.readToken_atSign();\n          return;\n        case 35:\n          this.readToken_numberSign();\n          return;\n        case 92:\n          this.readWord();\n          return;\n        default:\n          if (isIdentifierStart(code)) {\n            this.readWord(code);\n            return;\n          }\n      }\n      throw this.raise(Errors.InvalidOrUnexpectedToken, {\n        at: this.state.curPosition(),\n        unexpected: String.fromCodePoint(code)\n      });\n    }\n  }, {\n    key: \"finishOp\",\n    value: function finishOp(type, size) {\n      var str = this.input.slice(this.state.pos, this.state.pos + size);\n      this.state.pos += size;\n      this.finishToken(type, str);\n    }\n  }, {\n    key: \"readRegexp\",\n    value: function readRegexp() {\n      var startLoc = this.state.startLoc;\n      var start = this.state.start + 1;\n      var escaped, inClass;\n      var pos = this.state.pos;\n      for (;; ++pos) {\n        if (pos >= this.length) {\n          throw this.raise(Errors.UnterminatedRegExp, {\n            at: createPositionWithColumnOffset(startLoc, 1)\n          });\n        }\n        var ch = this.input.charCodeAt(pos);\n        if (isNewLine(ch)) {\n          throw this.raise(Errors.UnterminatedRegExp, {\n            at: createPositionWithColumnOffset(startLoc, 1)\n          });\n        }\n        if (escaped) {\n          escaped = false;\n        } else {\n          if (ch === 91) {\n            inClass = true;\n          } else if (ch === 93 && inClass) {\n            inClass = false;\n          } else if (ch === 47 && !inClass) {\n            break;\n          }\n          escaped = ch === 92;\n        }\n      }\n      var content = this.input.slice(start, pos);\n      ++pos;\n      var mods = \"\";\n      var nextPos = function nextPos() {\n        return createPositionWithColumnOffset(startLoc, pos + 2 - start);\n      };\n      while (pos < this.length) {\n        var cp = this.codePointAtPos(pos);\n        var char = String.fromCharCode(cp);\n        if (VALID_REGEX_FLAGS.has(cp)) {\n          if (cp === 118) {\n            if (mods.includes(\"u\")) {\n              this.raise(Errors.IncompatibleRegExpUVFlags, {\n                at: nextPos()\n              });\n            }\n          } else if (cp === 117) {\n            if (mods.includes(\"v\")) {\n              this.raise(Errors.IncompatibleRegExpUVFlags, {\n                at: nextPos()\n              });\n            }\n          }\n          if (mods.includes(char)) {\n            this.raise(Errors.DuplicateRegExpFlags, {\n              at: nextPos()\n            });\n          }\n        } else if (isIdentifierChar(cp) || cp === 92) {\n          this.raise(Errors.MalformedRegExpFlags, {\n            at: nextPos()\n          });\n        } else {\n          break;\n        }\n        ++pos;\n        mods += char;\n      }\n      this.state.pos = pos;\n      this.finishToken(135, {\n        pattern: content,\n        flags: mods\n      });\n    }\n  }, {\n    key: \"readInt\",\n    value: function readInt(radix, len) {\n      var forceLen = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var allowNumSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var _readInt3 = _readInt2(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false),\n        n = _readInt3.n,\n        pos = _readInt3.pos;\n      this.state.pos = pos;\n      return n;\n    }\n  }, {\n    key: \"readRadixNumber\",\n    value: function readRadixNumber(radix) {\n      var startLoc = this.state.curPosition();\n      var isBigInt = false;\n      this.state.pos += 2;\n      var val = this.readInt(radix);\n      if (val == null) {\n        this.raise(Errors.InvalidDigit, {\n          at: createPositionWithColumnOffset(startLoc, 2),\n          radix: radix\n        });\n      }\n      var next = this.input.charCodeAt(this.state.pos);\n      if (next === 110) {\n        ++this.state.pos;\n        isBigInt = true;\n      } else if (next === 109) {\n        throw this.raise(Errors.InvalidDecimal, {\n          at: startLoc\n        });\n      }\n      if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n        throw this.raise(Errors.NumberIdentifier, {\n          at: this.state.curPosition()\n        });\n      }\n      if (isBigInt) {\n        var str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, \"\");\n        this.finishToken(133, str);\n        return;\n      }\n      this.finishToken(132, val);\n    }\n  }, {\n    key: \"readNumber\",\n    value: function readNumber(startsWithDot) {\n      var start = this.state.pos;\n      var startLoc = this.state.curPosition();\n      var isFloat = false;\n      var isBigInt = false;\n      var isDecimal = false;\n      var hasExponent = false;\n      var isOctal = false;\n      if (!startsWithDot && this.readInt(10) === null) {\n        this.raise(Errors.InvalidNumber, {\n          at: this.state.curPosition()\n        });\n      }\n      var hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n      if (hasLeadingZero) {\n        var integer = this.input.slice(start, this.state.pos);\n        this.recordStrictModeErrors(Errors.StrictOctalLiteral, {\n          at: startLoc\n        });\n        if (!this.state.strict) {\n          var underscorePos = integer.indexOf(\"_\");\n          if (underscorePos > 0) {\n            this.raise(Errors.ZeroDigitNumericSeparator, {\n              at: createPositionWithColumnOffset(startLoc, underscorePos)\n            });\n          }\n        }\n        isOctal = hasLeadingZero && !/[89]/.test(integer);\n      }\n      var next = this.input.charCodeAt(this.state.pos);\n      if (next === 46 && !isOctal) {\n        ++this.state.pos;\n        this.readInt(10);\n        isFloat = true;\n        next = this.input.charCodeAt(this.state.pos);\n      }\n      if ((next === 69 || next === 101) && !isOctal) {\n        next = this.input.charCodeAt(++this.state.pos);\n        if (next === 43 || next === 45) {\n          ++this.state.pos;\n        }\n        if (this.readInt(10) === null) {\n          this.raise(Errors.InvalidOrMissingExponent, {\n            at: startLoc\n          });\n        }\n        isFloat = true;\n        hasExponent = true;\n        next = this.input.charCodeAt(this.state.pos);\n      }\n      if (next === 110) {\n        if (isFloat || hasLeadingZero) {\n          this.raise(Errors.InvalidBigIntLiteral, {\n            at: startLoc\n          });\n        }\n        ++this.state.pos;\n        isBigInt = true;\n      }\n      if (next === 109) {\n        this.expectPlugin(\"decimal\", this.state.curPosition());\n        if (hasExponent || hasLeadingZero) {\n          this.raise(Errors.InvalidDecimal, {\n            at: startLoc\n          });\n        }\n        ++this.state.pos;\n        isDecimal = true;\n      }\n      if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n        throw this.raise(Errors.NumberIdentifier, {\n          at: this.state.curPosition()\n        });\n      }\n      var str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n      if (isBigInt) {\n        this.finishToken(133, str);\n        return;\n      }\n      if (isDecimal) {\n        this.finishToken(134, str);\n        return;\n      }\n      var val = isOctal ? parseInt(str, 8) : parseFloat(str);\n      this.finishToken(132, val);\n    }\n  }, {\n    key: \"readCodePoint\",\n    value: function readCodePoint(throwOnInvalid) {\n      var _readCodePoint3 = _readCodePoint2(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint),\n        code = _readCodePoint3.code,\n        pos = _readCodePoint3.pos;\n      this.state.pos = pos;\n      return code;\n    }\n  }, {\n    key: \"readString\",\n    value: function readString(quote) {\n      var _readStringContents = readStringContents(quote === 34 ? \"double\" : \"single\", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string),\n        str = _readStringContents.str,\n        pos = _readStringContents.pos,\n        curLine = _readStringContents.curLine,\n        lineStart = _readStringContents.lineStart;\n      this.state.pos = pos + 1;\n      this.state.lineStart = lineStart;\n      this.state.curLine = curLine;\n      this.finishToken(131, str);\n    }\n  }, {\n    key: \"readTemplateContinuation\",\n    value: function readTemplateContinuation() {\n      if (!this.match(8)) {\n        this.unexpected(null, 8);\n      }\n      this.state.pos--;\n      this.readTemplateToken();\n    }\n  }, {\n    key: \"readTemplateToken\",\n    value: function readTemplateToken() {\n      var opening = this.input[this.state.pos];\n      var _readStringContents2 = readStringContents(\"template\", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template),\n        str = _readStringContents2.str,\n        firstInvalidLoc = _readStringContents2.firstInvalidLoc,\n        pos = _readStringContents2.pos,\n        curLine = _readStringContents2.curLine,\n        lineStart = _readStringContents2.lineStart;\n      this.state.pos = pos + 1;\n      this.state.lineStart = lineStart;\n      this.state.curLine = curLine;\n      if (firstInvalidLoc) {\n        this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, firstInvalidLoc.pos);\n      }\n      if (this.input.codePointAt(pos) === 96) {\n        this.finishToken(24, firstInvalidLoc ? null : opening + str + \"`\");\n      } else {\n        this.state.pos++;\n        this.finishToken(25, firstInvalidLoc ? null : opening + str + \"${\");\n      }\n    }\n  }, {\n    key: \"recordStrictModeErrors\",\n    value: function recordStrictModeErrors(toParseError, _ref47) {\n      var at = _ref47.at;\n      var index = at.index;\n      if (this.state.strict && !this.state.strictErrors.has(index)) {\n        this.raise(toParseError, {\n          at: at\n        });\n      } else {\n        this.state.strictErrors.set(index, [toParseError, at]);\n      }\n    }\n  }, {\n    key: \"readWord1\",\n    value: function readWord1(firstCode) {\n      this.state.containsEsc = false;\n      var word = \"\";\n      var start = this.state.pos;\n      var chunkStart = this.state.pos;\n      if (firstCode !== undefined) {\n        this.state.pos += firstCode <= 0xffff ? 1 : 2;\n      }\n      while (this.state.pos < this.length) {\n        var ch = this.codePointAtPos(this.state.pos);\n        if (isIdentifierChar(ch)) {\n          this.state.pos += ch <= 0xffff ? 1 : 2;\n        } else if (ch === 92) {\n          this.state.containsEsc = true;\n          word += this.input.slice(chunkStart, this.state.pos);\n          var escStart = this.state.curPosition();\n          var identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n          if (this.input.charCodeAt(++this.state.pos) !== 117) {\n            this.raise(Errors.MissingUnicodeEscape, {\n              at: this.state.curPosition()\n            });\n            chunkStart = this.state.pos - 1;\n            continue;\n          }\n          ++this.state.pos;\n          var esc = this.readCodePoint(true);\n          if (esc !== null) {\n            if (!identifierCheck(esc)) {\n              this.raise(Errors.EscapedCharNotAnIdentifier, {\n                at: escStart\n              });\n            }\n            word += String.fromCodePoint(esc);\n          }\n          chunkStart = this.state.pos;\n        } else {\n          break;\n        }\n      }\n      return word + this.input.slice(chunkStart, this.state.pos);\n    }\n  }, {\n    key: \"readWord\",\n    value: function readWord(firstCode) {\n      var word = this.readWord1(firstCode);\n      var type = keywords$1.get(word);\n      if (type !== undefined) {\n        this.finishToken(type, tokenLabelName(type));\n      } else {\n        this.finishToken(130, word);\n      }\n    }\n  }, {\n    key: \"checkKeywordEscapes\",\n    value: function checkKeywordEscapes() {\n      var type = this.state.type;\n      if (tokenIsKeyword(type) && this.state.containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.startLoc,\n          reservedWord: tokenLabelName(type)\n        });\n      }\n    }\n  }, {\n    key: \"raise\",\n    value: function raise(toParseError, raiseProperties) {\n      var at = raiseProperties.at,\n        details = _objectWithoutPropertiesLoose(raiseProperties, _excluded);\n      var loc = at instanceof Position ? at : at.loc.start;\n      var error = toParseError({\n        loc: loc,\n        details: details\n      });\n      if (!this.options.errorRecovery) throw error;\n      if (!this.isLookahead) this.state.errors.push(error);\n      return error;\n    }\n  }, {\n    key: \"raiseOverwrite\",\n    value: function raiseOverwrite(toParseError, raiseProperties) {\n      var at = raiseProperties.at,\n        details = _objectWithoutPropertiesLoose(raiseProperties, _excluded2);\n      var loc = at instanceof Position ? at : at.loc.start;\n      var pos = loc.index;\n      var errors = this.state.errors;\n      for (var i = errors.length - 1; i >= 0; i--) {\n        var error = errors[i];\n        if (error.loc.index === pos) {\n          return errors[i] = toParseError({\n            loc: loc,\n            details: details\n          });\n        }\n        if (error.loc.index < pos) break;\n      }\n      return this.raise(toParseError, raiseProperties);\n    }\n  }, {\n    key: \"updateContext\",\n    value: function updateContext(prevType) {}\n  }, {\n    key: \"unexpected\",\n    value: function unexpected(loc, type) {\n      throw this.raise(Errors.UnexpectedToken, {\n        expected: type ? tokenLabelName(type) : null,\n        at: loc != null ? loc : this.state.startLoc\n      });\n    }\n  }, {\n    key: \"expectPlugin\",\n    value: function expectPlugin(pluginName, loc) {\n      if (this.hasPlugin(pluginName)) {\n        return true;\n      }\n      throw this.raise(Errors.MissingPlugin, {\n        at: loc != null ? loc : this.state.startLoc,\n        missingPlugin: [pluginName]\n      });\n    }\n  }, {\n    key: \"expectOnePlugin\",\n    value: function expectOnePlugin(pluginNames) {\n      var _this6 = this;\n      if (!pluginNames.some(function (name) {\n        return _this6.hasPlugin(name);\n      })) {\n        throw this.raise(Errors.MissingOneOfPlugins, {\n          at: this.state.startLoc,\n          missingPlugin: pluginNames\n        });\n      }\n    }\n  }, {\n    key: \"errorBuilder\",\n    value: function errorBuilder(error) {\n      var _this7 = this;\n      return function (pos, lineStart, curLine) {\n        _this7.raise(error, {\n          at: buildPosition(pos, lineStart, curLine)\n        });\n      };\n    }\n  }]);\n  return Tokenizer;\n}(CommentsParser);\nvar ClassScope = /*#__PURE__*/_createClass(function ClassScope() {\n  _classCallCheck(this, ClassScope);\n  this.privateNames = new Set();\n  this.loneAccessors = new Map();\n  this.undefinedPrivateNames = new Map();\n});\nvar ClassScopeHandler = /*#__PURE__*/function () {\n  function ClassScopeHandler(parser) {\n    _classCallCheck(this, ClassScopeHandler);\n    this.parser = void 0;\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.parser = parser;\n  }\n  _createClass(ClassScopeHandler, [{\n    key: \"current\",\n    value: function current() {\n      return this.stack[this.stack.length - 1];\n    }\n  }, {\n    key: \"enter\",\n    value: function enter() {\n      this.stack.push(new ClassScope());\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      var oldClassScope = this.stack.pop();\n      var current = this.current();\n      for (var _i3 = 0, _Array$from = Array.from(oldClassScope.undefinedPrivateNames); _i3 < _Array$from.length; _i3++) {\n        var _Array$from$_i = _slicedToArray(_Array$from[_i3], 2),\n          name = _Array$from$_i[0],\n          loc = _Array$from$_i[1];\n        if (current) {\n          if (!current.undefinedPrivateNames.has(name)) {\n            current.undefinedPrivateNames.set(name, loc);\n          }\n        } else {\n          this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n            at: loc,\n            identifierName: name\n          });\n        }\n      }\n    }\n  }, {\n    key: \"declarePrivateName\",\n    value: function declarePrivateName(name, elementType, loc) {\n      var _this$current = this.current(),\n        privateNames = _this$current.privateNames,\n        loneAccessors = _this$current.loneAccessors,\n        undefinedPrivateNames = _this$current.undefinedPrivateNames;\n      var redefined = privateNames.has(name);\n      if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n        var accessor = redefined && loneAccessors.get(name);\n        if (accessor) {\n          var oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n          var newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n          var oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n          var newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n          redefined = oldKind === newKind || oldStatic !== newStatic;\n          if (!redefined) loneAccessors.delete(name);\n        } else if (!redefined) {\n          loneAccessors.set(name, elementType);\n        }\n      }\n      if (redefined) {\n        this.parser.raise(Errors.PrivateNameRedeclaration, {\n          at: loc,\n          identifierName: name\n        });\n      }\n      privateNames.add(name);\n      undefinedPrivateNames.delete(name);\n    }\n  }, {\n    key: \"usePrivateName\",\n    value: function usePrivateName(name, loc) {\n      var classScope;\n      var _iterator = _createForOfIteratorHelper(this.stack),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          classScope = _step.value;\n          if (classScope.privateNames.has(name)) return;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (classScope) {\n        classScope.undefinedPrivateNames.set(name, loc);\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name\n        });\n      }\n    }\n  }]);\n  return ClassScopeHandler;\n}();\nvar kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\nvar ExpressionScope = /*#__PURE__*/function () {\n  function ExpressionScope() {\n    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : kExpression;\n    _classCallCheck(this, ExpressionScope);\n    this.type = void 0;\n    this.type = type;\n  }\n  _createClass(ExpressionScope, [{\n    key: \"canBeArrowParameterDeclaration\",\n    value: function canBeArrowParameterDeclaration() {\n      return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n    }\n  }, {\n    key: \"isCertainlyParameterDeclaration\",\n    value: function isCertainlyParameterDeclaration() {\n      return this.type === kParameterDeclaration;\n    }\n  }]);\n  return ExpressionScope;\n}();\nvar ArrowHeadParsingScope = /*#__PURE__*/function (_ExpressionScope) {\n  _inherits(ArrowHeadParsingScope, _ExpressionScope);\n  var _super6 = _createSuper(ArrowHeadParsingScope);\n  function ArrowHeadParsingScope(type) {\n    var _this8;\n    _classCallCheck(this, ArrowHeadParsingScope);\n    _this8 = _super6.call(this, type);\n    _this8.declarationErrors = new Map();\n    return _this8;\n  }\n  _createClass(ArrowHeadParsingScope, [{\n    key: \"recordDeclarationError\",\n    value: function recordDeclarationError(ParsingErrorClass, _ref48) {\n      var at = _ref48.at;\n      var index = at.index;\n      this.declarationErrors.set(index, [ParsingErrorClass, at]);\n    }\n  }, {\n    key: \"clearDeclarationError\",\n    value: function clearDeclarationError(index) {\n      this.declarationErrors.delete(index);\n    }\n  }, {\n    key: \"iterateErrors\",\n    value: function iterateErrors(iterator) {\n      this.declarationErrors.forEach(iterator);\n    }\n  }]);\n  return ArrowHeadParsingScope;\n}(ExpressionScope);\nvar ExpressionScopeHandler = /*#__PURE__*/function () {\n  function ExpressionScopeHandler(parser) {\n    _classCallCheck(this, ExpressionScopeHandler);\n    this.parser = void 0;\n    this.stack = [new ExpressionScope()];\n    this.parser = parser;\n  }\n  _createClass(ExpressionScopeHandler, [{\n    key: \"enter\",\n    value: function enter(scope) {\n      this.stack.push(scope);\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      this.stack.pop();\n    }\n  }, {\n    key: \"recordParameterInitializerError\",\n    value: function recordParameterInitializerError(toParseError, _ref49) {\n      var node = _ref49.at;\n      var origin = {\n        at: node.loc.start\n      };\n      var stack = this.stack;\n      var i = stack.length - 1;\n      var scope = stack[i];\n      while (!scope.isCertainlyParameterDeclaration()) {\n        if (scope.canBeArrowParameterDeclaration()) {\n          scope.recordDeclarationError(toParseError, origin);\n        } else {\n          return;\n        }\n        scope = stack[--i];\n      }\n      this.parser.raise(toParseError, origin);\n    }\n  }, {\n    key: \"recordArrowParameterBindingError\",\n    value: function recordArrowParameterBindingError(error, _ref50) {\n      var node = _ref50.at;\n      var stack = this.stack;\n      var scope = stack[stack.length - 1];\n      var origin = {\n        at: node.loc.start\n      };\n      if (scope.isCertainlyParameterDeclaration()) {\n        this.parser.raise(error, origin);\n      } else if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(error, origin);\n      } else {\n        return;\n      }\n    }\n  }, {\n    key: \"recordAsyncArrowParametersError\",\n    value: function recordAsyncArrowParametersError(_ref51) {\n      var at = _ref51.at;\n      var stack = this.stack;\n      var i = stack.length - 1;\n      var scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n          scope.recordDeclarationError(Errors.AwaitBindingIdentifier, {\n            at: at\n          });\n        }\n        scope = stack[--i];\n      }\n    }\n  }, {\n    key: \"validateAsPattern\",\n    value: function validateAsPattern() {\n      var _this9 = this;\n      var stack = this.stack;\n      var currentScope = stack[stack.length - 1];\n      if (!currentScope.canBeArrowParameterDeclaration()) return;\n      currentScope.iterateErrors(function (_ref52) {\n        var _ref53 = _slicedToArray(_ref52, 2),\n          toParseError = _ref53[0],\n          loc = _ref53[1];\n        _this9.parser.raise(toParseError, {\n          at: loc\n        });\n        var i = stack.length - 2;\n        var scope = stack[i];\n        while (scope.canBeArrowParameterDeclaration()) {\n          scope.clearDeclarationError(loc.index);\n          scope = stack[--i];\n        }\n      });\n    }\n  }]);\n  return ExpressionScopeHandler;\n}();\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\nvar PARAM = 0,\n  PARAM_YIELD = 1,\n  PARAM_AWAIT = 2,\n  PARAM_RETURN = 4,\n  PARAM_IN = 8;\nvar ProductionParameterHandler = /*#__PURE__*/function () {\n  function ProductionParameterHandler() {\n    _classCallCheck(this, ProductionParameterHandler);\n    this.stacks = [];\n  }\n  _createClass(ProductionParameterHandler, [{\n    key: \"enter\",\n    value: function enter(flags) {\n      this.stacks.push(flags);\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      this.stacks.pop();\n    }\n  }, {\n    key: \"currentFlags\",\n    value: function currentFlags() {\n      return this.stacks[this.stacks.length - 1];\n    }\n  }, {\n    key: \"hasAwait\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_AWAIT) > 0;\n    }\n  }, {\n    key: \"hasYield\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_YIELD) > 0;\n    }\n  }, {\n    key: \"hasReturn\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_RETURN) > 0;\n    }\n  }, {\n    key: \"hasIn\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_IN) > 0;\n    }\n  }]);\n  return ProductionParameterHandler;\n}();\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\nvar UtilParser = /*#__PURE__*/function (_Tokenizer) {\n  _inherits(UtilParser, _Tokenizer);\n  var _super7 = _createSuper(UtilParser);\n  function UtilParser() {\n    _classCallCheck(this, UtilParser);\n    return _super7.apply(this, arguments);\n  }\n  _createClass(UtilParser, [{\n    key: \"addExtra\",\n    value: function addExtra(node, key, value) {\n      var enumerable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      if (!node) return;\n      var extra = node.extra = node.extra || {};\n      if (enumerable) {\n        extra[key] = value;\n      } else {\n        Object.defineProperty(extra, key, {\n          enumerable: enumerable,\n          value: value\n        });\n      }\n    }\n  }, {\n    key: \"isContextual\",\n    value: function isContextual(token) {\n      return this.state.type === token && !this.state.containsEsc;\n    }\n  }, {\n    key: \"isUnparsedContextual\",\n    value: function isUnparsedContextual(nameStart, name) {\n      var nameEnd = nameStart + name.length;\n      if (this.input.slice(nameStart, nameEnd) === name) {\n        var nextCh = this.input.charCodeAt(nameEnd);\n        return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n      }\n      return false;\n    }\n  }, {\n    key: \"isLookaheadContextual\",\n    value: function isLookaheadContextual(name) {\n      var next = this.nextTokenStart();\n      return this.isUnparsedContextual(next, name);\n    }\n  }, {\n    key: \"eatContextual\",\n    value: function eatContextual(token) {\n      if (this.isContextual(token)) {\n        this.next();\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"expectContextual\",\n    value: function expectContextual(token, toParseError) {\n      if (!this.eatContextual(token)) {\n        if (toParseError != null) {\n          throw this.raise(toParseError, {\n            at: this.state.startLoc\n          });\n        }\n        this.unexpected(null, token);\n      }\n    }\n  }, {\n    key: \"canInsertSemicolon\",\n    value: function canInsertSemicolon() {\n      return this.match(137) || this.match(8) || this.hasPrecedingLineBreak();\n    }\n  }, {\n    key: \"hasPrecedingLineBreak\",\n    value: function hasPrecedingLineBreak() {\n      return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));\n    }\n  }, {\n    key: \"hasFollowingLineBreak\",\n    value: function hasFollowingLineBreak() {\n      skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n      return skipWhiteSpaceToLineBreak.test(this.input);\n    }\n  }, {\n    key: \"isLineTerminator\",\n    value: function isLineTerminator() {\n      return this.eat(13) || this.canInsertSemicolon();\n    }\n  }, {\n    key: \"semicolon\",\n    value: function semicolon() {\n      var allowAsi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;\n      this.raise(Errors.MissingSemicolon, {\n        at: this.state.lastTokEndLoc\n      });\n    }\n  }, {\n    key: \"expect\",\n    value: function expect(type, loc) {\n      this.eat(type) || this.unexpected(loc, type);\n    }\n  }, {\n    key: \"tryParse\",\n    value: function tryParse(fn) {\n      var oldState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.clone();\n      var abortSignal = {\n        node: null\n      };\n      try {\n        var node = fn(function () {\n          var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n          abortSignal.node = node;\n          throw abortSignal;\n        });\n        if (this.state.errors.length > oldState.errors.length) {\n          var failState = this.state;\n          this.state = oldState;\n          this.state.tokensLength = failState.tokensLength;\n          return {\n            node: node,\n            error: failState.errors[oldState.errors.length],\n            thrown: false,\n            aborted: false,\n            failState: failState\n          };\n        }\n        return {\n          node: node,\n          error: null,\n          thrown: false,\n          aborted: false,\n          failState: null\n        };\n      } catch (error) {\n        var _failState = this.state;\n        this.state = oldState;\n        if (error instanceof SyntaxError) {\n          return {\n            node: null,\n            error: error,\n            thrown: true,\n            aborted: false,\n            failState: _failState\n          };\n        }\n        if (error === abortSignal) {\n          return {\n            node: abortSignal.node,\n            error: null,\n            thrown: false,\n            aborted: true,\n            failState: _failState\n          };\n        }\n        throw error;\n      }\n    }\n  }, {\n    key: \"checkExpressionErrors\",\n    value: function checkExpressionErrors(refExpressionErrors, andThrow) {\n      if (!refExpressionErrors) return false;\n      var shorthandAssignLoc = refExpressionErrors.shorthandAssignLoc,\n        doubleProtoLoc = refExpressionErrors.doubleProtoLoc,\n        privateKeyLoc = refExpressionErrors.privateKeyLoc,\n        optionalParametersLoc = refExpressionErrors.optionalParametersLoc;\n      var hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;\n      if (!andThrow) {\n        return hasErrors;\n      }\n      if (shorthandAssignLoc != null) {\n        this.raise(Errors.InvalidCoverInitializedName, {\n          at: shorthandAssignLoc\n        });\n      }\n      if (doubleProtoLoc != null) {\n        this.raise(Errors.DuplicateProto, {\n          at: doubleProtoLoc\n        });\n      }\n      if (privateKeyLoc != null) {\n        this.raise(Errors.UnexpectedPrivateField, {\n          at: privateKeyLoc\n        });\n      }\n      if (optionalParametersLoc != null) {\n        this.unexpected(optionalParametersLoc);\n      }\n    }\n  }, {\n    key: \"isLiteralPropertyName\",\n    value: function isLiteralPropertyName() {\n      return tokenIsLiteralPropertyName(this.state.type);\n    }\n  }, {\n    key: \"isPrivateName\",\n    value: function isPrivateName(node) {\n      return node.type === \"PrivateName\";\n    }\n  }, {\n    key: \"getPrivateNameSV\",\n    value: function getPrivateNameSV(node) {\n      return node.id.name;\n    }\n  }, {\n    key: \"hasPropertyAsPrivateName\",\n    value: function hasPropertyAsPrivateName(node) {\n      return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n    }\n  }, {\n    key: \"isObjectProperty\",\n    value: function isObjectProperty(node) {\n      return node.type === \"ObjectProperty\";\n    }\n  }, {\n    key: \"isObjectMethod\",\n    value: function isObjectMethod(node) {\n      return node.type === \"ObjectMethod\";\n    }\n  }, {\n    key: \"initializeScopes\",\n    value: function initializeScopes() {\n      var _this10 = this;\n      var inModule = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.sourceType === \"module\";\n      var oldLabels = this.state.labels;\n      this.state.labels = [];\n      var oldExportedIdentifiers = this.exportedIdentifiers;\n      this.exportedIdentifiers = new Set();\n      var oldInModule = this.inModule;\n      this.inModule = inModule;\n      var oldScope = this.scope;\n      var ScopeHandler = this.getScopeHandler();\n      this.scope = new ScopeHandler(this, inModule);\n      var oldProdParam = this.prodParam;\n      this.prodParam = new ProductionParameterHandler();\n      var oldClassScope = this.classScope;\n      this.classScope = new ClassScopeHandler(this);\n      var oldExpressionScope = this.expressionScope;\n      this.expressionScope = new ExpressionScopeHandler(this);\n      return function () {\n        _this10.state.labels = oldLabels;\n        _this10.exportedIdentifiers = oldExportedIdentifiers;\n        _this10.inModule = oldInModule;\n        _this10.scope = oldScope;\n        _this10.prodParam = oldProdParam;\n        _this10.classScope = oldClassScope;\n        _this10.expressionScope = oldExpressionScope;\n      };\n    }\n  }, {\n    key: \"enterInitialScopes\",\n    value: function enterInitialScopes() {\n      var paramFlags = PARAM;\n      if (this.inModule) {\n        paramFlags |= PARAM_AWAIT;\n      }\n      this.scope.enter(SCOPE_PROGRAM);\n      this.prodParam.enter(paramFlags);\n    }\n  }, {\n    key: \"checkDestructuringPrivate\",\n    value: function checkDestructuringPrivate(refExpressionErrors) {\n      var privateKeyLoc = refExpressionErrors.privateKeyLoc;\n      if (privateKeyLoc !== null) {\n        this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n      }\n    }\n  }]);\n  return UtilParser;\n}(Tokenizer);\nvar ExpressionErrors = /*#__PURE__*/_createClass(function ExpressionErrors() {\n  _classCallCheck(this, ExpressionErrors);\n  this.shorthandAssignLoc = null;\n  this.doubleProtoLoc = null;\n  this.privateKeyLoc = null;\n  this.optionalParametersLoc = null;\n});\nvar Node = /*#__PURE__*/_createClass(function Node(parser, pos, loc) {\n  _classCallCheck(this, Node);\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  this.loc = new SourceLocation(loc);\n  if (parser != null && parser.options.ranges) this.range = [pos, 0];\n  if (parser != null && parser.filename) this.loc.filename = parser.filename;\n});\nvar NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    var newNode = new Node(undefined, this.start, this.loc.start);\n    var keys = Object.keys(this);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n    return newNode;\n  };\n}\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\nfunction cloneIdentifier(node) {\n  var type = node.type,\n    start = node.start,\n    end = node.end,\n    loc = node.loc,\n    range = node.range,\n    extra = node.extra,\n    name = node.name;\n  var cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\nfunction cloneStringLiteral(node) {\n  var type = node.type,\n    start = node.start,\n    end = node.end,\n    loc = node.loc,\n    range = node.range,\n    extra = node.extra;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  var cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\nvar NodeUtils = /*#__PURE__*/function (_UtilParser) {\n  _inherits(NodeUtils, _UtilParser);\n  var _super8 = _createSuper(NodeUtils);\n  function NodeUtils() {\n    _classCallCheck(this, NodeUtils);\n    return _super8.apply(this, arguments);\n  }\n  _createClass(NodeUtils, [{\n    key: \"startNode\",\n    value: function startNode() {\n      return new Node(this, this.state.start, this.state.startLoc);\n    }\n  }, {\n    key: \"startNodeAt\",\n    value: function startNodeAt(loc) {\n      return new Node(this, loc.index, loc);\n    }\n  }, {\n    key: \"startNodeAtNode\",\n    value: function startNodeAtNode(type) {\n      return this.startNodeAt(type.loc.start);\n    }\n  }, {\n    key: \"finishNode\",\n    value: function finishNode(node, type) {\n      return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n    }\n  }, {\n    key: \"finishNodeAt\",\n    value: function finishNodeAt(node, type, endLoc) {\n      node.type = type;\n      node.end = endLoc.index;\n      node.loc.end = endLoc;\n      if (this.options.ranges) node.range[1] = endLoc.index;\n      if (this.options.attachComment) this.processComment(node);\n      return node;\n    }\n  }, {\n    key: \"resetStartLocation\",\n    value: function resetStartLocation(node, startLoc) {\n      node.start = startLoc.index;\n      node.loc.start = startLoc;\n      if (this.options.ranges) node.range[0] = startLoc.index;\n    }\n  }, {\n    key: \"resetEndLocation\",\n    value: function resetEndLocation(node) {\n      var endLoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEndLoc;\n      node.end = endLoc.index;\n      node.loc.end = endLoc;\n      if (this.options.ranges) node.range[1] = endLoc.index;\n    }\n  }, {\n    key: \"resetStartLocationFromNode\",\n    value: function resetStartLocationFromNode(node, locationNode) {\n      this.resetStartLocation(node, locationNode.loc.start);\n    }\n  }]);\n  return NodeUtils;\n}(UtilParser);\nvar reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nvar FlowErrors = ParseErrorEnum(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"flow\"])))({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: function AssignReservedType(_ref54) {\n    var reservedType = _ref54.reservedType;\n    return \"Cannot overwrite reserved type \".concat(reservedType, \".\");\n  },\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: function EnumBooleanMemberNotInitialized(_ref55) {\n    var memberName = _ref55.memberName,\n      enumName = _ref55.enumName;\n    return \"Boolean enum members need to be initialized. Use either `\".concat(memberName, \" = true,` or `\").concat(memberName, \" = false,` in enum `\").concat(enumName, \"`.\");\n  },\n  EnumDuplicateMemberName: function EnumDuplicateMemberName(_ref56) {\n    var memberName = _ref56.memberName,\n      enumName = _ref56.enumName;\n    return \"Enum member names need to be unique, but the name `\".concat(memberName, \"` has already been used before in enum `\").concat(enumName, \"`.\");\n  },\n  EnumInconsistentMemberValues: function EnumInconsistentMemberValues(_ref57) {\n    var enumName = _ref57.enumName;\n    return \"Enum `\".concat(enumName, \"` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\");\n  },\n  EnumInvalidExplicitType: function EnumInvalidExplicitType(_ref58) {\n    var invalidEnumType = _ref58.invalidEnumType,\n      enumName = _ref58.enumName;\n    return \"Enum type `\".concat(invalidEnumType, \"` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `\").concat(enumName, \"`.\");\n  },\n  EnumInvalidExplicitTypeUnknownSupplied: function EnumInvalidExplicitTypeUnknownSupplied(_ref59) {\n    var enumName = _ref59.enumName;\n    return \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `\".concat(enumName, \"`.\");\n  },\n  EnumInvalidMemberInitializerPrimaryType: function EnumInvalidMemberInitializerPrimaryType(_ref60) {\n    var enumName = _ref60.enumName,\n      memberName = _ref60.memberName,\n      explicitType = _ref60.explicitType;\n    return \"Enum `\".concat(enumName, \"` has type `\").concat(explicitType, \"`, so the initializer of `\").concat(memberName, \"` needs to be a \").concat(explicitType, \" literal.\");\n  },\n  EnumInvalidMemberInitializerSymbolType: function EnumInvalidMemberInitializerSymbolType(_ref61) {\n    var enumName = _ref61.enumName,\n      memberName = _ref61.memberName;\n    return \"Symbol enum members cannot be initialized. Use `\".concat(memberName, \",` in enum `\").concat(enumName, \"`.\");\n  },\n  EnumInvalidMemberInitializerUnknownType: function EnumInvalidMemberInitializerUnknownType(_ref62) {\n    var enumName = _ref62.enumName,\n      memberName = _ref62.memberName;\n    return \"The enum member initializer for `\".concat(memberName, \"` needs to be a literal (either a boolean, number, or string) in enum `\").concat(enumName, \"`.\");\n  },\n  EnumInvalidMemberName: function EnumInvalidMemberName(_ref63) {\n    var enumName = _ref63.enumName,\n      memberName = _ref63.memberName,\n      suggestion = _ref63.suggestion;\n    return \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `\".concat(memberName, \"`, consider using `\").concat(suggestion, \"`, in enum `\").concat(enumName, \"`.\");\n  },\n  EnumNumberMemberNotInitialized: function EnumNumberMemberNotInitialized(_ref64) {\n    var enumName = _ref64.enumName,\n      memberName = _ref64.memberName;\n    return \"Number enum members need to be initialized, e.g. `\".concat(memberName, \" = 1` in enum `\").concat(enumName, \"`.\");\n  },\n  EnumStringMemberInconsistentlyInitailized: function EnumStringMemberInconsistentlyInitailized(_ref65) {\n    var enumName = _ref65.enumName;\n    return \"String enum members need to consistently either all use initializers, or use no initializers, in enum `\".concat(enumName, \"`.\");\n  },\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType: \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: Object.assign({\n    message: \"A binding pattern parameter cannot be optional in an implementation signature.\"\n  }, {\n    reasonCode: \"OptionalBindingPattern\"\n  }),\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: function UnexpectedReservedType(_ref66) {\n    var reservedType = _ref66.reservedType;\n    return \"Unexpected reserved type \".concat(reservedType, \".\");\n  },\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: function UnsupportedDeclareExportKind(_ref67) {\n    var unsupportedExportKind = _ref67.unsupportedExportKind,\n      suggestion = _ref67.suggestion;\n    return \"`declare export \".concat(unsupportedExportKind, \"` is not supported. Use `\").concat(suggestion, \"` instead.\");\n  },\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n});\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\nvar exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\nfunction partition(list, test) {\n  var list1 = [];\n  var list2 = [];\n  for (var i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\nvar FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = function flow(superClass) {\n  return /*#__PURE__*/function (_superClass2) {\n    _inherits(FlowParserMixin, _superClass2);\n    var _super9 = _createSuper(FlowParserMixin);\n    function FlowParserMixin() {\n      var _this11;\n      _classCallCheck(this, FlowParserMixin);\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      _this11 = _super9.call.apply(_super9, [this].concat(args));\n      _this11.flowPragma = undefined;\n      return _this11;\n    }\n    _createClass(FlowParserMixin, [{\n      key: \"getScopeHandler\",\n      value: function getScopeHandler() {\n        return FlowScopeHandler;\n      }\n    }, {\n      key: \"shouldParseTypes\",\n      value: function shouldParseTypes() {\n        return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n      }\n    }, {\n      key: \"shouldParseEnums\",\n      value: function shouldParseEnums() {\n        return !!this.getPluginOption(\"flow\", \"enums\");\n      }\n    }, {\n      key: \"finishToken\",\n      value: function finishToken(type, val) {\n        if (type !== 131 && type !== 13 && type !== 28) {\n          if (this.flowPragma === undefined) {\n            this.flowPragma = null;\n          }\n        }\n        _get(_getPrototypeOf(FlowParserMixin.prototype), \"finishToken\", this).call(this, type, val);\n      }\n    }, {\n      key: \"addComment\",\n      value: function addComment(comment) {\n        if (this.flowPragma === undefined) {\n          var matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n          if (!matches) ;else if (matches[1] === \"flow\") {\n            this.flowPragma = \"flow\";\n          } else if (matches[1] === \"noflow\") {\n            this.flowPragma = \"noflow\";\n          } else {\n            throw new Error(\"Unexpected flow pragma\");\n          }\n        }\n        _get(_getPrototypeOf(FlowParserMixin.prototype), \"addComment\", this).call(this, comment);\n      }\n    }, {\n      key: \"flowParseTypeInitialiser\",\n      value: function flowParseTypeInitialiser(tok) {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        this.expect(tok || 14);\n        var type = this.flowParseType();\n        this.state.inType = oldInType;\n        return type;\n      }\n    }, {\n      key: \"flowParsePredicate\",\n      value: function flowParsePredicate() {\n        var node = this.startNode();\n        var moduloLoc = this.state.startLoc;\n        this.next();\n        this.expectContextual(108);\n        if (this.state.lastTokStart > moduloLoc.index + 1) {\n          this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n            at: moduloLoc\n          });\n        }\n        if (this.eat(10)) {\n          node.value = _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseExpression\", this).call(this);\n          this.expect(11);\n          return this.finishNode(node, \"DeclaredPredicate\");\n        } else {\n          return this.finishNode(node, \"InferredPredicate\");\n        }\n      }\n    }, {\n      key: \"flowParseTypeAndPredicateInitialiser\",\n      value: function flowParseTypeAndPredicateInitialiser() {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        this.expect(14);\n        var type = null;\n        var predicate = null;\n        if (this.match(54)) {\n          this.state.inType = oldInType;\n          predicate = this.flowParsePredicate();\n        } else {\n          type = this.flowParseType();\n          this.state.inType = oldInType;\n          if (this.match(54)) {\n            predicate = this.flowParsePredicate();\n          }\n        }\n        return [type, predicate];\n      }\n    }, {\n      key: \"flowParseDeclareClass\",\n      value: function flowParseDeclareClass(node) {\n        this.next();\n        this.flowParseInterfaceish(node, true);\n        return this.finishNode(node, \"DeclareClass\");\n      }\n    }, {\n      key: \"flowParseDeclareFunction\",\n      value: function flowParseDeclareFunction(node) {\n        this.next();\n        var id = node.id = this.parseIdentifier();\n        var typeNode = this.startNode();\n        var typeContainer = this.startNode();\n        if (this.match(47)) {\n          typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          typeNode.typeParameters = null;\n        }\n        this.expect(10);\n        var tmp = this.flowParseFunctionTypeParams();\n        typeNode.params = tmp.params;\n        typeNode.rest = tmp.rest;\n        typeNode.this = tmp._this;\n        this.expect(11);\n        var _this$flowParseTypeAn = this.flowParseTypeAndPredicateInitialiser();\n        var _this$flowParseTypeAn2 = _slicedToArray(_this$flowParseTypeAn, 2);\n        typeNode.returnType = _this$flowParseTypeAn2[0];\n        node.predicate = _this$flowParseTypeAn2[1];\n        typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n        id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n        this.resetEndLocation(id);\n        this.semicolon();\n        this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.loc.start);\n        return this.finishNode(node, \"DeclareFunction\");\n      }\n    }, {\n      key: \"flowParseDeclare\",\n      value: function flowParseDeclare(node, insideModule) {\n        if (this.match(80)) {\n          return this.flowParseDeclareClass(node);\n        } else if (this.match(68)) {\n          return this.flowParseDeclareFunction(node);\n        } else if (this.match(74)) {\n          return this.flowParseDeclareVariable(node);\n        } else if (this.eatContextual(125)) {\n          if (this.match(16)) {\n            return this.flowParseDeclareModuleExports(node);\n          } else {\n            if (insideModule) {\n              this.raise(FlowErrors.NestedDeclareModule, {\n                at: this.state.lastTokStartLoc\n              });\n            }\n            return this.flowParseDeclareModule(node);\n          }\n        } else if (this.isContextual(128)) {\n          return this.flowParseDeclareTypeAlias(node);\n        } else if (this.isContextual(129)) {\n          return this.flowParseDeclareOpaqueType(node);\n        } else if (this.isContextual(127)) {\n          return this.flowParseDeclareInterface(node);\n        } else if (this.match(82)) {\n          return this.flowParseDeclareExportDeclaration(node, insideModule);\n        } else {\n          this.unexpected();\n        }\n      }\n    }, {\n      key: \"flowParseDeclareVariable\",\n      value: function flowParseDeclareVariable(node) {\n        this.next();\n        node.id = this.flowParseTypeAnnotatableIdentifier(true);\n        this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n        this.semicolon();\n        return this.finishNode(node, \"DeclareVariable\");\n      }\n    }, {\n      key: \"flowParseDeclareModule\",\n      value: function flowParseDeclareModule(node) {\n        var _this12 = this;\n        this.scope.enter(SCOPE_OTHER);\n        if (this.match(131)) {\n          node.id = _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseExprAtom\", this).call(this);\n        } else {\n          node.id = this.parseIdentifier();\n        }\n        var bodyNode = node.body = this.startNode();\n        var body = bodyNode.body = [];\n        this.expect(5);\n        while (!this.match(8)) {\n          var _bodyNode = this.startNode();\n          if (this.match(83)) {\n            this.next();\n            if (!this.isContextual(128) && !this.match(87)) {\n              this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n                at: this.state.lastTokStartLoc\n              });\n            }\n            _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseImport\", this).call(this, _bodyNode);\n          } else {\n            this.expectContextual(123, FlowErrors.UnsupportedStatementInDeclareModule);\n            _bodyNode = this.flowParseDeclare(_bodyNode, true);\n          }\n          body.push(_bodyNode);\n        }\n        this.scope.exit();\n        this.expect(8);\n        this.finishNode(bodyNode, \"BlockStatement\");\n        var kind = null;\n        var hasModuleExport = false;\n        body.forEach(function (bodyElement) {\n          if (isEsModuleType(bodyElement)) {\n            if (kind === \"CommonJS\") {\n              _this12.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n                at: bodyElement\n              });\n            }\n            kind = \"ES\";\n          } else if (bodyElement.type === \"DeclareModuleExports\") {\n            if (hasModuleExport) {\n              _this12.raise(FlowErrors.DuplicateDeclareModuleExports, {\n                at: bodyElement\n              });\n            }\n            if (kind === \"ES\") {\n              _this12.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n                at: bodyElement\n              });\n            }\n            kind = \"CommonJS\";\n            hasModuleExport = true;\n          }\n        });\n        node.kind = kind || \"CommonJS\";\n        return this.finishNode(node, \"DeclareModule\");\n      }\n    }, {\n      key: \"flowParseDeclareExportDeclaration\",\n      value: function flowParseDeclareExportDeclaration(node, insideModule) {\n        this.expect(82);\n        if (this.eat(65)) {\n          if (this.match(68) || this.match(80)) {\n            node.declaration = this.flowParseDeclare(this.startNode());\n          } else {\n            node.declaration = this.flowParseType();\n            this.semicolon();\n          }\n          node.default = true;\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else {\n          if (this.match(75) || this.isLet() || (this.isContextual(128) || this.isContextual(127)) && !insideModule) {\n            var label = this.state.value;\n            throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n              at: this.state.startLoc,\n              unsupportedExportKind: label,\n              suggestion: exportSuggestions[label]\n            });\n          }\n          if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(129)) {\n            node.declaration = this.flowParseDeclare(this.startNode());\n            node.default = false;\n            return this.finishNode(node, \"DeclareExportDeclaration\");\n          } else if (this.match(55) || this.match(5) || this.isContextual(127) || this.isContextual(128) || this.isContextual(129)) {\n            node = this.parseExport(node, null);\n            if (node.type === \"ExportNamedDeclaration\") {\n              node.type = \"ExportDeclaration\";\n              node.default = false;\n              delete node.exportKind;\n            }\n            node.type = \"Declare\" + node.type;\n            return node;\n          }\n        }\n        this.unexpected();\n      }\n    }, {\n      key: \"flowParseDeclareModuleExports\",\n      value: function flowParseDeclareModuleExports(node) {\n        this.next();\n        this.expectContextual(109);\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n        this.semicolon();\n        return this.finishNode(node, \"DeclareModuleExports\");\n      }\n    }, {\n      key: \"flowParseDeclareTypeAlias\",\n      value: function flowParseDeclareTypeAlias(node) {\n        this.next();\n        var finished = this.flowParseTypeAlias(node);\n        finished.type = \"DeclareTypeAlias\";\n        return finished;\n      }\n    }, {\n      key: \"flowParseDeclareOpaqueType\",\n      value: function flowParseDeclareOpaqueType(node) {\n        this.next();\n        var finished = this.flowParseOpaqueType(node, true);\n        finished.type = \"DeclareOpaqueType\";\n        return finished;\n      }\n    }, {\n      key: \"flowParseDeclareInterface\",\n      value: function flowParseDeclareInterface(node) {\n        this.next();\n        this.flowParseInterfaceish(node, false);\n        return this.finishNode(node, \"DeclareInterface\");\n      }\n    }, {\n      key: \"flowParseInterfaceish\",\n      value: function flowParseInterfaceish(node, isClass) {\n        node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n        this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.loc.start);\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          node.typeParameters = null;\n        }\n        node.extends = [];\n        if (this.eat(81)) {\n          do {\n            node.extends.push(this.flowParseInterfaceExtends());\n          } while (!isClass && this.eat(12));\n        }\n        if (isClass) {\n          node.implements = [];\n          node.mixins = [];\n          if (this.eatContextual(115)) {\n            do {\n              node.mixins.push(this.flowParseInterfaceExtends());\n            } while (this.eat(12));\n          }\n          if (this.eatContextual(111)) {\n            do {\n              node.implements.push(this.flowParseInterfaceExtends());\n            } while (this.eat(12));\n          }\n        }\n        node.body = this.flowParseObjectType({\n          allowStatic: isClass,\n          allowExact: false,\n          allowSpread: false,\n          allowProto: isClass,\n          allowInexact: false\n        });\n      }\n    }, {\n      key: \"flowParseInterfaceExtends\",\n      value: function flowParseInterfaceExtends() {\n        var node = this.startNode();\n        node.id = this.flowParseQualifiedTypeIdentifier();\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n        return this.finishNode(node, \"InterfaceExtends\");\n      }\n    }, {\n      key: \"flowParseInterface\",\n      value: function flowParseInterface(node) {\n        this.flowParseInterfaceish(node, false);\n        return this.finishNode(node, \"InterfaceDeclaration\");\n      }\n    }, {\n      key: \"checkNotUnderscore\",\n      value: function checkNotUnderscore(word) {\n        if (word === \"_\") {\n          this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n            at: this.state.startLoc\n          });\n        }\n      }\n    }, {\n      key: \"checkReservedType\",\n      value: function checkReservedType(word, startLoc, declaration) {\n        if (!reservedTypes.has(word)) return;\n        this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, {\n          at: startLoc,\n          reservedType: word\n        });\n      }\n    }, {\n      key: \"flowParseRestrictedIdentifier\",\n      value: function flowParseRestrictedIdentifier(liberal, declaration) {\n        this.checkReservedType(this.state.value, this.state.startLoc, declaration);\n        return this.parseIdentifier(liberal);\n      }\n    }, {\n      key: \"flowParseTypeAlias\",\n      value: function flowParseTypeAlias(node) {\n        node.id = this.flowParseRestrictedIdentifier(false, true);\n        this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          node.typeParameters = null;\n        }\n        node.right = this.flowParseTypeInitialiser(29);\n        this.semicolon();\n        return this.finishNode(node, \"TypeAlias\");\n      }\n    }, {\n      key: \"flowParseOpaqueType\",\n      value: function flowParseOpaqueType(node, declare) {\n        this.expectContextual(128);\n        node.id = this.flowParseRestrictedIdentifier(true, true);\n        this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          node.typeParameters = null;\n        }\n        node.supertype = null;\n        if (this.match(14)) {\n          node.supertype = this.flowParseTypeInitialiser(14);\n        }\n        node.impltype = null;\n        if (!declare) {\n          node.impltype = this.flowParseTypeInitialiser(29);\n        }\n        this.semicolon();\n        return this.finishNode(node, \"OpaqueType\");\n      }\n    }, {\n      key: \"flowParseTypeParameter\",\n      value: function flowParseTypeParameter() {\n        var requireDefault = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var nodeStartLoc = this.state.startLoc;\n        var node = this.startNode();\n        var variance = this.flowParseVariance();\n        var ident = this.flowParseTypeAnnotatableIdentifier();\n        node.name = ident.name;\n        node.variance = variance;\n        node.bound = ident.typeAnnotation;\n        if (this.match(29)) {\n          this.eat(29);\n          node.default = this.flowParseType();\n        } else {\n          if (requireDefault) {\n            this.raise(FlowErrors.MissingTypeParamDefault, {\n              at: nodeStartLoc\n            });\n          }\n        }\n        return this.finishNode(node, \"TypeParameter\");\n      }\n    }, {\n      key: \"flowParseTypeParameterDeclaration\",\n      value: function flowParseTypeParameterDeclaration() {\n        var oldInType = this.state.inType;\n        var node = this.startNode();\n        node.params = [];\n        this.state.inType = true;\n        if (this.match(47) || this.match(140)) {\n          this.next();\n        } else {\n          this.unexpected();\n        }\n        var defaultRequired = false;\n        do {\n          var typeParameter = this.flowParseTypeParameter(defaultRequired);\n          node.params.push(typeParameter);\n          if (typeParameter.default) {\n            defaultRequired = true;\n          }\n          if (!this.match(48)) {\n            this.expect(12);\n          }\n        } while (!this.match(48));\n        this.expect(48);\n        this.state.inType = oldInType;\n        return this.finishNode(node, \"TypeParameterDeclaration\");\n      }\n    }, {\n      key: \"flowParseTypeParameterInstantiation\",\n      value: function flowParseTypeParameterInstantiation() {\n        var node = this.startNode();\n        var oldInType = this.state.inType;\n        node.params = [];\n        this.state.inType = true;\n        this.expect(47);\n        var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = false;\n        while (!this.match(48)) {\n          node.params.push(this.flowParseType());\n          if (!this.match(48)) {\n            this.expect(12);\n          }\n        }\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        this.expect(48);\n        this.state.inType = oldInType;\n        return this.finishNode(node, \"TypeParameterInstantiation\");\n      }\n    }, {\n      key: \"flowParseTypeParameterInstantiationCallOrNew\",\n      value: function flowParseTypeParameterInstantiationCallOrNew() {\n        var node = this.startNode();\n        var oldInType = this.state.inType;\n        node.params = [];\n        this.state.inType = true;\n        this.expect(47);\n        while (!this.match(48)) {\n          node.params.push(this.flowParseTypeOrImplicitInstantiation());\n          if (!this.match(48)) {\n            this.expect(12);\n          }\n        }\n        this.expect(48);\n        this.state.inType = oldInType;\n        return this.finishNode(node, \"TypeParameterInstantiation\");\n      }\n    }, {\n      key: \"flowParseInterfaceType\",\n      value: function flowParseInterfaceType() {\n        var node = this.startNode();\n        this.expectContextual(127);\n        node.extends = [];\n        if (this.eat(81)) {\n          do {\n            node.extends.push(this.flowParseInterfaceExtends());\n          } while (this.eat(12));\n        }\n        node.body = this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: false,\n          allowProto: false,\n          allowInexact: false\n        });\n        return this.finishNode(node, \"InterfaceTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseObjectPropertyKey\",\n      value: function flowParseObjectPropertyKey() {\n        return this.match(132) || this.match(131) ? _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseExprAtom\", this).call(this) : this.parseIdentifier(true);\n      }\n    }, {\n      key: \"flowParseObjectTypeIndexer\",\n      value: function flowParseObjectTypeIndexer(node, isStatic, variance) {\n        node.static = isStatic;\n        if (this.lookahead().type === 14) {\n          node.id = this.flowParseObjectPropertyKey();\n          node.key = this.flowParseTypeInitialiser();\n        } else {\n          node.id = null;\n          node.key = this.flowParseType();\n        }\n        this.expect(3);\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n        return this.finishNode(node, \"ObjectTypeIndexer\");\n      }\n    }, {\n      key: \"flowParseObjectTypeInternalSlot\",\n      value: function flowParseObjectTypeInternalSlot(node, isStatic) {\n        node.static = isStatic;\n        node.id = this.flowParseObjectPropertyKey();\n        this.expect(3);\n        this.expect(3);\n        if (this.match(47) || this.match(10)) {\n          node.method = true;\n          node.optional = false;\n          node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));\n        } else {\n          node.method = false;\n          if (this.eat(17)) {\n            node.optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n        }\n        return this.finishNode(node, \"ObjectTypeInternalSlot\");\n      }\n    }, {\n      key: \"flowParseObjectTypeMethodish\",\n      value: function flowParseObjectTypeMethodish(node) {\n        node.params = [];\n        node.rest = null;\n        node.typeParameters = null;\n        node.this = null;\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n        this.expect(10);\n        if (this.match(78)) {\n          node.this = this.flowParseFunctionTypeParam(true);\n          node.this.name = null;\n          if (!this.match(11)) {\n            this.expect(12);\n          }\n        }\n        while (!this.match(11) && !this.match(21)) {\n          node.params.push(this.flowParseFunctionTypeParam(false));\n          if (!this.match(11)) {\n            this.expect(12);\n          }\n        }\n        if (this.eat(21)) {\n          node.rest = this.flowParseFunctionTypeParam(false);\n        }\n        this.expect(11);\n        node.returnType = this.flowParseTypeInitialiser();\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseObjectTypeCallProperty\",\n      value: function flowParseObjectTypeCallProperty(node, isStatic) {\n        var valueNode = this.startNode();\n        node.static = isStatic;\n        node.value = this.flowParseObjectTypeMethodish(valueNode);\n        return this.finishNode(node, \"ObjectTypeCallProperty\");\n      }\n    }, {\n      key: \"flowParseObjectType\",\n      value: function flowParseObjectType(_ref68) {\n        var allowStatic = _ref68.allowStatic,\n          allowExact = _ref68.allowExact,\n          allowSpread = _ref68.allowSpread,\n          allowProto = _ref68.allowProto,\n          allowInexact = _ref68.allowInexact;\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        var nodeStart = this.startNode();\n        nodeStart.callProperties = [];\n        nodeStart.properties = [];\n        nodeStart.indexers = [];\n        nodeStart.internalSlots = [];\n        var endDelim;\n        var exact;\n        var inexact = false;\n        if (allowExact && this.match(6)) {\n          this.expect(6);\n          endDelim = 9;\n          exact = true;\n        } else {\n          this.expect(5);\n          endDelim = 8;\n          exact = false;\n        }\n        nodeStart.exact = exact;\n        while (!this.match(endDelim)) {\n          var isStatic = false;\n          var protoStartLoc = null;\n          var inexactStartLoc = null;\n          var node = this.startNode();\n          if (allowProto && this.isContextual(116)) {\n            var lookahead = this.lookahead();\n            if (lookahead.type !== 14 && lookahead.type !== 17) {\n              this.next();\n              protoStartLoc = this.state.startLoc;\n              allowStatic = false;\n            }\n          }\n          if (allowStatic && this.isContextual(104)) {\n            var _lookahead = this.lookahead();\n            if (_lookahead.type !== 14 && _lookahead.type !== 17) {\n              this.next();\n              isStatic = true;\n            }\n          }\n          var variance = this.flowParseVariance();\n          if (this.eat(0)) {\n            if (protoStartLoc != null) {\n              this.unexpected(protoStartLoc);\n            }\n            if (this.eat(0)) {\n              if (variance) {\n                this.unexpected(variance.loc.start);\n              }\n              nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n            } else {\n              nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n            }\n          } else if (this.match(10) || this.match(47)) {\n            if (protoStartLoc != null) {\n              this.unexpected(protoStartLoc);\n            }\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n          } else {\n            var kind = \"init\";\n            if (this.isContextual(98) || this.isContextual(103)) {\n              var _lookahead2 = this.lookahead();\n              if (tokenIsLiteralPropertyName(_lookahead2.type)) {\n                kind = this.state.value;\n                this.next();\n              }\n            }\n            var propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n            if (propOrInexact === null) {\n              inexact = true;\n              inexactStartLoc = this.state.lastTokStartLoc;\n            } else {\n              nodeStart.properties.push(propOrInexact);\n            }\n          }\n          this.flowObjectTypeSemicolon();\n          if (inexactStartLoc && !this.match(8) && !this.match(9)) {\n            this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n              at: inexactStartLoc\n            });\n          }\n        }\n        this.expect(endDelim);\n        if (allowSpread) {\n          nodeStart.inexact = inexact;\n        }\n        var out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n        this.state.inType = oldInType;\n        return out;\n      }\n    }, {\n      key: \"flowParseObjectTypeProperty\",\n      value: function flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {\n        if (this.eat(21)) {\n          var isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);\n          if (isInexactToken) {\n            if (!allowSpread) {\n              this.raise(FlowErrors.InexactInsideNonObject, {\n                at: this.state.lastTokStartLoc\n              });\n            } else if (!allowInexact) {\n              this.raise(FlowErrors.InexactInsideExact, {\n                at: this.state.lastTokStartLoc\n              });\n            }\n            if (variance) {\n              this.raise(FlowErrors.InexactVariance, {\n                at: variance\n              });\n            }\n            return null;\n          }\n          if (!allowSpread) {\n            this.raise(FlowErrors.UnexpectedSpreadType, {\n              at: this.state.lastTokStartLoc\n            });\n          }\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.raise(FlowErrors.SpreadVariance, {\n              at: variance\n            });\n          }\n          node.argument = this.flowParseType();\n          return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n        } else {\n          node.key = this.flowParseObjectPropertyKey();\n          node.static = isStatic;\n          node.proto = protoStartLoc != null;\n          node.kind = kind;\n          var optional = false;\n          if (this.match(47) || this.match(10)) {\n            node.method = true;\n            if (protoStartLoc != null) {\n              this.unexpected(protoStartLoc);\n            }\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));\n            if (kind === \"get\" || kind === \"set\") {\n              this.flowCheckGetterSetterParams(node);\n            }\n            if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n              this.raise(FlowErrors.ThisParamBannedInConstructor, {\n                at: node.value.this\n              });\n            }\n          } else {\n            if (kind !== \"init\") this.unexpected();\n            node.method = false;\n            if (this.eat(17)) {\n              optional = true;\n            }\n            node.value = this.flowParseTypeInitialiser();\n            node.variance = variance;\n          }\n          node.optional = optional;\n          return this.finishNode(node, \"ObjectTypeProperty\");\n        }\n      }\n    }, {\n      key: \"flowCheckGetterSetterParams\",\n      value: function flowCheckGetterSetterParams(property) {\n        var paramCount = property.kind === \"get\" ? 0 : 1;\n        var length = property.value.params.length + (property.value.rest ? 1 : 0);\n        if (property.value.this) {\n          this.raise(property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, {\n            at: property.value.this\n          });\n        }\n        if (length !== paramCount) {\n          this.raise(property.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity, {\n            at: property\n          });\n        }\n        if (property.kind === \"set\" && property.value.rest) {\n          this.raise(Errors.BadSetterRestParameter, {\n            at: property\n          });\n        }\n      }\n    }, {\n      key: \"flowObjectTypeSemicolon\",\n      value: function flowObjectTypeSemicolon() {\n        if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {\n          this.unexpected();\n        }\n      }\n    }, {\n      key: \"flowParseQualifiedTypeIdentifier\",\n      value: function flowParseQualifiedTypeIdentifier(startLoc, id) {\n        var _startLoc;\n        (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;\n        var node = id || this.flowParseRestrictedIdentifier(true);\n        while (this.eat(16)) {\n          var node2 = this.startNodeAt(startLoc);\n          node2.qualification = node;\n          node2.id = this.flowParseRestrictedIdentifier(true);\n          node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n        }\n        return node;\n      }\n    }, {\n      key: \"flowParseGenericType\",\n      value: function flowParseGenericType(startLoc, id) {\n        var node = this.startNodeAt(startLoc);\n        node.typeParameters = null;\n        node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        }\n        return this.finishNode(node, \"GenericTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseTypeofType\",\n      value: function flowParseTypeofType() {\n        var node = this.startNode();\n        this.expect(87);\n        node.argument = this.flowParsePrimaryType();\n        return this.finishNode(node, \"TypeofTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseTupleType\",\n      value: function flowParseTupleType() {\n        var node = this.startNode();\n        node.types = [];\n        this.expect(0);\n        while (this.state.pos < this.length && !this.match(3)) {\n          node.types.push(this.flowParseType());\n          if (this.match(3)) break;\n          this.expect(12);\n        }\n        this.expect(3);\n        return this.finishNode(node, \"TupleTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseFunctionTypeParam\",\n      value: function flowParseFunctionTypeParam(first) {\n        var name = null;\n        var optional = false;\n        var typeAnnotation = null;\n        var node = this.startNode();\n        var lh = this.lookahead();\n        var isThis = this.state.type === 78;\n        if (lh.type === 14 || lh.type === 17) {\n          if (isThis && !first) {\n            this.raise(FlowErrors.ThisParamMustBeFirst, {\n              at: node\n            });\n          }\n          name = this.parseIdentifier(isThis);\n          if (this.eat(17)) {\n            optional = true;\n            if (isThis) {\n              this.raise(FlowErrors.ThisParamMayNotBeOptional, {\n                at: node\n              });\n            }\n          }\n          typeAnnotation = this.flowParseTypeInitialiser();\n        } else {\n          typeAnnotation = this.flowParseType();\n        }\n        node.name = name;\n        node.optional = optional;\n        node.typeAnnotation = typeAnnotation;\n        return this.finishNode(node, \"FunctionTypeParam\");\n      }\n    }, {\n      key: \"reinterpretTypeAsFunctionTypeParam\",\n      value: function reinterpretTypeAsFunctionTypeParam(type) {\n        var node = this.startNodeAt(type.loc.start);\n        node.name = null;\n        node.optional = false;\n        node.typeAnnotation = type;\n        return this.finishNode(node, \"FunctionTypeParam\");\n      }\n    }, {\n      key: \"flowParseFunctionTypeParams\",\n      value: function flowParseFunctionTypeParams() {\n        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var rest = null;\n        var _this = null;\n        if (this.match(78)) {\n          _this = this.flowParseFunctionTypeParam(true);\n          _this.name = null;\n          if (!this.match(11)) {\n            this.expect(12);\n          }\n        }\n        while (!this.match(11) && !this.match(21)) {\n          params.push(this.flowParseFunctionTypeParam(false));\n          if (!this.match(11)) {\n            this.expect(12);\n          }\n        }\n        if (this.eat(21)) {\n          rest = this.flowParseFunctionTypeParam(false);\n        }\n        return {\n          params: params,\n          rest: rest,\n          _this: _this\n        };\n      }\n    }, {\n      key: \"flowIdentToTypeAnnotation\",\n      value: function flowIdentToTypeAnnotation(startLoc, node, id) {\n        switch (id.name) {\n          case \"any\":\n            return this.finishNode(node, \"AnyTypeAnnotation\");\n          case \"bool\":\n          case \"boolean\":\n            return this.finishNode(node, \"BooleanTypeAnnotation\");\n          case \"mixed\":\n            return this.finishNode(node, \"MixedTypeAnnotation\");\n          case \"empty\":\n            return this.finishNode(node, \"EmptyTypeAnnotation\");\n          case \"number\":\n            return this.finishNode(node, \"NumberTypeAnnotation\");\n          case \"string\":\n            return this.finishNode(node, \"StringTypeAnnotation\");\n          case \"symbol\":\n            return this.finishNode(node, \"SymbolTypeAnnotation\");\n          default:\n            this.checkNotUnderscore(id.name);\n            return this.flowParseGenericType(startLoc, id);\n        }\n      }\n    }, {\n      key: \"flowParsePrimaryType\",\n      value: function flowParsePrimaryType() {\n        var startLoc = this.state.startLoc;\n        var node = this.startNode();\n        var tmp;\n        var type;\n        var isGroupedType = false;\n        var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        switch (this.state.type) {\n          case 5:\n            return this.flowParseObjectType({\n              allowStatic: false,\n              allowExact: false,\n              allowSpread: true,\n              allowProto: false,\n              allowInexact: true\n            });\n          case 6:\n            return this.flowParseObjectType({\n              allowStatic: false,\n              allowExact: true,\n              allowSpread: true,\n              allowProto: false,\n              allowInexact: false\n            });\n          case 0:\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseTupleType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n            return type;\n          case 47:\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(10);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            node.this = tmp._this;\n            this.expect(11);\n            this.expect(19);\n            node.returnType = this.flowParseType();\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          case 10:\n            this.next();\n            if (!this.match(11) && !this.match(21)) {\n              if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n                var token = this.lookahead().type;\n                isGroupedType = token !== 17 && token !== 14;\n              } else {\n                isGroupedType = true;\n              }\n            }\n            if (isGroupedType) {\n              this.state.noAnonFunctionType = false;\n              type = this.flowParseType();\n              this.state.noAnonFunctionType = oldNoAnonFunctionType;\n              if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {\n                this.expect(11);\n                return type;\n              } else {\n                this.eat(12);\n              }\n            }\n            if (type) {\n              tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n            } else {\n              tmp = this.flowParseFunctionTypeParams();\n            }\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            node.this = tmp._this;\n            this.expect(11);\n            this.expect(19);\n            node.returnType = this.flowParseType();\n            node.typeParameters = null;\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          case 131:\n            return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n          case 85:\n          case 86:\n            node.value = this.match(85);\n            this.next();\n            return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n          case 53:\n            if (this.state.value === \"-\") {\n              this.next();\n              if (this.match(132)) {\n                return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n              }\n              if (this.match(133)) {\n                return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n              }\n              throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n                at: this.state.startLoc\n              });\n            }\n            this.unexpected();\n            return;\n          case 132:\n            return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n          case 133:\n            return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n          case 88:\n            this.next();\n            return this.finishNode(node, \"VoidTypeAnnotation\");\n          case 84:\n            this.next();\n            return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n          case 78:\n            this.next();\n            return this.finishNode(node, \"ThisTypeAnnotation\");\n          case 55:\n            this.next();\n            return this.finishNode(node, \"ExistsTypeAnnotation\");\n          case 87:\n            return this.flowParseTypeofType();\n          default:\n            if (tokenIsKeyword(this.state.type)) {\n              var label = tokenLabelName(this.state.type);\n              this.next();\n              return _get(_getPrototypeOf(FlowParserMixin.prototype), \"createIdentifier\", this).call(this, node, label);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              if (this.isContextual(127)) {\n                return this.flowParseInterfaceType();\n              }\n              return this.flowIdentToTypeAnnotation(startLoc, node, this.parseIdentifier());\n            }\n        }\n        this.unexpected();\n      }\n    }, {\n      key: \"flowParsePostfixType\",\n      value: function flowParsePostfixType() {\n        var startLoc = this.state.startLoc;\n        var type = this.flowParsePrimaryType();\n        var seenOptionalIndexedAccess = false;\n        while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {\n          var node = this.startNodeAt(startLoc);\n          var optional = this.eat(18);\n          seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n          this.expect(0);\n          if (!optional && this.match(3)) {\n            node.elementType = type;\n            this.next();\n            type = this.finishNode(node, \"ArrayTypeAnnotation\");\n          } else {\n            node.objectType = type;\n            node.indexType = this.flowParseType();\n            this.expect(3);\n            if (seenOptionalIndexedAccess) {\n              node.optional = optional;\n              type = this.finishNode(node, \"OptionalIndexedAccessType\");\n            } else {\n              type = this.finishNode(node, \"IndexedAccessType\");\n            }\n          }\n        }\n        return type;\n      }\n    }, {\n      key: \"flowParsePrefixType\",\n      value: function flowParsePrefixType() {\n        var node = this.startNode();\n        if (this.eat(17)) {\n          node.typeAnnotation = this.flowParsePrefixType();\n          return this.finishNode(node, \"NullableTypeAnnotation\");\n        } else {\n          return this.flowParsePostfixType();\n        }\n      }\n    }, {\n      key: \"flowParseAnonFunctionWithoutParens\",\n      value: function flowParseAnonFunctionWithoutParens() {\n        var param = this.flowParsePrefixType();\n        if (!this.state.noAnonFunctionType && this.eat(19)) {\n          var node = this.startNodeAt(param.loc.start);\n          node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n          node.rest = null;\n          node.this = null;\n          node.returnType = this.flowParseType();\n          node.typeParameters = null;\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n        return param;\n      }\n    }, {\n      key: \"flowParseIntersectionType\",\n      value: function flowParseIntersectionType() {\n        var node = this.startNode();\n        this.eat(45);\n        var type = this.flowParseAnonFunctionWithoutParens();\n        node.types = [type];\n        while (this.eat(45)) {\n          node.types.push(this.flowParseAnonFunctionWithoutParens());\n        }\n        return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseUnionType\",\n      value: function flowParseUnionType() {\n        var node = this.startNode();\n        this.eat(43);\n        var type = this.flowParseIntersectionType();\n        node.types = [type];\n        while (this.eat(43)) {\n          node.types.push(this.flowParseIntersectionType());\n        }\n        return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseType\",\n      value: function flowParseType() {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        var type = this.flowParseUnionType();\n        this.state.inType = oldInType;\n        return type;\n      }\n    }, {\n      key: \"flowParseTypeOrImplicitInstantiation\",\n      value: function flowParseTypeOrImplicitInstantiation() {\n        if (this.state.type === 130 && this.state.value === \"_\") {\n          var startLoc = this.state.startLoc;\n          var node = this.parseIdentifier();\n          return this.flowParseGenericType(startLoc, node);\n        } else {\n          return this.flowParseType();\n        }\n      }\n    }, {\n      key: \"flowParseTypeAnnotation\",\n      value: function flowParseTypeAnnotation() {\n        var node = this.startNode();\n        node.typeAnnotation = this.flowParseTypeInitialiser();\n        return this.finishNode(node, \"TypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseTypeAnnotatableIdentifier\",\n      value: function flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n        var ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n        if (this.match(14)) {\n          ident.typeAnnotation = this.flowParseTypeAnnotation();\n          this.resetEndLocation(ident);\n        }\n        return ident;\n      }\n    }, {\n      key: \"typeCastToParameter\",\n      value: function typeCastToParameter(node) {\n        node.expression.typeAnnotation = node.typeAnnotation;\n        this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n        return node.expression;\n      }\n    }, {\n      key: \"flowParseVariance\",\n      value: function flowParseVariance() {\n        var variance = null;\n        if (this.match(53)) {\n          variance = this.startNode();\n          if (this.state.value === \"+\") {\n            variance.kind = \"plus\";\n          } else {\n            variance.kind = \"minus\";\n          }\n          this.next();\n          return this.finishNode(variance, \"Variance\");\n        }\n        return variance;\n      }\n    }, {\n      key: \"parseFunctionBody\",\n      value: function parseFunctionBody(node, allowExpressionBody) {\n        var _this13 = this;\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        if (allowExpressionBody) {\n          this.forwardNoArrowParamsConversionAt(node, function () {\n            return _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseFunctionBody\", _this13).call(_this13, node, true, isMethod);\n          });\n          return;\n        }\n        _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseFunctionBody\", this).call(this, node, false, isMethod);\n      }\n    }, {\n      key: \"parseFunctionBodyAndFinish\",\n      value: function parseFunctionBodyAndFinish(node, type) {\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        if (this.match(14)) {\n          var typeNode = this.startNode();\n          var _this$flowParseTypeAn3 = this.flowParseTypeAndPredicateInitialiser();\n          var _this$flowParseTypeAn4 = _slicedToArray(_this$flowParseTypeAn3, 2);\n          typeNode.typeAnnotation = _this$flowParseTypeAn4[0];\n          node.predicate = _this$flowParseTypeAn4[1];\n          node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n        }\n        return _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseFunctionBodyAndFinish\", this).call(this, node, type, isMethod);\n      }\n    }, {\n      key: \"parseStatementLike\",\n      value: function parseStatementLike(flags) {\n        if (this.state.strict && this.isContextual(127)) {\n          var lookahead = this.lookahead();\n          if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n            var node = this.startNode();\n            this.next();\n            return this.flowParseInterface(node);\n          }\n        } else if (this.shouldParseEnums() && this.isContextual(124)) {\n          var _node = this.startNode();\n          this.next();\n          return this.flowParseEnumDeclaration(_node);\n        }\n        var stmt = _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseStatementLike\", this).call(this, flags);\n        if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n          this.flowPragma = null;\n        }\n        return stmt;\n      }\n    }, {\n      key: \"parseExpressionStatement\",\n      value: function parseExpressionStatement(node, expr, decorators) {\n        if (expr.type === \"Identifier\") {\n          if (expr.name === \"declare\") {\n            if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {\n              return this.flowParseDeclare(node);\n            }\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (expr.name === \"interface\") {\n              return this.flowParseInterface(node);\n            } else if (expr.name === \"type\") {\n              return this.flowParseTypeAlias(node);\n            } else if (expr.name === \"opaque\") {\n              return this.flowParseOpaqueType(node, false);\n            }\n          }\n        }\n        return _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseExpressionStatement\", this).call(this, node, expr, decorators);\n      }\n    }, {\n      key: \"shouldParseExportDeclaration\",\n      value: function shouldParseExportDeclaration() {\n        var type = this.state.type;\n        if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 124) {\n          return !this.state.containsEsc;\n        }\n        return _get(_getPrototypeOf(FlowParserMixin.prototype), \"shouldParseExportDeclaration\", this).call(this);\n      }\n    }, {\n      key: \"isExportDefaultSpecifier\",\n      value: function isExportDefaultSpecifier() {\n        var type = this.state.type;\n        if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 124) {\n          return this.state.containsEsc;\n        }\n        return _get(_getPrototypeOf(FlowParserMixin.prototype), \"isExportDefaultSpecifier\", this).call(this);\n      }\n    }, {\n      key: \"parseExportDefaultExpression\",\n      value: function parseExportDefaultExpression() {\n        if (this.shouldParseEnums() && this.isContextual(124)) {\n          var node = this.startNode();\n          this.next();\n          return this.flowParseEnumDeclaration(node);\n        }\n        return _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseExportDefaultExpression\", this).call(this);\n      }\n    }, {\n      key: \"parseConditional\",\n      value: function parseConditional(expr, startLoc, refExpressionErrors) {\n        var _this14 = this;\n        if (!this.match(17)) return expr;\n        if (this.state.maybeInArrowParameters) {\n          var nextCh = this.lookaheadCharCode();\n          if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n            this.setOptionalParametersError(refExpressionErrors);\n            return expr;\n          }\n        }\n        this.expect(17);\n        var state = this.state.clone();\n        var originalNoArrowAt = this.state.noArrowAt;\n        var node = this.startNodeAt(startLoc);\n        var _this$tryParseConditi = this.tryParseConditionalConsequent(),\n          consequent = _this$tryParseConditi.consequent,\n          failed = _this$tryParseConditi.failed;\n        var _this$getArrowLikeExp = this.getArrowLikeExpressions(consequent),\n          _this$getArrowLikeExp2 = _slicedToArray(_this$getArrowLikeExp, 2),\n          valid = _this$getArrowLikeExp2[0],\n          invalid = _this$getArrowLikeExp2[1];\n        if (failed || invalid.length > 0) {\n          var noArrowAt = _toConsumableArray(originalNoArrowAt);\n          if (invalid.length > 0) {\n            this.state = state;\n            this.state.noArrowAt = noArrowAt;\n            for (var i = 0; i < invalid.length; i++) {\n              noArrowAt.push(invalid[i].start);\n            }\n            var _this$tryParseConditi2 = this.tryParseConditionalConsequent();\n            consequent = _this$tryParseConditi2.consequent;\n            failed = _this$tryParseConditi2.failed;\n            var _this$getArrowLikeExp3 = this.getArrowLikeExpressions(consequent);\n            var _this$getArrowLikeExp4 = _slicedToArray(_this$getArrowLikeExp3, 2);\n            valid = _this$getArrowLikeExp4[0];\n            invalid = _this$getArrowLikeExp4[1];\n          }\n          if (failed && valid.length > 1) {\n            this.raise(FlowErrors.AmbiguousConditionalArrow, {\n              at: state.startLoc\n            });\n          }\n          if (failed && valid.length === 1) {\n            this.state = state;\n            noArrowAt.push(valid[0].start);\n            this.state.noArrowAt = noArrowAt;\n            var _this$tryParseConditi3 = this.tryParseConditionalConsequent();\n            consequent = _this$tryParseConditi3.consequent;\n            failed = _this$tryParseConditi3.failed;\n          }\n        }\n        this.getArrowLikeExpressions(consequent, true);\n        this.state.noArrowAt = originalNoArrowAt;\n        this.expect(14);\n        node.test = expr;\n        node.consequent = consequent;\n        node.alternate = this.forwardNoArrowParamsConversionAt(node, function () {\n          return _this14.parseMaybeAssign(undefined, undefined);\n        });\n        return this.finishNode(node, \"ConditionalExpression\");\n      }\n    }, {\n      key: \"tryParseConditionalConsequent\",\n      value: function tryParseConditionalConsequent() {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        var consequent = this.parseMaybeAssignAllowIn();\n        var failed = !this.match(14);\n        this.state.noArrowParamsConversionAt.pop();\n        return {\n          consequent: consequent,\n          failed: failed\n        };\n      }\n    }, {\n      key: \"getArrowLikeExpressions\",\n      value: function getArrowLikeExpressions(node, disallowInvalid) {\n        var _this15 = this;\n        var stack = [node];\n        var arrows = [];\n        while (stack.length !== 0) {\n          var _node2 = stack.pop();\n          if (_node2.type === \"ArrowFunctionExpression\") {\n            if (_node2.typeParameters || !_node2.returnType) {\n              this.finishArrowValidation(_node2);\n            } else {\n              arrows.push(_node2);\n            }\n            stack.push(_node2.body);\n          } else if (_node2.type === \"ConditionalExpression\") {\n            stack.push(_node2.consequent);\n            stack.push(_node2.alternate);\n          }\n        }\n        if (disallowInvalid) {\n          arrows.forEach(function (node) {\n            return _this15.finishArrowValidation(node);\n          });\n          return [arrows, []];\n        }\n        return partition(arrows, function (node) {\n          return node.params.every(function (param) {\n            return _this15.isAssignable(param, true);\n          });\n        });\n      }\n    }, {\n      key: \"finishArrowValidation\",\n      value: function finishArrowValidation(node) {\n        var _node$extra;\n        this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);\n        this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n        _get(_getPrototypeOf(FlowParserMixin.prototype), \"checkParams\", this).call(this, node, false, true);\n        this.scope.exit();\n      }\n    }, {\n      key: \"forwardNoArrowParamsConversionAt\",\n      value: function forwardNoArrowParamsConversionAt(node, parse) {\n        var result;\n        if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n          this.state.noArrowParamsConversionAt.push(this.state.start);\n          result = parse();\n          this.state.noArrowParamsConversionAt.pop();\n        } else {\n          result = parse();\n        }\n        return result;\n      }\n    }, {\n      key: \"parseParenItem\",\n      value: function parseParenItem(node, startLoc) {\n        node = _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseParenItem\", this).call(this, node, startLoc);\n        if (this.eat(17)) {\n          node.optional = true;\n          this.resetEndLocation(node);\n        }\n        if (this.match(14)) {\n          var typeCastNode = this.startNodeAt(startLoc);\n          typeCastNode.expression = node;\n          typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n          return this.finishNode(typeCastNode, \"TypeCastExpression\");\n        }\n        return node;\n      }\n    }, {\n      key: \"assertModuleNodeAllowed\",\n      value: function assertModuleNodeAllowed(node) {\n        if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n          return;\n        }\n        _get(_getPrototypeOf(FlowParserMixin.prototype), \"assertModuleNodeAllowed\", this).call(this, node);\n      }\n    }, {\n      key: \"parseExportDeclaration\",\n      value: function parseExportDeclaration(node) {\n        if (this.isContextual(128)) {\n          node.exportKind = \"type\";\n          var declarationNode = this.startNode();\n          this.next();\n          if (this.match(5)) {\n            node.specifiers = this.parseExportSpecifiers(true);\n            _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseExportFrom\", this).call(this, node);\n            return null;\n          } else {\n            return this.flowParseTypeAlias(declarationNode);\n          }\n        } else if (this.isContextual(129)) {\n          node.exportKind = \"type\";\n          var _declarationNode = this.startNode();\n          this.next();\n          return this.flowParseOpaqueType(_declarationNode, false);\n        } else if (this.isContextual(127)) {\n          node.exportKind = \"type\";\n          var _declarationNode2 = this.startNode();\n          this.next();\n          return this.flowParseInterface(_declarationNode2);\n        } else if (this.shouldParseEnums() && this.isContextual(124)) {\n          node.exportKind = \"value\";\n          var _declarationNode3 = this.startNode();\n          this.next();\n          return this.flowParseEnumDeclaration(_declarationNode3);\n        } else {\n          return _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseExportDeclaration\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"eatExportStar\",\n      value: function eatExportStar(node) {\n        if (_get(_getPrototypeOf(FlowParserMixin.prototype), \"eatExportStar\", this).call(this, node)) return true;\n        if (this.isContextual(128) && this.lookahead().type === 55) {\n          node.exportKind = \"type\";\n          this.next();\n          this.next();\n          return true;\n        }\n        return false;\n      }\n    }, {\n      key: \"maybeParseExportNamespaceSpecifier\",\n      value: function maybeParseExportNamespaceSpecifier(node) {\n        var startLoc = this.state.startLoc;\n        var hasNamespace = _get(_getPrototypeOf(FlowParserMixin.prototype), \"maybeParseExportNamespaceSpecifier\", this).call(this, node);\n        if (hasNamespace && node.exportKind === \"type\") {\n          this.unexpected(startLoc);\n        }\n        return hasNamespace;\n      }\n    }, {\n      key: \"parseClassId\",\n      value: function parseClassId(node, isStatement, optionalId) {\n        _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseClassId\", this).call(this, node, isStatement, optionalId);\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n      }\n    }, {\n      key: \"parseClassMember\",\n      value: function parseClassMember(classBody, member, state) {\n        var startLoc = this.state.startLoc;\n        if (this.isContextual(123)) {\n          if (_get(_getPrototypeOf(FlowParserMixin.prototype), \"parseClassMemberFromModifier\", this).call(this, classBody, member)) {\n            return;\n          }\n          member.declare = true;\n        }\n        _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseClassMember\", this).call(this, classBody, member, state);\n        if (member.declare) {\n          if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n            this.raise(FlowErrors.DeclareClassElement, {\n              at: startLoc\n            });\n          } else if (member.value) {\n            this.raise(FlowErrors.DeclareClassFieldInitializer, {\n              at: member.value\n            });\n          }\n        }\n      }\n    }, {\n      key: \"isIterator\",\n      value: function isIterator(word) {\n        return word === \"iterator\" || word === \"asyncIterator\";\n      }\n    }, {\n      key: \"readIterator\",\n      value: function readIterator() {\n        var word = _get(_getPrototypeOf(FlowParserMixin.prototype), \"readWord1\", this).call(this);\n        var fullWord = \"@@\" + word;\n        if (!this.isIterator(word) || !this.state.inType) {\n          this.raise(Errors.InvalidIdentifier, {\n            at: this.state.curPosition(),\n            identifierName: fullWord\n          });\n        }\n        this.finishToken(130, fullWord);\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n        if (code === 123 && next === 124) {\n          this.finishOp(6, 2);\n        } else if (this.state.inType && (code === 62 || code === 60)) {\n          this.finishOp(code === 62 ? 48 : 47, 1);\n        } else if (this.state.inType && code === 63) {\n          if (next === 46) {\n            this.finishOp(18, 2);\n          } else {\n            this.finishOp(17, 1);\n          }\n        } else if (isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))) {\n          this.state.pos += 2;\n          this.readIterator();\n        } else {\n          _get(_getPrototypeOf(FlowParserMixin.prototype), \"getTokenFromCode\", this).call(this, code);\n        }\n      }\n    }, {\n      key: \"isAssignable\",\n      value: function isAssignable(node, isBinding) {\n        if (node.type === \"TypeCastExpression\") {\n          return this.isAssignable(node.expression, isBinding);\n        } else {\n          return _get(_getPrototypeOf(FlowParserMixin.prototype), \"isAssignable\", this).call(this, node, isBinding);\n        }\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        var isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        if (!isLHS && node.type === \"AssignmentExpression\" && node.left.type === \"TypeCastExpression\") {\n          node.left = this.typeCastToParameter(node.left);\n        }\n        _get(_getPrototypeOf(FlowParserMixin.prototype), \"toAssignable\", this).call(this, node, isLHS);\n      }\n    }, {\n      key: \"toAssignableList\",\n      value: function toAssignableList(exprList, trailingCommaLoc, isLHS) {\n        for (var i = 0; i < exprList.length; i++) {\n          var expr = exprList[i];\n          if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n            exprList[i] = this.typeCastToParameter(expr);\n          }\n        }\n        _get(_getPrototypeOf(FlowParserMixin.prototype), \"toAssignableList\", this).call(this, exprList, trailingCommaLoc, isLHS);\n      }\n    }, {\n      key: \"toReferencedList\",\n      value: function toReferencedList(exprList, isParenthesizedExpr) {\n        for (var i = 0; i < exprList.length; i++) {\n          var _expr$extra;\n          var expr = exprList[i];\n          if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n            this.raise(FlowErrors.TypeCastInPattern, {\n              at: expr.typeAnnotation\n            });\n          }\n        }\n        return exprList;\n      }\n    }, {\n      key: \"parseArrayLike\",\n      value: function parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n        var node = _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseArrayLike\", this).call(this, close, canBePattern, isTuple, refExpressionErrors);\n        if (canBePattern && !this.state.maybeInArrowParameters) {\n          this.toReferencedList(node.elements);\n        }\n        return node;\n      }\n    }, {\n      key: \"isValidLVal\",\n      value: function isValidLVal(type, isParenthesized, binding) {\n        return type === \"TypeCastExpression\" || _get(_getPrototypeOf(FlowParserMixin.prototype), \"isValidLVal\", this).call(this, type, isParenthesized, binding);\n      }\n    }, {\n      key: \"parseClassProperty\",\n      value: function parseClassProperty(node) {\n        if (this.match(14)) {\n          node.typeAnnotation = this.flowParseTypeAnnotation();\n        }\n        return _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseClassProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"parseClassPrivateProperty\",\n      value: function parseClassPrivateProperty(node) {\n        if (this.match(14)) {\n          node.typeAnnotation = this.flowParseTypeAnnotation();\n        }\n        return _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseClassPrivateProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"isClassMethod\",\n      value: function isClassMethod() {\n        return this.match(47) || _get(_getPrototypeOf(FlowParserMixin.prototype), \"isClassMethod\", this).call(this);\n      }\n    }, {\n      key: \"isClassProperty\",\n      value: function isClassProperty() {\n        return this.match(14) || _get(_getPrototypeOf(FlowParserMixin.prototype), \"isClassProperty\", this).call(this);\n      }\n    }, {\n      key: \"isNonstaticConstructor\",\n      value: function isNonstaticConstructor(method) {\n        return !this.match(14) && _get(_getPrototypeOf(FlowParserMixin.prototype), \"isNonstaticConstructor\", this).call(this, method);\n      }\n    }, {\n      key: \"pushClassMethod\",\n      value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n        if (method.variance) {\n          this.unexpected(method.variance.loc.start);\n        }\n        delete method.variance;\n        if (this.match(47)) {\n          method.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n        _get(_getPrototypeOf(FlowParserMixin.prototype), \"pushClassMethod\", this).call(this, classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n        if (method.params && isConstructor) {\n          var params = method.params;\n          if (params.length > 0 && this.isThisParam(params[0])) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: method\n            });\n          }\n        } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n          var _params2 = method.value.params;\n          if (_params2.length > 0 && this.isThisParam(_params2[0])) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: method\n            });\n          }\n        }\n      }\n    }, {\n      key: \"pushClassPrivateMethod\",\n      value: function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n        if (method.variance) {\n          this.unexpected(method.variance.loc.start);\n        }\n        delete method.variance;\n        if (this.match(47)) {\n          method.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n        _get(_getPrototypeOf(FlowParserMixin.prototype), \"pushClassPrivateMethod\", this).call(this, classBody, method, isGenerator, isAsync);\n      }\n    }, {\n      key: \"parseClassSuper\",\n      value: function parseClassSuper(node) {\n        _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseClassSuper\", this).call(this, node);\n        if (node.superClass && this.match(47)) {\n          node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n        }\n        if (this.isContextual(111)) {\n          this.next();\n          var implemented = node.implements = [];\n          do {\n            var _node3 = this.startNode();\n            _node3.id = this.flowParseRestrictedIdentifier(true);\n            if (this.match(47)) {\n              _node3.typeParameters = this.flowParseTypeParameterInstantiation();\n            } else {\n              _node3.typeParameters = null;\n            }\n            implemented.push(this.finishNode(_node3, \"ClassImplements\"));\n          } while (this.eat(12));\n        }\n      }\n    }, {\n      key: \"checkGetterSetterParams\",\n      value: function checkGetterSetterParams(method) {\n        _get(_getPrototypeOf(FlowParserMixin.prototype), \"checkGetterSetterParams\", this).call(this, method);\n        var params = this.getObjectOrClassMethodParams(method);\n        if (params.length > 0) {\n          var param = params[0];\n          if (this.isThisParam(param) && method.kind === \"get\") {\n            this.raise(FlowErrors.GetterMayNotHaveThisParam, {\n              at: param\n            });\n          } else if (this.isThisParam(param)) {\n            this.raise(FlowErrors.SetterMayNotHaveThisParam, {\n              at: param\n            });\n          }\n        }\n      }\n    }, {\n      key: \"parsePropertyNamePrefixOperator\",\n      value: function parsePropertyNamePrefixOperator(node) {\n        node.variance = this.flowParseVariance();\n      }\n    }, {\n      key: \"parseObjPropValue\",\n      value: function parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n        if (prop.variance) {\n          this.unexpected(prop.variance.loc.start);\n        }\n        delete prop.variance;\n        var typeParameters;\n        if (this.match(47) && !isAccessor) {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n          if (!this.match(10)) this.unexpected();\n        }\n        var result = _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseObjPropValue\", this).call(this, prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n        if (typeParameters) {\n          (result.value || result).typeParameters = typeParameters;\n        }\n        return result;\n      }\n    }, {\n      key: \"parseAssignableListItemTypes\",\n      value: function parseAssignableListItemTypes(param) {\n        if (this.eat(17)) {\n          if (param.type !== \"Identifier\") {\n            this.raise(FlowErrors.PatternIsOptional, {\n              at: param\n            });\n          }\n          if (this.isThisParam(param)) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, {\n              at: param\n            });\n          }\n          param.optional = true;\n        }\n        if (this.match(14)) {\n          param.typeAnnotation = this.flowParseTypeAnnotation();\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamAnnotationRequired, {\n            at: param\n          });\n        }\n        if (this.match(29) && this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamNoDefault, {\n            at: param\n          });\n        }\n        this.resetEndLocation(param);\n        return param;\n      }\n    }, {\n      key: \"parseMaybeDefault\",\n      value: function parseMaybeDefault(startLoc, left) {\n        var node = _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseMaybeDefault\", this).call(this, startLoc, left);\n        if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n          this.raise(FlowErrors.TypeBeforeInitializer, {\n            at: node.typeAnnotation\n          });\n        }\n        return node;\n      }\n    }, {\n      key: \"checkImportReflection\",\n      value: function checkImportReflection(node) {\n        _get(_getPrototypeOf(FlowParserMixin.prototype), \"checkImportReflection\", this).call(this, node);\n        if (node.module && node.importKind !== \"value\") {\n          this.raise(FlowErrors.ImportReflectionHasImportType, {\n            at: node.specifiers[0].loc.start\n          });\n        }\n      }\n    }, {\n      key: \"parseImportSpecifierLocal\",\n      value: function parseImportSpecifierLocal(node, specifier, type) {\n        specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n        node.specifiers.push(this.finishImportSpecifier(specifier, type));\n      }\n    }, {\n      key: \"isPotentialImportPhase\",\n      value: function isPotentialImportPhase(isExport) {\n        if (_get(_getPrototypeOf(FlowParserMixin.prototype), \"isPotentialImportPhase\", this).call(this, isExport)) return true;\n        if (this.isContextual(128)) {\n          if (!isExport) return true;\n          var ch = this.lookaheadCharCode();\n          return ch === 123 || ch === 42;\n        }\n        return !isExport && this.isContextual(87);\n      }\n    }, {\n      key: \"applyImportPhase\",\n      value: function applyImportPhase(node, isExport, phase, loc) {\n        _get(_getPrototypeOf(FlowParserMixin.prototype), \"applyImportPhase\", this).call(this, node, isExport, phase, loc);\n        if (isExport) {\n          if (!phase && this.match(65)) {\n            return;\n          }\n          node.exportKind = phase === \"type\" ? phase : \"value\";\n        } else {\n          if (phase === \"type\" && this.match(55)) this.unexpected();\n          node.importKind = phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n        }\n      }\n    }, {\n      key: \"parseImportSpecifier\",\n      value: function parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {\n        var firstIdent = specifier.imported;\n        var specifierTypeKind = null;\n        if (firstIdent.type === \"Identifier\") {\n          if (firstIdent.name === \"type\") {\n            specifierTypeKind = \"type\";\n          } else if (firstIdent.name === \"typeof\") {\n            specifierTypeKind = \"typeof\";\n          }\n        }\n        var isBinding = false;\n        if (this.isContextual(93) && !this.isLookaheadContextual(\"as\")) {\n          var as_ident = this.parseIdentifier(true);\n          if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {\n            specifier.imported = as_ident;\n            specifier.importKind = specifierTypeKind;\n            specifier.local = cloneIdentifier(as_ident);\n          } else {\n            specifier.imported = firstIdent;\n            specifier.importKind = null;\n            specifier.local = this.parseIdentifier();\n          }\n        } else {\n          if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {\n            specifier.imported = this.parseIdentifier(true);\n            specifier.importKind = specifierTypeKind;\n          } else {\n            if (importedIsString) {\n              throw this.raise(Errors.ImportBindingIsString, {\n                at: specifier,\n                importName: firstIdent.value\n              });\n            }\n            specifier.imported = firstIdent;\n            specifier.importKind = null;\n          }\n          if (this.eatContextual(93)) {\n            specifier.local = this.parseIdentifier();\n          } else {\n            isBinding = true;\n            specifier.local = cloneIdentifier(specifier.imported);\n          }\n        }\n        var specifierIsTypeImport = hasTypeImportKind(specifier);\n        if (isInTypeOnlyImport && specifierIsTypeImport) {\n          this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n            at: specifier\n          });\n        }\n        if (isInTypeOnlyImport || specifierIsTypeImport) {\n          this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);\n        }\n        if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n          this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);\n        }\n        return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n      }\n    }, {\n      key: \"parseBindingAtom\",\n      value: function parseBindingAtom() {\n        switch (this.state.type) {\n          case 78:\n            return this.parseIdentifier(true);\n          default:\n            return _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseBindingAtom\", this).call(this);\n        }\n      }\n    }, {\n      key: \"parseFunctionParams\",\n      value: function parseFunctionParams(node, isConstructor) {\n        var kind = node.kind;\n        if (kind !== \"get\" && kind !== \"set\" && this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n        _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseFunctionParams\", this).call(this, node, isConstructor);\n      }\n    }, {\n      key: \"parseVarId\",\n      value: function parseVarId(decl, kind) {\n        _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseVarId\", this).call(this, decl, kind);\n        if (this.match(14)) {\n          decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n          this.resetEndLocation(decl.id);\n        }\n      }\n    }, {\n      key: \"parseAsyncArrowFromCallExpression\",\n      value: function parseAsyncArrowFromCallExpression(node, call) {\n        if (this.match(14)) {\n          var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n          node.returnType = this.flowParseTypeAnnotation();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        }\n        return _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseAsyncArrowFromCallExpression\", this).call(this, node, call);\n      }\n    }, {\n      key: \"shouldParseAsyncArrow\",\n      value: function shouldParseAsyncArrow() {\n        return this.match(14) || _get(_getPrototypeOf(FlowParserMixin.prototype), \"shouldParseAsyncArrow\", this).call(this);\n      }\n    }, {\n      key: \"parseMaybeAssign\",\n      value: function parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n        var _this16 = this;\n        var _jsx;\n        var state = null;\n        var jsx;\n        if (this.hasPlugin(\"jsx\") && (this.match(140) || this.match(47))) {\n          state = this.state.clone();\n          jsx = this.tryParse(function () {\n            return _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseMaybeAssign\", _this16).call(_this16, refExpressionErrors, afterLeftParse);\n          }, state);\n          if (!jsx.error) return jsx.node;\n          var context = this.state.context;\n          var currentContext = context[context.length - 1];\n          if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n            context.pop();\n          }\n        }\n        if ((_jsx = jsx) != null && _jsx.error || this.match(47)) {\n          var _jsx2, _jsx3;\n          state = state || this.state.clone();\n          var typeParameters;\n          var arrow = this.tryParse(function (abort) {\n            var _arrowExpression$extr;\n            typeParameters = _this16.flowParseTypeParameterDeclaration();\n            var arrowExpression = _this16.forwardNoArrowParamsConversionAt(typeParameters, function () {\n              var result = _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseMaybeAssign\", _this16).call(_this16, refExpressionErrors, afterLeftParse);\n              _this16.resetStartLocationFromNode(result, typeParameters);\n              return result;\n            });\n            if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n            var expr = _this16.maybeUnwrapTypeCastExpression(arrowExpression);\n            if (expr.type !== \"ArrowFunctionExpression\") abort();\n            expr.typeParameters = typeParameters;\n            _this16.resetStartLocationFromNode(expr, typeParameters);\n            return arrowExpression;\n          }, state);\n          var arrowExpression = null;\n          if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n            if (!arrow.error && !arrow.aborted) {\n              if (arrow.node.async) {\n                this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, {\n                  at: typeParameters\n                });\n              }\n              return arrow.node;\n            }\n            arrowExpression = arrow.node;\n          }\n          if ((_jsx2 = jsx) != null && _jsx2.node) {\n            this.state = jsx.failState;\n            return jsx.node;\n          }\n          if (arrowExpression) {\n            this.state = arrow.failState;\n            return arrowExpression;\n          }\n          if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n          if (arrow.thrown) throw arrow.error;\n          throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n            at: typeParameters\n          });\n        }\n        return _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseMaybeAssign\", this).call(this, refExpressionErrors, afterLeftParse);\n      }\n    }, {\n      key: \"parseArrow\",\n      value: function parseArrow(node) {\n        var _this17 = this;\n        if (this.match(14)) {\n          var result = this.tryParse(function () {\n            var oldNoAnonFunctionType = _this17.state.noAnonFunctionType;\n            _this17.state.noAnonFunctionType = true;\n            var typeNode = _this17.startNode();\n            var _this17$flowParseType = _this17.flowParseTypeAndPredicateInitialiser();\n            var _this17$flowParseType2 = _slicedToArray(_this17$flowParseType, 2);\n            typeNode.typeAnnotation = _this17$flowParseType2[0];\n            node.predicate = _this17$flowParseType2[1];\n            _this17.state.noAnonFunctionType = oldNoAnonFunctionType;\n            if (_this17.canInsertSemicolon()) _this17.unexpected();\n            if (!_this17.match(19)) _this17.unexpected();\n            return typeNode;\n          });\n          if (result.thrown) return null;\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n        }\n        return _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseArrow\", this).call(this, node);\n      }\n    }, {\n      key: \"shouldParseArrow\",\n      value: function shouldParseArrow(params) {\n        return this.match(14) || _get(_getPrototypeOf(FlowParserMixin.prototype), \"shouldParseArrow\", this).call(this, params);\n      }\n    }, {\n      key: \"setArrowFunctionParameters\",\n      value: function setArrowFunctionParameters(node, params) {\n        if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n          node.params = params;\n        } else {\n          _get(_getPrototypeOf(FlowParserMixin.prototype), \"setArrowFunctionParameters\", this).call(this, node, params);\n        }\n      }\n    }, {\n      key: \"checkParams\",\n      value: function checkParams(node, allowDuplicates, isArrowFunction) {\n        var strictModeChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n        if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n          return;\n        }\n        for (var i = 0; i < node.params.length; i++) {\n          if (this.isThisParam(node.params[i]) && i > 0) {\n            this.raise(FlowErrors.ThisParamMustBeFirst, {\n              at: node.params[i]\n            });\n          }\n        }\n        _get(_getPrototypeOf(FlowParserMixin.prototype), \"checkParams\", this).call(this, node, allowDuplicates, isArrowFunction, strictModeChanged);\n      }\n    }, {\n      key: \"parseParenAndDistinguishExpression\",\n      value: function parseParenAndDistinguishExpression(canBeArrow) {\n        return _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseParenAndDistinguishExpression\", this).call(this, canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n      }\n    }, {\n      key: \"parseSubscripts\",\n      value: function parseSubscripts(base, startLoc, noCalls) {\n        var _this18 = this;\n        if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startLoc.index) !== -1) {\n          this.next();\n          var node = this.startNodeAt(startLoc);\n          node.callee = base;\n          node.arguments = _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseCallExpressionArguments\", this).call(this, 11, false);\n          base = this.finishNode(node, \"CallExpression\");\n        } else if (base.type === \"Identifier\" && base.name === \"async\" && this.match(47)) {\n          var state = this.state.clone();\n          var arrow = this.tryParse(function (abort) {\n            return _this18.parseAsyncArrowWithTypeParameters(startLoc) || abort();\n          }, state);\n          if (!arrow.error && !arrow.aborted) return arrow.node;\n          var result = this.tryParse(function () {\n            return _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseSubscripts\", _this18).call(_this18, base, startLoc, noCalls);\n          }, state);\n          if (result.node && !result.error) return result.node;\n          if (arrow.node) {\n            this.state = arrow.failState;\n            return arrow.node;\n          }\n          if (result.node) {\n            this.state = result.failState;\n            return result.node;\n          }\n          throw arrow.error || result.error;\n        }\n        return _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseSubscripts\", this).call(this, base, startLoc, noCalls);\n      }\n    }, {\n      key: \"parseSubscript\",\n      value: function parseSubscript(base, startLoc, noCalls, subscriptState) {\n        var _this19 = this;\n        if (this.match(18) && this.isLookaheadToken_lt()) {\n          subscriptState.optionalChainMember = true;\n          if (noCalls) {\n            subscriptState.stop = true;\n            return base;\n          }\n          this.next();\n          var node = this.startNodeAt(startLoc);\n          node.callee = base;\n          node.typeArguments = this.flowParseTypeParameterInstantiation();\n          this.expect(10);\n          node.arguments = this.parseCallExpressionArguments(11, false);\n          node.optional = true;\n          return this.finishCallExpression(node, true);\n        } else if (!noCalls && this.shouldParseTypes() && this.match(47)) {\n          var _node4 = this.startNodeAt(startLoc);\n          _node4.callee = base;\n          var result = this.tryParse(function () {\n            _node4.typeArguments = _this19.flowParseTypeParameterInstantiationCallOrNew();\n            _this19.expect(10);\n            _node4.arguments = _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseCallExpressionArguments\", _this19).call(_this19, 11, false);\n            if (subscriptState.optionalChainMember) {\n              _node4.optional = false;\n            }\n            return _this19.finishCallExpression(_node4, subscriptState.optionalChainMember);\n          });\n          if (result.node) {\n            if (result.error) this.state = result.failState;\n            return result.node;\n          }\n        }\n        return _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseSubscript\", this).call(this, base, startLoc, noCalls, subscriptState);\n      }\n    }, {\n      key: \"parseNewCallee\",\n      value: function parseNewCallee(node) {\n        var _this20 = this;\n        _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseNewCallee\", this).call(this, node);\n        var targs = null;\n        if (this.shouldParseTypes() && this.match(47)) {\n          targs = this.tryParse(function () {\n            return _this20.flowParseTypeParameterInstantiationCallOrNew();\n          }).node;\n        }\n        node.typeArguments = targs;\n      }\n    }, {\n      key: \"parseAsyncArrowWithTypeParameters\",\n      value: function parseAsyncArrowWithTypeParameters(startLoc) {\n        var node = this.startNodeAt(startLoc);\n        this.parseFunctionParams(node, false);\n        if (!this.parseArrow(node)) return;\n        return _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseArrowExpression\", this).call(this, node, undefined, true);\n      }\n    }, {\n      key: \"readToken_mult_modulo\",\n      value: function readToken_mult_modulo(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n        if (code === 42 && next === 47 && this.state.hasFlowComment) {\n          this.state.hasFlowComment = false;\n          this.state.pos += 2;\n          this.nextToken();\n          return;\n        }\n        _get(_getPrototypeOf(FlowParserMixin.prototype), \"readToken_mult_modulo\", this).call(this, code);\n      }\n    }, {\n      key: \"readToken_pipe_amp\",\n      value: function readToken_pipe_amp(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n        if (code === 124 && next === 125) {\n          this.finishOp(9, 2);\n          return;\n        }\n        _get(_getPrototypeOf(FlowParserMixin.prototype), \"readToken_pipe_amp\", this).call(this, code);\n      }\n    }, {\n      key: \"parseTopLevel\",\n      value: function parseTopLevel(file, program) {\n        var fileNode = _get(_getPrototypeOf(FlowParserMixin.prototype), \"parseTopLevel\", this).call(this, file, program);\n        if (this.state.hasFlowComment) {\n          this.raise(FlowErrors.UnterminatedFlowComment, {\n            at: this.state.curPosition()\n          });\n        }\n        return fileNode;\n      }\n    }, {\n      key: \"skipBlockComment\",\n      value: function skipBlockComment() {\n        if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n          if (this.state.hasFlowComment) {\n            throw this.raise(FlowErrors.NestedFlowComment, {\n              at: this.state.startLoc\n            });\n          }\n          this.hasFlowCommentCompletion();\n          var commentSkip = this.skipFlowComment();\n          if (commentSkip) {\n            this.state.pos += commentSkip;\n            this.state.hasFlowComment = true;\n          }\n          return;\n        }\n        return _get(_getPrototypeOf(FlowParserMixin.prototype), \"skipBlockComment\", this).call(this, this.state.hasFlowComment ? \"*-/\" : \"*/\");\n      }\n    }, {\n      key: \"skipFlowComment\",\n      value: function skipFlowComment() {\n        var pos = this.state.pos;\n        var shiftToFirstNonWhiteSpace = 2;\n        while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n          shiftToFirstNonWhiteSpace++;\n        }\n        var ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n        var ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n        if (ch2 === 58 && ch3 === 58) {\n          return shiftToFirstNonWhiteSpace + 2;\n        }\n        if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n          return shiftToFirstNonWhiteSpace + 12;\n        }\n        if (ch2 === 58 && ch3 !== 58) {\n          return shiftToFirstNonWhiteSpace;\n        }\n        return false;\n      }\n    }, {\n      key: \"hasFlowCommentCompletion\",\n      value: function hasFlowCommentCompletion() {\n        var end = this.input.indexOf(\"*/\", this.state.pos);\n        if (end === -1) {\n          throw this.raise(Errors.UnterminatedComment, {\n            at: this.state.curPosition()\n          });\n        }\n      }\n    }, {\n      key: \"flowEnumErrorBooleanMemberNotInitialized\",\n      value: function flowEnumErrorBooleanMemberNotInitialized(loc, _ref69) {\n        var enumName = _ref69.enumName,\n          memberName = _ref69.memberName;\n        this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n          at: loc,\n          memberName: memberName,\n          enumName: enumName\n        });\n      }\n    }, {\n      key: \"flowEnumErrorInvalidMemberInitializer\",\n      value: function flowEnumErrorInvalidMemberInitializer(loc, enumContext) {\n        return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === \"symbol\" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, Object.assign({\n          at: loc\n        }, enumContext));\n      }\n    }, {\n      key: \"flowEnumErrorNumberMemberNotInitialized\",\n      value: function flowEnumErrorNumberMemberNotInitialized(loc, _ref70) {\n        var enumName = _ref70.enumName,\n          memberName = _ref70.memberName;\n        this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n          at: loc,\n          enumName: enumName,\n          memberName: memberName\n        });\n      }\n    }, {\n      key: \"flowEnumErrorStringMemberInconsistentlyInitailized\",\n      value: function flowEnumErrorStringMemberInconsistentlyInitailized(node, _ref71) {\n        var enumName = _ref71.enumName;\n        this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n          at: node,\n          enumName: enumName\n        });\n      }\n    }, {\n      key: \"flowEnumMemberInit\",\n      value: function flowEnumMemberInit() {\n        var _this21 = this;\n        var startLoc = this.state.startLoc;\n        var endOfInit = function endOfInit() {\n          return _this21.match(12) || _this21.match(8);\n        };\n        switch (this.state.type) {\n          case 132:\n            {\n              var literal = this.parseNumericLiteral(this.state.value);\n              if (endOfInit()) {\n                return {\n                  type: \"number\",\n                  loc: literal.loc.start,\n                  value: literal\n                };\n              }\n              return {\n                type: \"invalid\",\n                loc: startLoc\n              };\n            }\n          case 131:\n            {\n              var _literal = this.parseStringLiteral(this.state.value);\n              if (endOfInit()) {\n                return {\n                  type: \"string\",\n                  loc: _literal.loc.start,\n                  value: _literal\n                };\n              }\n              return {\n                type: \"invalid\",\n                loc: startLoc\n              };\n            }\n          case 85:\n          case 86:\n            {\n              var _literal2 = this.parseBooleanLiteral(this.match(85));\n              if (endOfInit()) {\n                return {\n                  type: \"boolean\",\n                  loc: _literal2.loc.start,\n                  value: _literal2\n                };\n              }\n              return {\n                type: \"invalid\",\n                loc: startLoc\n              };\n            }\n          default:\n            return {\n              type: \"invalid\",\n              loc: startLoc\n            };\n        }\n      }\n    }, {\n      key: \"flowEnumMemberRaw\",\n      value: function flowEnumMemberRaw() {\n        var loc = this.state.startLoc;\n        var id = this.parseIdentifier(true);\n        var init = this.eat(29) ? this.flowEnumMemberInit() : {\n          type: \"none\",\n          loc: loc\n        };\n        return {\n          id: id,\n          init: init\n        };\n      }\n    }, {\n      key: \"flowEnumCheckExplicitTypeMismatch\",\n      value: function flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {\n        var explicitType = context.explicitType;\n        if (explicitType === null) {\n          return;\n        }\n        if (explicitType !== expectedType) {\n          this.flowEnumErrorInvalidMemberInitializer(loc, context);\n        }\n      }\n    }, {\n      key: \"flowEnumMembers\",\n      value: function flowEnumMembers(_ref72) {\n        var enumName = _ref72.enumName,\n          explicitType = _ref72.explicitType;\n        var seenNames = new Set();\n        var members = {\n          booleanMembers: [],\n          numberMembers: [],\n          stringMembers: [],\n          defaultedMembers: []\n        };\n        var hasUnknownMembers = false;\n        while (!this.match(8)) {\n          if (this.eat(21)) {\n            hasUnknownMembers = true;\n            break;\n          }\n          var memberNode = this.startNode();\n          var _this$flowEnumMemberR = this.flowEnumMemberRaw(),\n            id = _this$flowEnumMemberR.id,\n            init = _this$flowEnumMemberR.init;\n          var memberName = id.name;\n          if (memberName === \"\") {\n            continue;\n          }\n          if (/^[a-z]/.test(memberName)) {\n            this.raise(FlowErrors.EnumInvalidMemberName, {\n              at: id,\n              memberName: memberName,\n              suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n              enumName: enumName\n            });\n          }\n          if (seenNames.has(memberName)) {\n            this.raise(FlowErrors.EnumDuplicateMemberName, {\n              at: id,\n              memberName: memberName,\n              enumName: enumName\n            });\n          }\n          seenNames.add(memberName);\n          var context = {\n            enumName: enumName,\n            explicitType: explicitType,\n            memberName: memberName\n          };\n          memberNode.id = id;\n          switch (init.type) {\n            case \"boolean\":\n              {\n                this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"boolean\");\n                memberNode.init = init.value;\n                members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n                break;\n              }\n            case \"number\":\n              {\n                this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n                memberNode.init = init.value;\n                members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n                break;\n              }\n            case \"string\":\n              {\n                this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n                memberNode.init = init.value;\n                members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n                break;\n              }\n            case \"invalid\":\n              {\n                throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n              }\n            case \"none\":\n              {\n                switch (explicitType) {\n                  case \"boolean\":\n                    this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);\n                    break;\n                  case \"number\":\n                    this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                    break;\n                  default:\n                    members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n                }\n              }\n          }\n          if (!this.match(8)) {\n            this.expect(12);\n          }\n        }\n        return {\n          members: members,\n          hasUnknownMembers: hasUnknownMembers\n        };\n      }\n    }, {\n      key: \"flowEnumStringMembers\",\n      value: function flowEnumStringMembers(initializedMembers, defaultedMembers, _ref73) {\n        var enumName = _ref73.enumName;\n        if (initializedMembers.length === 0) {\n          return defaultedMembers;\n        } else if (defaultedMembers.length === 0) {\n          return initializedMembers;\n        } else if (defaultedMembers.length > initializedMembers.length) {\n          var _iterator2 = _createForOfIteratorHelper(initializedMembers),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var member = _step2.value;\n              this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n                enumName: enumName\n              });\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n          return defaultedMembers;\n        } else {\n          var _iterator3 = _createForOfIteratorHelper(defaultedMembers),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var _member = _step3.value;\n              this.flowEnumErrorStringMemberInconsistentlyInitailized(_member, {\n                enumName: enumName\n              });\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n          return initializedMembers;\n        }\n      }\n    }, {\n      key: \"flowEnumParseExplicitType\",\n      value: function flowEnumParseExplicitType(_ref74) {\n        var enumName = _ref74.enumName;\n        if (!this.eatContextual(101)) return null;\n        if (!tokenIsIdentifier(this.state.type)) {\n          throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n            at: this.state.startLoc,\n            enumName: enumName\n          });\n        }\n        var value = this.state.value;\n        this.next();\n        if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n          this.raise(FlowErrors.EnumInvalidExplicitType, {\n            at: this.state.startLoc,\n            enumName: enumName,\n            invalidEnumType: value\n          });\n        }\n        return value;\n      }\n    }, {\n      key: \"flowEnumBody\",\n      value: function flowEnumBody(node, id) {\n        var _this22 = this;\n        var enumName = id.name;\n        var nameLoc = id.loc.start;\n        var explicitType = this.flowEnumParseExplicitType({\n          enumName: enumName\n        });\n        this.expect(5);\n        var _this$flowEnumMembers = this.flowEnumMembers({\n            enumName: enumName,\n            explicitType: explicitType\n          }),\n          members = _this$flowEnumMembers.members,\n          hasUnknownMembers = _this$flowEnumMembers.hasUnknownMembers;\n        node.hasUnknownMembers = hasUnknownMembers;\n        switch (explicitType) {\n          case \"boolean\":\n            node.explicitType = true;\n            node.members = members.booleanMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          case \"number\":\n            node.explicitType = true;\n            node.members = members.numberMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumNumberBody\");\n          case \"string\":\n            node.explicitType = true;\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName: enumName\n            });\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          case \"symbol\":\n            node.members = members.defaultedMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumSymbolBody\");\n          default:\n            {\n              var empty = function empty() {\n                node.members = [];\n                _this22.expect(8);\n                return _this22.finishNode(node, \"EnumStringBody\");\n              };\n              node.explicitType = false;\n              var boolsLen = members.booleanMembers.length;\n              var numsLen = members.numberMembers.length;\n              var strsLen = members.stringMembers.length;\n              var defaultedLen = members.defaultedMembers.length;\n              if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n                return empty();\n              } else if (!boolsLen && !numsLen) {\n                node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n                  enumName: enumName\n                });\n                this.expect(8);\n                return this.finishNode(node, \"EnumStringBody\");\n              } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n                var _iterator4 = _createForOfIteratorHelper(members.defaultedMembers),\n                  _step4;\n                try {\n                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                    var member = _step4.value;\n                    this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                      enumName: enumName,\n                      memberName: member.id.name\n                    });\n                  }\n                } catch (err) {\n                  _iterator4.e(err);\n                } finally {\n                  _iterator4.f();\n                }\n                node.members = members.booleanMembers;\n                this.expect(8);\n                return this.finishNode(node, \"EnumBooleanBody\");\n              } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n                var _iterator5 = _createForOfIteratorHelper(members.defaultedMembers),\n                  _step5;\n                try {\n                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                    var _member2 = _step5.value;\n                    this.flowEnumErrorNumberMemberNotInitialized(_member2.loc.start, {\n                      enumName: enumName,\n                      memberName: _member2.id.name\n                    });\n                  }\n                } catch (err) {\n                  _iterator5.e(err);\n                } finally {\n                  _iterator5.f();\n                }\n                node.members = members.numberMembers;\n                this.expect(8);\n                return this.finishNode(node, \"EnumNumberBody\");\n              } else {\n                this.raise(FlowErrors.EnumInconsistentMemberValues, {\n                  at: nameLoc,\n                  enumName: enumName\n                });\n                return empty();\n              }\n            }\n        }\n      }\n    }, {\n      key: \"flowParseEnumDeclaration\",\n      value: function flowParseEnumDeclaration(node) {\n        var id = this.parseIdentifier();\n        node.id = id;\n        node.body = this.flowEnumBody(this.startNode(), id);\n        return this.finishNode(node, \"EnumDeclaration\");\n      }\n    }, {\n      key: \"isLookaheadToken_lt\",\n      value: function isLookaheadToken_lt() {\n        var next = this.nextTokenStart();\n        if (this.input.charCodeAt(next) === 60) {\n          var afterNext = this.input.charCodeAt(next + 1);\n          return afterNext !== 60 && afterNext !== 61;\n        }\n        return false;\n      }\n    }, {\n      key: \"maybeUnwrapTypeCastExpression\",\n      value: function maybeUnwrapTypeCastExpression(node) {\n        return node.type === \"TypeCastExpression\" ? node.expression : node;\n      }\n    }]);\n    return FlowParserMixin;\n  }(superClass);\n};\nvar entities = {\n  __proto__: null,\n  quot: \"\\\"\",\n  amp: \"&\",\n  apos: \"'\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\xA0\",\n  iexcl: \"\\xA1\",\n  cent: \"\\xA2\",\n  pound: \"\\xA3\",\n  curren: \"\\xA4\",\n  yen: \"\\xA5\",\n  brvbar: \"\\xA6\",\n  sect: \"\\xA7\",\n  uml: \"\\xA8\",\n  copy: \"\\xA9\",\n  ordf: \"\\xAA\",\n  laquo: \"\\xAB\",\n  not: \"\\xAC\",\n  shy: \"\\xAD\",\n  reg: \"\\xAE\",\n  macr: \"\\xAF\",\n  deg: \"\\xB0\",\n  plusmn: \"\\xB1\",\n  sup2: \"\\xB2\",\n  sup3: \"\\xB3\",\n  acute: \"\\xB4\",\n  micro: \"\\xB5\",\n  para: \"\\xB6\",\n  middot: \"\\xB7\",\n  cedil: \"\\xB8\",\n  sup1: \"\\xB9\",\n  ordm: \"\\xBA\",\n  raquo: \"\\xBB\",\n  frac14: \"\\xBC\",\n  frac12: \"\\xBD\",\n  frac34: \"\\xBE\",\n  iquest: \"\\xBF\",\n  Agrave: \"\\xC0\",\n  Aacute: \"\\xC1\",\n  Acirc: \"\\xC2\",\n  Atilde: \"\\xC3\",\n  Auml: \"\\xC4\",\n  Aring: \"\\xC5\",\n  AElig: \"\\xC6\",\n  Ccedil: \"\\xC7\",\n  Egrave: \"\\xC8\",\n  Eacute: \"\\xC9\",\n  Ecirc: \"\\xCA\",\n  Euml: \"\\xCB\",\n  Igrave: \"\\xCC\",\n  Iacute: \"\\xCD\",\n  Icirc: \"\\xCE\",\n  Iuml: \"\\xCF\",\n  ETH: \"\\xD0\",\n  Ntilde: \"\\xD1\",\n  Ograve: \"\\xD2\",\n  Oacute: \"\\xD3\",\n  Ocirc: \"\\xD4\",\n  Otilde: \"\\xD5\",\n  Ouml: \"\\xD6\",\n  times: \"\\xD7\",\n  Oslash: \"\\xD8\",\n  Ugrave: \"\\xD9\",\n  Uacute: \"\\xDA\",\n  Ucirc: \"\\xDB\",\n  Uuml: \"\\xDC\",\n  Yacute: \"\\xDD\",\n  THORN: \"\\xDE\",\n  szlig: \"\\xDF\",\n  agrave: \"\\xE0\",\n  aacute: \"\\xE1\",\n  acirc: \"\\xE2\",\n  atilde: \"\\xE3\",\n  auml: \"\\xE4\",\n  aring: \"\\xE5\",\n  aelig: \"\\xE6\",\n  ccedil: \"\\xE7\",\n  egrave: \"\\xE8\",\n  eacute: \"\\xE9\",\n  ecirc: \"\\xEA\",\n  euml: \"\\xEB\",\n  igrave: \"\\xEC\",\n  iacute: \"\\xED\",\n  icirc: \"\\xEE\",\n  iuml: \"\\xEF\",\n  eth: \"\\xF0\",\n  ntilde: \"\\xF1\",\n  ograve: \"\\xF2\",\n  oacute: \"\\xF3\",\n  ocirc: \"\\xF4\",\n  otilde: \"\\xF5\",\n  ouml: \"\\xF6\",\n  divide: \"\\xF7\",\n  oslash: \"\\xF8\",\n  ugrave: \"\\xF9\",\n  uacute: \"\\xFA\",\n  ucirc: \"\\xFB\",\n  uuml: \"\\xFC\",\n  yacute: \"\\xFD\",\n  thorn: \"\\xFE\",\n  yuml: \"\\xFF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nvar JsxErrors = ParseErrorEnum(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"jsx\"])))({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: function MissingClosingTagElement(_ref75) {\n    var openingTagName = _ref75.openingTagName;\n    return \"Expected corresponding JSX closing tag for <\".concat(openingTagName, \">.\");\n  },\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnexpectedToken: function UnexpectedToken(_ref76) {\n    var unexpected = _ref76.unexpected,\n      HTMLEntity = _ref76.HTMLEntity;\n    return \"Unexpected token `\".concat(unexpected, \"`. Did you mean `\").concat(HTMLEntity, \"` or `{'\").concat(unexpected, \"'}`?\");\n  },\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n});\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\nvar jsx = function jsx(superClass) {\n  return /*#__PURE__*/function (_superClass3) {\n    _inherits(JSXParserMixin, _superClass3);\n    var _super10 = _createSuper(JSXParserMixin);\n    function JSXParserMixin() {\n      _classCallCheck(this, JSXParserMixin);\n      return _super10.apply(this, arguments);\n    }\n    _createClass(JSXParserMixin, [{\n      key: \"jsxReadToken\",\n      value: function jsxReadToken() {\n        var out = \"\";\n        var chunkStart = this.state.pos;\n        for (;;) {\n          if (this.state.pos >= this.length) {\n            throw this.raise(JsxErrors.UnterminatedJsxContent, {\n              at: this.state.startLoc\n            });\n          }\n          var ch = this.input.charCodeAt(this.state.pos);\n          switch (ch) {\n            case 60:\n            case 123:\n              if (this.state.pos === this.state.start) {\n                if (ch === 60 && this.state.canStartJSXElement) {\n                  ++this.state.pos;\n                  this.finishToken(140);\n                } else {\n                  _get(_getPrototypeOf(JSXParserMixin.prototype), \"getTokenFromCode\", this).call(this, ch);\n                }\n                return;\n              }\n              out += this.input.slice(chunkStart, this.state.pos);\n              this.finishToken(139, out);\n              return;\n            case 38:\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadEntity();\n              chunkStart = this.state.pos;\n              break;\n            case 62:\n            case 125:\n            default:\n              if (isNewLine(ch)) {\n                out += this.input.slice(chunkStart, this.state.pos);\n                out += this.jsxReadNewLine(true);\n                chunkStart = this.state.pos;\n              } else {\n                ++this.state.pos;\n              }\n          }\n        }\n      }\n    }, {\n      key: \"jsxReadNewLine\",\n      value: function jsxReadNewLine(normalizeCRLF) {\n        var ch = this.input.charCodeAt(this.state.pos);\n        var out;\n        ++this.state.pos;\n        if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n          out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n        } else {\n          out = String.fromCharCode(ch);\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        return out;\n      }\n    }, {\n      key: \"jsxReadString\",\n      value: function jsxReadString(quote) {\n        var out = \"\";\n        var chunkStart = ++this.state.pos;\n        for (;;) {\n          if (this.state.pos >= this.length) {\n            throw this.raise(Errors.UnterminatedString, {\n              at: this.state.startLoc\n            });\n          }\n          var ch = this.input.charCodeAt(this.state.pos);\n          if (ch === quote) break;\n          if (ch === 38) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n          } else if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(false);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n        }\n        out += this.input.slice(chunkStart, this.state.pos++);\n        this.finishToken(131, out);\n      }\n    }, {\n      key: \"jsxReadEntity\",\n      value: function jsxReadEntity() {\n        var startPos = ++this.state.pos;\n        if (this.codePointAtPos(this.state.pos) === 35) {\n          ++this.state.pos;\n          var radix = 10;\n          if (this.codePointAtPos(this.state.pos) === 120) {\n            radix = 16;\n            ++this.state.pos;\n          }\n          var codePoint = this.readInt(radix, undefined, false, \"bail\");\n          if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {\n            ++this.state.pos;\n            return String.fromCodePoint(codePoint);\n          }\n        } else {\n          var count = 0;\n          var semi = false;\n          while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) == 59)) {\n            ++this.state.pos;\n          }\n          if (semi) {\n            var desc = this.input.slice(startPos, this.state.pos);\n            var entity = entities[desc];\n            ++this.state.pos;\n            if (entity) {\n              return entity;\n            }\n          }\n        }\n        this.state.pos = startPos;\n        return \"&\";\n      }\n    }, {\n      key: \"jsxReadWord\",\n      value: function jsxReadWord() {\n        var ch;\n        var start = this.state.pos;\n        do {\n          ch = this.input.charCodeAt(++this.state.pos);\n        } while (isIdentifierChar(ch) || ch === 45);\n        this.finishToken(138, this.input.slice(start, this.state.pos));\n      }\n    }, {\n      key: \"jsxParseIdentifier\",\n      value: function jsxParseIdentifier() {\n        var node = this.startNode();\n        if (this.match(138)) {\n          node.name = this.state.value;\n        } else if (tokenIsKeyword(this.state.type)) {\n          node.name = tokenLabelName(this.state.type);\n        } else {\n          this.unexpected();\n        }\n        this.next();\n        return this.finishNode(node, \"JSXIdentifier\");\n      }\n    }, {\n      key: \"jsxParseNamespacedName\",\n      value: function jsxParseNamespacedName() {\n        var startLoc = this.state.startLoc;\n        var name = this.jsxParseIdentifier();\n        if (!this.eat(14)) return name;\n        var node = this.startNodeAt(startLoc);\n        node.namespace = name;\n        node.name = this.jsxParseIdentifier();\n        return this.finishNode(node, \"JSXNamespacedName\");\n      }\n    }, {\n      key: \"jsxParseElementName\",\n      value: function jsxParseElementName() {\n        var startLoc = this.state.startLoc;\n        var node = this.jsxParseNamespacedName();\n        if (node.type === \"JSXNamespacedName\") {\n          return node;\n        }\n        while (this.eat(16)) {\n          var newNode = this.startNodeAt(startLoc);\n          newNode.object = node;\n          newNode.property = this.jsxParseIdentifier();\n          node = this.finishNode(newNode, \"JSXMemberExpression\");\n        }\n        return node;\n      }\n    }, {\n      key: \"jsxParseAttributeValue\",\n      value: function jsxParseAttributeValue() {\n        var node;\n        switch (this.state.type) {\n          case 5:\n            node = this.startNode();\n            this.setContext(types.brace);\n            this.next();\n            node = this.jsxParseExpressionContainer(node, types.j_oTag);\n            if (node.expression.type === \"JSXEmptyExpression\") {\n              this.raise(JsxErrors.AttributeIsEmpty, {\n                at: node\n              });\n            }\n            return node;\n          case 140:\n          case 131:\n            return this.parseExprAtom();\n          default:\n            throw this.raise(JsxErrors.UnsupportedJsxValue, {\n              at: this.state.startLoc\n            });\n        }\n      }\n    }, {\n      key: \"jsxParseEmptyExpression\",\n      value: function jsxParseEmptyExpression() {\n        var node = this.startNodeAt(this.state.lastTokEndLoc);\n        return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n      }\n    }, {\n      key: \"jsxParseSpreadChild\",\n      value: function jsxParseSpreadChild(node) {\n        this.next();\n        node.expression = this.parseExpression();\n        this.setContext(types.j_expr);\n        this.state.canStartJSXElement = true;\n        this.expect(8);\n        return this.finishNode(node, \"JSXSpreadChild\");\n      }\n    }, {\n      key: \"jsxParseExpressionContainer\",\n      value: function jsxParseExpressionContainer(node, previousContext) {\n        if (this.match(8)) {\n          node.expression = this.jsxParseEmptyExpression();\n        } else {\n          var expression = this.parseExpression();\n          node.expression = expression;\n        }\n        this.setContext(previousContext);\n        this.state.canStartJSXElement = true;\n        this.expect(8);\n        return this.finishNode(node, \"JSXExpressionContainer\");\n      }\n    }, {\n      key: \"jsxParseAttribute\",\n      value: function jsxParseAttribute() {\n        var node = this.startNode();\n        if (this.match(5)) {\n          this.setContext(types.brace);\n          this.next();\n          this.expect(21);\n          node.argument = this.parseMaybeAssignAllowIn();\n          this.setContext(types.j_oTag);\n          this.state.canStartJSXElement = true;\n          this.expect(8);\n          return this.finishNode(node, \"JSXSpreadAttribute\");\n        }\n        node.name = this.jsxParseNamespacedName();\n        node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;\n        return this.finishNode(node, \"JSXAttribute\");\n      }\n    }, {\n      key: \"jsxParseOpeningElementAt\",\n      value: function jsxParseOpeningElementAt(startLoc) {\n        var node = this.startNodeAt(startLoc);\n        if (this.eat(141)) {\n          return this.finishNode(node, \"JSXOpeningFragment\");\n        }\n        node.name = this.jsxParseElementName();\n        return this.jsxParseOpeningElementAfterName(node);\n      }\n    }, {\n      key: \"jsxParseOpeningElementAfterName\",\n      value: function jsxParseOpeningElementAfterName(node) {\n        var attributes = [];\n        while (!this.match(56) && !this.match(141)) {\n          attributes.push(this.jsxParseAttribute());\n        }\n        node.attributes = attributes;\n        node.selfClosing = this.eat(56);\n        this.expect(141);\n        return this.finishNode(node, \"JSXOpeningElement\");\n      }\n    }, {\n      key: \"jsxParseClosingElementAt\",\n      value: function jsxParseClosingElementAt(startLoc) {\n        var node = this.startNodeAt(startLoc);\n        if (this.eat(141)) {\n          return this.finishNode(node, \"JSXClosingFragment\");\n        }\n        node.name = this.jsxParseElementName();\n        this.expect(141);\n        return this.finishNode(node, \"JSXClosingElement\");\n      }\n    }, {\n      key: \"jsxParseElementAt\",\n      value: function jsxParseElementAt(startLoc) {\n        var node = this.startNodeAt(startLoc);\n        var children = [];\n        var openingElement = this.jsxParseOpeningElementAt(startLoc);\n        var closingElement = null;\n        if (!openingElement.selfClosing) {\n          contents: for (;;) {\n            switch (this.state.type) {\n              case 140:\n                startLoc = this.state.startLoc;\n                this.next();\n                if (this.eat(56)) {\n                  closingElement = this.jsxParseClosingElementAt(startLoc);\n                  break contents;\n                }\n                children.push(this.jsxParseElementAt(startLoc));\n                break;\n              case 139:\n                children.push(this.parseExprAtom());\n                break;\n              case 5:\n                {\n                  var _node5 = this.startNode();\n                  this.setContext(types.brace);\n                  this.next();\n                  if (this.match(21)) {\n                    children.push(this.jsxParseSpreadChild(_node5));\n                  } else {\n                    children.push(this.jsxParseExpressionContainer(_node5, types.j_expr));\n                  }\n                  break;\n                }\n              default:\n                this.unexpected();\n            }\n          }\n          if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {\n            this.raise(JsxErrors.MissingClosingTagFragment, {\n              at: closingElement\n            });\n          } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name)\n            });\n          } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n            if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n              this.raise(JsxErrors.MissingClosingTagElement, {\n                at: closingElement,\n                openingTagName: getQualifiedJSXName(openingElement.name)\n              });\n            }\n          }\n        }\n        if (isFragment(openingElement)) {\n          node.openingFragment = openingElement;\n          node.closingFragment = closingElement;\n        } else {\n          node.openingElement = openingElement;\n          node.closingElement = closingElement;\n        }\n        node.children = children;\n        if (this.match(47)) {\n          throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n            at: this.state.startLoc\n          });\n        }\n        return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n      }\n    }, {\n      key: \"jsxParseElement\",\n      value: function jsxParseElement() {\n        var startLoc = this.state.startLoc;\n        this.next();\n        return this.jsxParseElementAt(startLoc);\n      }\n    }, {\n      key: \"setContext\",\n      value: function setContext(newContext) {\n        var context = this.state.context;\n        context[context.length - 1] = newContext;\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom(refExpressionErrors) {\n        if (this.match(139)) {\n          return this.parseLiteral(this.state.value, \"JSXText\");\n        } else if (this.match(140)) {\n          return this.jsxParseElement();\n        } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {\n          this.replaceToken(140);\n          return this.jsxParseElement();\n        } else {\n          return _get(_getPrototypeOf(JSXParserMixin.prototype), \"parseExprAtom\", this).call(this, refExpressionErrors);\n        }\n      }\n    }, {\n      key: \"skipSpace\",\n      value: function skipSpace() {\n        var curContext = this.curContext();\n        if (!curContext.preserveSpace) _get(_getPrototypeOf(JSXParserMixin.prototype), \"skipSpace\", this).call(this);\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        var context = this.curContext();\n        if (context === types.j_expr) {\n          this.jsxReadToken();\n          return;\n        }\n        if (context === types.j_oTag || context === types.j_cTag) {\n          if (isIdentifierStart(code)) {\n            this.jsxReadWord();\n            return;\n          }\n          if (code === 62) {\n            ++this.state.pos;\n            this.finishToken(141);\n            return;\n          }\n          if ((code === 34 || code === 39) && context === types.j_oTag) {\n            this.jsxReadString(code);\n            return;\n          }\n        }\n        if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n          ++this.state.pos;\n          this.finishToken(140);\n          return;\n        }\n        _get(_getPrototypeOf(JSXParserMixin.prototype), \"getTokenFromCode\", this).call(this, code);\n      }\n    }, {\n      key: \"updateContext\",\n      value: function updateContext(prevType) {\n        var _this$state = this.state,\n          context = _this$state.context,\n          type = _this$state.type;\n        if (type === 56 && prevType === 140) {\n          context.splice(-2, 2, types.j_cTag);\n          this.state.canStartJSXElement = false;\n        } else if (type === 140) {\n          context.push(types.j_oTag);\n        } else if (type === 141) {\n          var out = context[context.length - 1];\n          if (out === types.j_oTag && prevType === 56 || out === types.j_cTag) {\n            context.pop();\n            this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;\n          } else {\n            this.setContext(types.j_expr);\n            this.state.canStartJSXElement = true;\n          }\n        } else {\n          this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n        }\n      }\n    }]);\n    return JSXParserMixin;\n  }(superClass);\n};\nvar TypeScriptScope = /*#__PURE__*/function (_Scope2) {\n  _inherits(TypeScriptScope, _Scope2);\n  var _super11 = _createSuper(TypeScriptScope);\n  function TypeScriptScope() {\n    var _this23;\n    _classCallCheck(this, TypeScriptScope);\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    _this23 = _super11.call.apply(_super11, [this].concat(args));\n    _this23.types = new Set();\n    _this23.enums = new Set();\n    _this23.constEnums = new Set();\n    _this23.classes = new Set();\n    _this23.exportOnlyBindings = new Set();\n    return _this23;\n  }\n  return _createClass(TypeScriptScope);\n}(Scope);\nvar TypeScriptScopeHandler = /*#__PURE__*/function (_ScopeHandler2) {\n  _inherits(TypeScriptScopeHandler, _ScopeHandler2);\n  var _super12 = _createSuper(TypeScriptScopeHandler);\n  function TypeScriptScopeHandler() {\n    var _this24;\n    _classCallCheck(this, TypeScriptScopeHandler);\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    _this24 = _super12.call.apply(_super12, [this].concat(args));\n    _this24.importsStack = [];\n    return _this24;\n  }\n  _createClass(TypeScriptScopeHandler, [{\n    key: \"createScope\",\n    value: function createScope(flags) {\n      this.importsStack.push(new Set());\n      return new TypeScriptScope(flags);\n    }\n  }, {\n    key: \"enter\",\n    value: function enter(flags) {\n      if (flags == SCOPE_TS_MODULE) {\n        this.importsStack.push(new Set());\n      }\n      _get(_getPrototypeOf(TypeScriptScopeHandler.prototype), \"enter\", this).call(this, flags);\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      var flags = _get(_getPrototypeOf(TypeScriptScopeHandler.prototype), \"exit\", this).call(this);\n      if (flags == SCOPE_TS_MODULE) {\n        this.importsStack.pop();\n      }\n      return flags;\n    }\n  }, {\n    key: \"hasImport\",\n    value: function hasImport(name, allowShadow) {\n      var len = this.importsStack.length;\n      if (this.importsStack[len - 1].has(name)) {\n        return true;\n      }\n      if (!allowShadow && len > 1) {\n        for (var i = 0; i < len - 1; i++) {\n          if (this.importsStack[i].has(name)) return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"declareName\",\n    value: function declareName(name, bindingType, loc) {\n      if (bindingType & BIND_FLAGS_TS_IMPORT) {\n        if (this.hasImport(name, true)) {\n          this.parser.raise(Errors.VarRedeclaration, {\n            at: loc,\n            identifierName: name\n          });\n        }\n        this.importsStack[this.importsStack.length - 1].add(name);\n        return;\n      }\n      var scope = this.currentScope();\n      if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n        this.maybeExportDefined(scope, name);\n        scope.exportOnlyBindings.add(name);\n        return;\n      }\n      _get(_getPrototypeOf(TypeScriptScopeHandler.prototype), \"declareName\", this).call(this, name, bindingType, loc);\n      if (bindingType & BIND_KIND_TYPE) {\n        if (!(bindingType & BIND_KIND_VALUE)) {\n          this.checkRedeclarationInScope(scope, name, bindingType, loc);\n          this.maybeExportDefined(scope, name);\n        }\n        scope.types.add(name);\n      }\n      if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n      if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n      if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n    }\n  }, {\n    key: \"isRedeclaredInScope\",\n    value: function isRedeclaredInScope(scope, name, bindingType) {\n      if (scope.enums.has(name)) {\n        if (bindingType & BIND_FLAGS_TS_ENUM) {\n          var isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n          var wasConst = scope.constEnums.has(name);\n          return isConst !== wasConst;\n        }\n        return true;\n      }\n      if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n        if (scope.lexical.has(name)) {\n          return !!(bindingType & BIND_KIND_VALUE);\n        } else {\n          return false;\n        }\n      }\n      if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n        return true;\n      }\n      return _get(_getPrototypeOf(TypeScriptScopeHandler.prototype), \"isRedeclaredInScope\", this).call(this, scope, name, bindingType);\n    }\n  }, {\n    key: \"checkLocalExport\",\n    value: function checkLocalExport(id) {\n      var name = id.name;\n      if (this.hasImport(name)) return;\n      var len = this.scopeStack.length;\n      for (var i = len - 1; i >= 0; i--) {\n        var scope = this.scopeStack[i];\n        if (scope.types.has(name) || scope.exportOnlyBindings.has(name)) return;\n      }\n      _get(_getPrototypeOf(TypeScriptScopeHandler.prototype), \"checkLocalExport\", this).call(this, id);\n    }\n  }]);\n  return TypeScriptScopeHandler;\n}(ScopeHandler);\nvar getOwn$1 = function getOwn$1(object, key) {\n  return Object.hasOwnProperty.call(object, key) && object[key];\n};\nvar unwrapParenthesizedExpression = function unwrapParenthesizedExpression(node) {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\nvar LValParser = /*#__PURE__*/function (_NodeUtils) {\n  _inherits(LValParser, _NodeUtils);\n  var _super13 = _createSuper(LValParser);\n  function LValParser() {\n    _classCallCheck(this, LValParser);\n    return _super13.apply(this, arguments);\n  }\n  _createClass(LValParser, [{\n    key: \"toAssignable\",\n    value: function toAssignable(node) {\n      var isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var _node$extra, _node$extra3;\n      var parenthesized = undefined;\n      if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n        parenthesized = unwrapParenthesizedExpression(node);\n        if (isLHS) {\n          if (parenthesized.type === \"Identifier\") {\n            this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, {\n              at: node\n            });\n          } else if (parenthesized.type !== \"MemberExpression\") {\n            this.raise(Errors.InvalidParenthesizedAssignment, {\n              at: node\n            });\n          }\n        } else {\n          this.raise(Errors.InvalidParenthesizedAssignment, {\n            at: node\n          });\n        }\n      }\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n        case \"RestElement\":\n          break;\n        case \"ObjectExpression\":\n          node.type = \"ObjectPattern\";\n          for (var i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n            var _node$extra2;\n            var prop = node.properties[i];\n            var isLast = i === last;\n            this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n            if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {\n              this.raise(Errors.RestTrailingComma, {\n                at: node.extra.trailingCommaLoc\n              });\n            }\n          }\n          break;\n        case \"ObjectProperty\":\n          {\n            var key = node.key,\n              value = node.value;\n            if (this.isPrivateName(key)) {\n              this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n            }\n            this.toAssignable(value, isLHS);\n            break;\n          }\n        case \"SpreadElement\":\n          {\n            throw new Error(\"Internal @babel/parser error (this is a bug, please report it).\" + \" SpreadElement should be converted by .toAssignable's caller.\");\n          }\n        case \"ArrayExpression\":\n          node.type = \"ArrayPattern\";\n          this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (node.operator !== \"=\") {\n            this.raise(Errors.MissingEqInAssignment, {\n              at: node.left.loc.end\n            });\n          }\n          node.type = \"AssignmentPattern\";\n          delete node.operator;\n          this.toAssignable(node.left, isLHS);\n          break;\n        case \"ParenthesizedExpression\":\n          this.toAssignable(parenthesized, isLHS);\n          break;\n      }\n    }\n  }, {\n    key: \"toAssignableObjectExpressionProp\",\n    value: function toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n      if (prop.type === \"ObjectMethod\") {\n        this.raise(prop.kind === \"get\" || prop.kind === \"set\" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, {\n          at: prop.key\n        });\n      } else if (prop.type === \"SpreadElement\") {\n        prop.type = \"RestElement\";\n        var arg = prop.argument;\n        this.checkToRestConversion(arg, false);\n        this.toAssignable(arg, isLHS);\n        if (!isLast) {\n          this.raise(Errors.RestTrailingComma, {\n            at: prop\n          });\n        }\n      } else {\n        this.toAssignable(prop, isLHS);\n      }\n    }\n  }, {\n    key: \"toAssignableList\",\n    value: function toAssignableList(exprList, trailingCommaLoc, isLHS) {\n      var end = exprList.length - 1;\n      for (var i = 0; i <= end; i++) {\n        var elt = exprList[i];\n        if (!elt) continue;\n        if (elt.type === \"SpreadElement\") {\n          elt.type = \"RestElement\";\n          var arg = elt.argument;\n          this.checkToRestConversion(arg, true);\n          this.toAssignable(arg, isLHS);\n        } else {\n          this.toAssignable(elt, isLHS);\n        }\n        if (elt.type === \"RestElement\") {\n          if (i < end) {\n            this.raise(Errors.RestTrailingComma, {\n              at: elt\n            });\n          } else if (trailingCommaLoc) {\n            this.raise(Errors.RestTrailingComma, {\n              at: trailingCommaLoc\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"isAssignable\",\n    value: function isAssignable(node, isBinding) {\n      var _this25 = this;\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n        case \"RestElement\":\n          return true;\n        case \"ObjectExpression\":\n          {\n            var last = node.properties.length - 1;\n            return node.properties.every(function (prop, i) {\n              return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && _this25.isAssignable(prop);\n            });\n          }\n        case \"ObjectProperty\":\n          return this.isAssignable(node.value);\n        case \"SpreadElement\":\n          return this.isAssignable(node.argument);\n        case \"ArrayExpression\":\n          return node.elements.every(function (element) {\n            return element === null || _this25.isAssignable(element);\n          });\n        case \"AssignmentExpression\":\n          return node.operator === \"=\";\n        case \"ParenthesizedExpression\":\n          return this.isAssignable(node.expression);\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n          return !isBinding;\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"toReferencedList\",\n    value: function toReferencedList(exprList, isParenthesizedExpr) {\n      return exprList;\n    }\n  }, {\n    key: \"toReferencedListDeep\",\n    value: function toReferencedListDeep(exprList, isParenthesizedExpr) {\n      this.toReferencedList(exprList, isParenthesizedExpr);\n      var _iterator6 = _createForOfIteratorHelper(exprList),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var expr = _step6.value;\n          if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n            this.toReferencedListDeep(expr.elements);\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"parseSpread\",\n    value: function parseSpread(refExpressionErrors) {\n      var node = this.startNode();\n      this.next();\n      node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined);\n      return this.finishNode(node, \"SpreadElement\");\n    }\n  }, {\n    key: \"parseRestBinding\",\n    value: function parseRestBinding() {\n      var node = this.startNode();\n      this.next();\n      node.argument = this.parseBindingAtom();\n      return this.finishNode(node, \"RestElement\");\n    }\n  }, {\n    key: \"parseBindingAtom\",\n    value: function parseBindingAtom() {\n      switch (this.state.type) {\n        case 0:\n          {\n            var node = this.startNode();\n            this.next();\n            node.elements = this.parseBindingList(3, 93, 1);\n            return this.finishNode(node, \"ArrayPattern\");\n          }\n        case 5:\n          return this.parseObjectLike(8, true);\n      }\n      return this.parseIdentifier();\n    }\n  }, {\n    key: \"parseBindingList\",\n    value: function parseBindingList(close, closeCharCode, flags) {\n      var allowEmpty = flags & 1;\n      var elts = [];\n      var first = true;\n      while (!this.eat(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(12);\n        }\n        if (allowEmpty && this.match(12)) {\n          elts.push(null);\n        } else if (this.eat(close)) {\n          break;\n        } else if (this.match(21)) {\n          elts.push(this.parseAssignableListItemTypes(this.parseRestBinding(), flags));\n          if (!this.checkCommaAfterRest(closeCharCode)) {\n            this.expect(close);\n            break;\n          }\n        } else {\n          var decorators = [];\n          if (this.match(26) && this.hasPlugin(\"decorators\")) {\n            this.raise(Errors.UnsupportedParameterDecorator, {\n              at: this.state.startLoc\n            });\n          }\n          while (this.match(26)) {\n            decorators.push(this.parseDecorator());\n          }\n          elts.push(this.parseAssignableListItem(flags, decorators));\n        }\n      }\n      return elts;\n    }\n  }, {\n    key: \"parseBindingRestProperty\",\n    value: function parseBindingRestProperty(prop) {\n      this.next();\n      prop.argument = this.parseIdentifier();\n      this.checkCommaAfterRest(125);\n      return this.finishNode(prop, \"RestElement\");\n    }\n  }, {\n    key: \"parseBindingProperty\",\n    value: function parseBindingProperty() {\n      var prop = this.startNode();\n      var _this$state2 = this.state,\n        type = _this$state2.type,\n        startLoc = _this$state2.startLoc;\n      if (type === 21) {\n        return this.parseBindingRestProperty(prop);\n      } else if (type === 136) {\n        this.expectPlugin(\"destructuringPrivate\", startLoc);\n        this.classScope.usePrivateName(this.state.value, startLoc);\n        prop.key = this.parsePrivateName();\n      } else {\n        this.parsePropertyName(prop);\n      }\n      prop.method = false;\n      return this.parseObjPropValue(prop, startLoc, false, false, true, false);\n    }\n  }, {\n    key: \"parseAssignableListItem\",\n    value: function parseAssignableListItem(flags, decorators) {\n      var left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left, flags);\n      var elt = this.parseMaybeDefault(left.loc.start, left);\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n      return elt;\n    }\n  }, {\n    key: \"parseAssignableListItemTypes\",\n    value: function parseAssignableListItemTypes(param, flags) {\n      return param;\n    }\n  }, {\n    key: \"parseMaybeDefault\",\n    value: function parseMaybeDefault(startLoc, left) {\n      var _startLoc, _left;\n      (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;\n      left = (_left = left) != null ? _left : this.parseBindingAtom();\n      if (!this.eat(29)) return left;\n      var node = this.startNodeAt(startLoc);\n      node.left = left;\n      node.right = this.parseMaybeAssignAllowIn();\n      return this.finishNode(node, \"AssignmentPattern\");\n    }\n  }, {\n    key: \"isValidLVal\",\n    value: function isValidLVal(type, isUnparenthesizedInAssign, binding) {\n      return getOwn$1({\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\"\n      }, type);\n    }\n  }, {\n    key: \"checkLVal\",\n    value: function checkLVal(expression, _ref77) {\n      var ancestor = _ref77.in,\n        _ref77$binding = _ref77.binding,\n        binding = _ref77$binding === void 0 ? BIND_NONE : _ref77$binding,\n        _ref77$checkClashes = _ref77.checkClashes,\n        checkClashes = _ref77$checkClashes === void 0 ? false : _ref77$checkClashes,\n        _ref77$strictModeChan = _ref77.strictModeChanged,\n        strictModeChanged = _ref77$strictModeChan === void 0 ? false : _ref77$strictModeChan,\n        _ref77$hasParenthesiz = _ref77.hasParenthesizedAncestor,\n        hasParenthesizedAncestor = _ref77$hasParenthesiz === void 0 ? false : _ref77$hasParenthesiz;\n      var _expression$extra;\n      var type = expression.type;\n      if (this.isObjectMethod(expression)) return;\n      if (type === \"MemberExpression\") {\n        if (binding !== BIND_NONE) {\n          this.raise(Errors.InvalidPropertyBindingPattern, {\n            at: expression\n          });\n        }\n        return;\n      }\n      if (type === \"Identifier\") {\n        this.checkIdentifier(expression, binding, strictModeChanged);\n        var name = expression.name;\n        if (checkClashes) {\n          if (checkClashes.has(name)) {\n            this.raise(Errors.ParamDupe, {\n              at: expression\n            });\n          } else {\n            checkClashes.add(name);\n          }\n        }\n        return;\n      }\n      var validity = this.isValidLVal(type, !(hasParenthesizedAncestor || (_expression$extra = expression.extra) != null && _expression$extra.parenthesized) && ancestor.type === \"AssignmentExpression\", binding);\n      if (validity === true) return;\n      if (validity === false) {\n        var ParseErrorClass = binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n        this.raise(ParseErrorClass, {\n          at: expression,\n          ancestor: ancestor\n        });\n        return;\n      }\n      var _ref78 = Array.isArray(validity) ? validity : [validity, type === \"ParenthesizedExpression\"],\n        _ref79 = _slicedToArray(_ref78, 2),\n        key = _ref79[0],\n        isParenthesizedExpression = _ref79[1];\n      var nextAncestor = type === \"ArrayPattern\" || type === \"ObjectPattern\" || type === \"ParenthesizedExpression\" ? {\n        type: type\n      } : ancestor;\n      var _iterator7 = _createForOfIteratorHelper([].concat(expression[key])),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var child = _step7.value;\n          if (child) {\n            this.checkLVal(child, {\n              in: nextAncestor,\n              binding: binding,\n              checkClashes: checkClashes,\n              strictModeChanged: strictModeChanged,\n              hasParenthesizedAncestor: isParenthesizedExpression\n            });\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n  }, {\n    key: \"checkIdentifier\",\n    value: function checkIdentifier(at, bindingType) {\n      var strictModeChanged = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name))) {\n        if (bindingType === BIND_NONE) {\n          this.raise(Errors.StrictEvalArguments, {\n            at: at,\n            referenceName: at.name\n          });\n        } else {\n          this.raise(Errors.StrictEvalArgumentsBinding, {\n            at: at,\n            bindingName: at.name\n          });\n        }\n      }\n      if (bindingType & BIND_FLAGS_NO_LET_IN_LEXICAL && at.name === \"let\") {\n        this.raise(Errors.LetInLexicalBinding, {\n          at: at\n        });\n      }\n      if (!(bindingType & BIND_NONE)) {\n        this.declareNameFromIdentifier(at, bindingType);\n      }\n    }\n  }, {\n    key: \"declareNameFromIdentifier\",\n    value: function declareNameFromIdentifier(identifier, binding) {\n      this.scope.declareName(identifier.name, binding, identifier.loc.start);\n    }\n  }, {\n    key: \"checkToRestConversion\",\n    value: function checkToRestConversion(node, allowPattern) {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.checkToRestConversion(node.expression, allowPattern);\n          break;\n        case \"Identifier\":\n        case \"MemberExpression\":\n          break;\n        case \"ArrayExpression\":\n        case \"ObjectExpression\":\n          if (allowPattern) break;\n        default:\n          this.raise(Errors.InvalidRestAssignmentPattern, {\n            at: node\n          });\n      }\n    }\n  }, {\n    key: \"checkCommaAfterRest\",\n    value: function checkCommaAfterRest(close) {\n      if (!this.match(12)) {\n        return false;\n      }\n      this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, {\n        at: this.state.startLoc\n      });\n      return true;\n    }\n  }]);\n  return LValParser;\n}(NodeUtils);\nvar getOwn = function getOwn(object, key) {\n  return Object.hasOwnProperty.call(object, key) && object[key];\n};\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(\"Unexpected \".concat(x, \" value.\"));\n  }\n  return x;\n}\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\nvar TSErrors = ParseErrorEnum(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"typescript\"])))({\n  AbstractMethodHasImplementation: function AbstractMethodHasImplementation(_ref80) {\n    var methodName = _ref80.methodName;\n    return \"Method '\".concat(methodName, \"' cannot have an implementation because it is marked abstract.\");\n  },\n  AbstractPropertyHasInitializer: function AbstractPropertyHasInitializer(_ref81) {\n    var propertyName = _ref81.propertyName;\n    return \"Property '\".concat(propertyName, \"' cannot have an initializer because it is marked abstract.\");\n  },\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  AccessorCannotBeOptional: \"An 'accessor' property cannot be declared optional.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: function DeclareAccessor(_ref82) {\n    var kind = _ref82.kind;\n    return \"'declare' is not allowed in \".concat(kind, \"ters.\");\n  },\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: function DuplicateAccessibilityModifier(_ref83) {\n    var modifier = _ref83.modifier;\n    return \"Accessibility modifier already seen.\";\n  },\n  DuplicateModifier: function DuplicateModifier(_ref84) {\n    var modifier = _ref84.modifier;\n    return \"Duplicate modifier: '\".concat(modifier, \"'.\");\n  },\n  EmptyHeritageClauseType: function EmptyHeritageClauseType(_ref85) {\n    var token = _ref85.token;\n    return \"'\".concat(token, \"' list cannot be empty.\");\n  },\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType: \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: function IncompatibleModifiers(_ref86) {\n    var modifiers = _ref86.modifiers;\n    return \"'\".concat(modifiers[0], \"' modifier cannot be used with '\").concat(modifiers[1], \"' modifier.\");\n  },\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: function IndexSignatureHasAccessibility(_ref87) {\n    var modifier = _ref87.modifier;\n    return \"Index signatures cannot have an accessibility modifier ('\".concat(modifier, \"').\");\n  },\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext: \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: function InvalidModifierOnTypeMember(_ref88) {\n    var modifier = _ref88.modifier;\n    return \"'\".concat(modifier, \"' modifier cannot appear on a type member.\");\n  },\n  InvalidModifierOnTypeParameter: function InvalidModifierOnTypeParameter(_ref89) {\n    var modifier = _ref89.modifier;\n    return \"'\".concat(modifier, \"' modifier cannot appear on a type parameter.\");\n  },\n  InvalidModifierOnTypeParameterPositions: function InvalidModifierOnTypeParameterPositions(_ref90) {\n    var modifier = _ref90.modifier;\n    return \"'\".concat(modifier, \"' modifier can only appear on a type parameter of a class, interface or type alias.\");\n  },\n  InvalidModifiersOrder: function InvalidModifiersOrder(_ref91) {\n    var orderedModifiers = _ref91.orderedModifiers;\n    return \"'\".concat(orderedModifiers[0], \"' modifier must precede '\").concat(orderedModifiers[1], \"' modifier.\");\n  },\n  InvalidPropertyAccessAfterInstantiationExpression: \"Invalid property access after an instantiation expression. \" + \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName: \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: function PrivateElementHasAccessibility(_ref92) {\n    var modifier = _ref92.modifier;\n    return \"Private elements cannot have an accessibility modifier ('\".concat(modifier, \"').\");\n  },\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam: \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion: \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: function SingleTypeParameterWithoutTrailingComma(_ref93) {\n    var typeParameterName = _ref93.typeParameterName;\n    return \"Single type parameter \".concat(typeParameterName, \" should have a trailing comma. Example usage: <\").concat(typeParameterName, \",>.\");\n  },\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TupleOptionalAfterType: \"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports: \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports: \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: function UnsupportedSignatureParameterKind(_ref94) {\n    var type = _ref94.type;\n    return \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got \".concat(type, \".\");\n  }\n});\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\nfunction tsIsVarianceAnnotations(modifier) {\n  return modifier === \"in\" || modifier === \"out\";\n}\nvar typescript = function typescript(superClass) {\n  return /*#__PURE__*/function (_superClass4) {\n    _inherits(TypeScriptParserMixin, _superClass4);\n    var _super14 = _createSuper(TypeScriptParserMixin);\n    function TypeScriptParserMixin() {\n      var _this26;\n      _classCallCheck(this, TypeScriptParserMixin);\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n      _this26 = _super14.call.apply(_super14, [this].concat(args));\n      _this26.tsParseInOutModifiers = _this26.tsParseModifiers.bind(_assertThisInitialized(_this26), {\n        allowedModifiers: [\"in\", \"out\"],\n        disallowedModifiers: [\"const\", \"public\", \"private\", \"protected\", \"readonly\", \"declare\", \"abstract\", \"override\"],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameter\n      });\n      _this26.tsParseConstModifier = _this26.tsParseModifiers.bind(_assertThisInitialized(_this26), {\n        allowedModifiers: [\"const\"],\n        disallowedModifiers: [\"in\", \"out\"],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions\n      });\n      _this26.tsParseInOutConstModifiers = _this26.tsParseModifiers.bind(_assertThisInitialized(_this26), {\n        allowedModifiers: [\"in\", \"out\", \"const\"],\n        disallowedModifiers: [\"public\", \"private\", \"protected\", \"readonly\", \"declare\", \"abstract\", \"override\"],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameter\n      });\n      return _this26;\n    }\n    _createClass(TypeScriptParserMixin, [{\n      key: \"getScopeHandler\",\n      value: function getScopeHandler() {\n        return TypeScriptScopeHandler;\n      }\n    }, {\n      key: \"tsIsIdentifier\",\n      value: function tsIsIdentifier() {\n        return tokenIsIdentifier(this.state.type);\n      }\n    }, {\n      key: \"tsTokenCanFollowModifier\",\n      value: function tsTokenCanFollowModifier() {\n        return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(136) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n      }\n    }, {\n      key: \"tsNextTokenCanFollowModifier\",\n      value: function tsNextTokenCanFollowModifier() {\n        this.next();\n        return this.tsTokenCanFollowModifier();\n      }\n    }, {\n      key: \"tsParseModifier\",\n      value: function tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {\n        if (!tokenIsIdentifier(this.state.type) && this.state.type !== 58 && this.state.type !== 75) {\n          return undefined;\n        }\n        var modifier = this.state.value;\n        if (allowedModifiers.indexOf(modifier) !== -1) {\n          if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n            return undefined;\n          }\n          if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n            return modifier;\n          }\n        }\n        return undefined;\n      }\n    }, {\n      key: \"tsParseModifiers\",\n      value: function tsParseModifiers(_ref95, modified) {\n        var _this27 = this;\n        var allowedModifiers = _ref95.allowedModifiers,\n          disallowedModifiers = _ref95.disallowedModifiers,\n          stopOnStartOfClassStaticBlock = _ref95.stopOnStartOfClassStaticBlock,\n          _ref95$errorTemplate = _ref95.errorTemplate,\n          errorTemplate = _ref95$errorTemplate === void 0 ? TSErrors.InvalidModifierOnTypeMember : _ref95$errorTemplate;\n        var enforceOrder = function enforceOrder(loc, modifier, before, after) {\n          if (modifier === before && modified[after]) {\n            _this27.raise(TSErrors.InvalidModifiersOrder, {\n              at: loc,\n              orderedModifiers: [before, after]\n            });\n          }\n        };\n        var incompatible = function incompatible(loc, modifier, mod1, mod2) {\n          if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n            _this27.raise(TSErrors.IncompatibleModifiers, {\n              at: loc,\n              modifiers: [mod1, mod2]\n            });\n          }\n        };\n        for (;;) {\n          var startLoc = this.state.startLoc;\n          var modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);\n          if (!modifier) break;\n          if (tsIsAccessModifier(modifier)) {\n            if (modified.accessibility) {\n              this.raise(TSErrors.DuplicateAccessibilityModifier, {\n                at: startLoc,\n                modifier: modifier\n              });\n            } else {\n              enforceOrder(startLoc, modifier, modifier, \"override\");\n              enforceOrder(startLoc, modifier, modifier, \"static\");\n              enforceOrder(startLoc, modifier, modifier, \"readonly\");\n              modified.accessibility = modifier;\n            }\n          } else if (tsIsVarianceAnnotations(modifier)) {\n            if (modified[modifier]) {\n              this.raise(TSErrors.DuplicateModifier, {\n                at: startLoc,\n                modifier: modifier\n              });\n            }\n            modified[modifier] = true;\n            enforceOrder(startLoc, modifier, \"in\", \"out\");\n          } else {\n            if (Object.hasOwnProperty.call(modified, modifier)) {\n              this.raise(TSErrors.DuplicateModifier, {\n                at: startLoc,\n                modifier: modifier\n              });\n            } else {\n              enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n              enforceOrder(startLoc, modifier, \"static\", \"override\");\n              enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n              enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n              incompatible(startLoc, modifier, \"declare\", \"override\");\n              incompatible(startLoc, modifier, \"static\", \"abstract\");\n            }\n            modified[modifier] = true;\n          }\n          if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n            this.raise(errorTemplate, {\n              at: startLoc,\n              modifier: modifier\n            });\n          }\n        }\n      }\n    }, {\n      key: \"tsIsListTerminator\",\n      value: function tsIsListTerminator(kind) {\n        switch (kind) {\n          case \"EnumMembers\":\n          case \"TypeMembers\":\n            return this.match(8);\n          case \"HeritageClauseElement\":\n            return this.match(5);\n          case \"TupleElementTypes\":\n            return this.match(3);\n          case \"TypeParametersOrArguments\":\n            return this.match(48);\n        }\n      }\n    }, {\n      key: \"tsParseList\",\n      value: function tsParseList(kind, parseElement) {\n        var result = [];\n        while (!this.tsIsListTerminator(kind)) {\n          result.push(parseElement());\n        }\n        return result;\n      }\n    }, {\n      key: \"tsParseDelimitedList\",\n      value: function tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {\n        return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));\n      }\n    }, {\n      key: \"tsParseDelimitedListWorker\",\n      value: function tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {\n        var result = [];\n        var trailingCommaPos = -1;\n        for (;;) {\n          if (this.tsIsListTerminator(kind)) {\n            break;\n          }\n          trailingCommaPos = -1;\n          var element = parseElement();\n          if (element == null) {\n            return undefined;\n          }\n          result.push(element);\n          if (this.eat(12)) {\n            trailingCommaPos = this.state.lastTokStart;\n            continue;\n          }\n          if (this.tsIsListTerminator(kind)) {\n            break;\n          }\n          if (expectSuccess) {\n            this.expect(12);\n          }\n          return undefined;\n        }\n        if (refTrailingCommaPos) {\n          refTrailingCommaPos.value = trailingCommaPos;\n        }\n        return result;\n      }\n    }, {\n      key: \"tsParseBracketedList\",\n      value: function tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {\n        if (!skipFirstToken) {\n          if (bracket) {\n            this.expect(0);\n          } else {\n            this.expect(47);\n          }\n        }\n        var result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);\n        if (bracket) {\n          this.expect(3);\n        } else {\n          this.expect(48);\n        }\n        return result;\n      }\n    }, {\n      key: \"tsParseImportType\",\n      value: function tsParseImportType() {\n        var node = this.startNode();\n        this.expect(83);\n        this.expect(10);\n        if (!this.match(131)) {\n          this.raise(TSErrors.UnsupportedImportTypeArgument, {\n            at: this.state.startLoc\n          });\n        }\n        node.argument = _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseExprAtom\", this).call(this);\n        this.expect(11);\n        if (this.eat(16)) {\n          node.qualifier = this.tsParseEntityName();\n        }\n        if (this.match(47)) {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n        return this.finishNode(node, \"TSImportType\");\n      }\n    }, {\n      key: \"tsParseEntityName\",\n      value: function tsParseEntityName() {\n        var allowReservedWords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var entity = this.parseIdentifier(allowReservedWords);\n        while (this.eat(16)) {\n          var node = this.startNodeAtNode(entity);\n          node.left = entity;\n          node.right = this.parseIdentifier(allowReservedWords);\n          entity = this.finishNode(node, \"TSQualifiedName\");\n        }\n        return entity;\n      }\n    }, {\n      key: \"tsParseTypeReference\",\n      value: function tsParseTypeReference() {\n        var node = this.startNode();\n        node.typeName = this.tsParseEntityName();\n        if (!this.hasPrecedingLineBreak() && this.match(47)) {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n        return this.finishNode(node, \"TSTypeReference\");\n      }\n    }, {\n      key: \"tsParseThisTypePredicate\",\n      value: function tsParseThisTypePredicate(lhs) {\n        this.next();\n        var node = this.startNodeAtNode(lhs);\n        node.parameterName = lhs;\n        node.typeAnnotation = this.tsParseTypeAnnotation(false);\n        node.asserts = false;\n        return this.finishNode(node, \"TSTypePredicate\");\n      }\n    }, {\n      key: \"tsParseThisTypeNode\",\n      value: function tsParseThisTypeNode() {\n        var node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSThisType\");\n      }\n    }, {\n      key: \"tsParseTypeQuery\",\n      value: function tsParseTypeQuery() {\n        var node = this.startNode();\n        this.expect(87);\n        if (this.match(83)) {\n          node.exprName = this.tsParseImportType();\n        } else {\n          node.exprName = this.tsParseEntityName();\n        }\n        if (!this.hasPrecedingLineBreak() && this.match(47)) {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n        return this.finishNode(node, \"TSTypeQuery\");\n      }\n    }, {\n      key: \"tsParseTypeParameter\",\n      value: function tsParseTypeParameter(parseModifiers) {\n        var node = this.startNode();\n        parseModifiers(node);\n        node.name = this.tsParseTypeParameterName();\n        node.constraint = this.tsEatThenParseType(81);\n        node.default = this.tsEatThenParseType(29);\n        return this.finishNode(node, \"TSTypeParameter\");\n      }\n    }, {\n      key: \"tsTryParseTypeParameters\",\n      value: function tsTryParseTypeParameters(parseModifiers) {\n        if (this.match(47)) {\n          return this.tsParseTypeParameters(parseModifiers);\n        }\n      }\n    }, {\n      key: \"tsParseTypeParameters\",\n      value: function tsParseTypeParameters(parseModifiers) {\n        var node = this.startNode();\n        if (this.match(47) || this.match(140)) {\n          this.next();\n        } else {\n          this.unexpected();\n        }\n        var refTrailingCommaPos = {\n          value: -1\n        };\n        node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos);\n        if (node.params.length === 0) {\n          this.raise(TSErrors.EmptyTypeParameters, {\n            at: node\n          });\n        }\n        if (refTrailingCommaPos.value !== -1) {\n          this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n        }\n        return this.finishNode(node, \"TSTypeParameterDeclaration\");\n      }\n    }, {\n      key: \"tsFillSignature\",\n      value: function tsFillSignature(returnToken, signature) {\n        var returnTokenRequired = returnToken === 19;\n        var paramsKey = \"parameters\";\n        var returnTypeKey = \"typeAnnotation\";\n        signature.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n        this.expect(10);\n        signature[paramsKey] = this.tsParseBindingListForSignature();\n        if (returnTokenRequired) {\n          signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n        } else if (this.match(returnToken)) {\n          signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n        }\n      }\n    }, {\n      key: \"tsParseBindingListForSignature\",\n      value: function tsParseBindingListForSignature() {\n        var list = _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseBindingList\", this).call(this, 11, 41, 2);\n        var _iterator8 = _createForOfIteratorHelper(list),\n          _step8;\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var pattern = _step8.value;\n            var type = pattern.type;\n            if (type === \"AssignmentPattern\" || type === \"TSParameterProperty\") {\n              this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n                at: pattern,\n                type: type\n              });\n            }\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n        return list;\n      }\n    }, {\n      key: \"tsParseTypeMemberSemicolon\",\n      value: function tsParseTypeMemberSemicolon() {\n        if (!this.eat(12) && !this.isLineTerminator()) {\n          this.expect(13);\n        }\n      }\n    }, {\n      key: \"tsParseSignatureMember\",\n      value: function tsParseSignatureMember(kind, node) {\n        this.tsFillSignature(14, node);\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(node, kind);\n      }\n    }, {\n      key: \"tsIsUnambiguouslyIndexSignature\",\n      value: function tsIsUnambiguouslyIndexSignature() {\n        this.next();\n        if (tokenIsIdentifier(this.state.type)) {\n          this.next();\n          return this.match(14);\n        }\n        return false;\n      }\n    }, {\n      key: \"tsTryParseIndexSignature\",\n      value: function tsTryParseIndexSignature(node) {\n        if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n          return;\n        }\n        this.expect(0);\n        var id = this.parseIdentifier();\n        id.typeAnnotation = this.tsParseTypeAnnotation();\n        this.resetEndLocation(id);\n        this.expect(3);\n        node.parameters = [id];\n        var type = this.tsTryParseTypeAnnotation();\n        if (type) node.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(node, \"TSIndexSignature\");\n      }\n    }, {\n      key: \"tsParsePropertyOrMethodSignature\",\n      value: function tsParsePropertyOrMethodSignature(node, readonly) {\n        if (this.eat(17)) node.optional = true;\n        var nodeAny = node;\n        if (this.match(10) || this.match(47)) {\n          if (readonly) {\n            this.raise(TSErrors.ReadonlyForMethodSignature, {\n              at: node\n            });\n          }\n          var method = nodeAny;\n          if (method.kind && this.match(47)) {\n            this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n              at: this.state.curPosition()\n            });\n          }\n          this.tsFillSignature(14, method);\n          this.tsParseTypeMemberSemicolon();\n          var paramsKey = \"parameters\";\n          var returnTypeKey = \"typeAnnotation\";\n          if (method.kind === \"get\") {\n            if (method[paramsKey].length > 0) {\n              this.raise(Errors.BadGetterArity, {\n                at: this.state.curPosition()\n              });\n              if (this.isThisParam(method[paramsKey][0])) {\n                this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                  at: this.state.curPosition()\n                });\n              }\n            }\n          } else if (method.kind === \"set\") {\n            if (method[paramsKey].length !== 1) {\n              this.raise(Errors.BadSetterArity, {\n                at: this.state.curPosition()\n              });\n            } else {\n              var firstParameter = method[paramsKey][0];\n              if (this.isThisParam(firstParameter)) {\n                this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                  at: this.state.curPosition()\n                });\n              }\n              if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n                this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                  at: this.state.curPosition()\n                });\n              }\n              if (firstParameter.type === \"RestElement\") {\n                this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                  at: this.state.curPosition()\n                });\n              }\n            }\n            if (method[returnTypeKey]) {\n              this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n                at: method[returnTypeKey]\n              });\n            }\n          } else {\n            method.kind = \"method\";\n          }\n          return this.finishNode(method, \"TSMethodSignature\");\n        } else {\n          var property = nodeAny;\n          if (readonly) property.readonly = true;\n          var type = this.tsTryParseTypeAnnotation();\n          if (type) property.typeAnnotation = type;\n          this.tsParseTypeMemberSemicolon();\n          return this.finishNode(property, \"TSPropertySignature\");\n        }\n      }\n    }, {\n      key: \"tsParseTypeMember\",\n      value: function tsParseTypeMember() {\n        var node = this.startNode();\n        if (this.match(10) || this.match(47)) {\n          return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n        }\n        if (this.match(77)) {\n          var id = this.startNode();\n          this.next();\n          if (this.match(10) || this.match(47)) {\n            return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n          } else {\n            node.key = this.createIdentifier(id, \"new\");\n            return this.tsParsePropertyOrMethodSignature(node, false);\n          }\n        }\n        this.tsParseModifiers({\n          allowedModifiers: [\"readonly\"],\n          disallowedModifiers: [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"]\n        }, node);\n        var idx = this.tsTryParseIndexSignature(node);\n        if (idx) {\n          return idx;\n        }\n        _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parsePropertyName\", this).call(this, node);\n        if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n          node.kind = node.key.name;\n          _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parsePropertyName\", this).call(this, node);\n        }\n        return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n      }\n    }, {\n      key: \"tsParseTypeLiteral\",\n      value: function tsParseTypeLiteral() {\n        var node = this.startNode();\n        node.members = this.tsParseObjectTypeMembers();\n        return this.finishNode(node, \"TSTypeLiteral\");\n      }\n    }, {\n      key: \"tsParseObjectTypeMembers\",\n      value: function tsParseObjectTypeMembers() {\n        this.expect(5);\n        var members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n        this.expect(8);\n        return members;\n      }\n    }, {\n      key: \"tsIsStartOfMappedType\",\n      value: function tsIsStartOfMappedType() {\n        this.next();\n        if (this.eat(53)) {\n          return this.isContextual(120);\n        }\n        if (this.isContextual(120)) {\n          this.next();\n        }\n        if (!this.match(0)) {\n          return false;\n        }\n        this.next();\n        if (!this.tsIsIdentifier()) {\n          return false;\n        }\n        this.next();\n        return this.match(58);\n      }\n    }, {\n      key: \"tsParseMappedTypeParameter\",\n      value: function tsParseMappedTypeParameter() {\n        var node = this.startNode();\n        node.name = this.tsParseTypeParameterName();\n        node.constraint = this.tsExpectThenParseType(58);\n        return this.finishNode(node, \"TSTypeParameter\");\n      }\n    }, {\n      key: \"tsParseMappedType\",\n      value: function tsParseMappedType() {\n        var node = this.startNode();\n        this.expect(5);\n        if (this.match(53)) {\n          node.readonly = this.state.value;\n          this.next();\n          this.expectContextual(120);\n        } else if (this.eatContextual(120)) {\n          node.readonly = true;\n        }\n        this.expect(0);\n        node.typeParameter = this.tsParseMappedTypeParameter();\n        node.nameType = this.eatContextual(93) ? this.tsParseType() : null;\n        this.expect(3);\n        if (this.match(53)) {\n          node.optional = this.state.value;\n          this.next();\n          this.expect(17);\n        } else if (this.eat(17)) {\n          node.optional = true;\n        }\n        node.typeAnnotation = this.tsTryParseType();\n        this.semicolon();\n        this.expect(8);\n        return this.finishNode(node, \"TSMappedType\");\n      }\n    }, {\n      key: \"tsParseTupleType\",\n      value: function tsParseTupleType() {\n        var _this28 = this;\n        var node = this.startNode();\n        node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n        var seenOptionalElement = false;\n        var labeledElements = null;\n        node.elementTypes.forEach(function (elementNode) {\n          var _labeledElements;\n          var _elementNode = elementNode,\n            type = _elementNode.type;\n          if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n            _this28.raise(TSErrors.OptionalTypeBeforeRequired, {\n              at: elementNode\n            });\n          }\n          seenOptionalElement || (seenOptionalElement = type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\");\n          var checkType = type;\n          if (type === \"TSRestType\") {\n            elementNode = elementNode.typeAnnotation;\n            checkType = elementNode.type;\n          }\n          var isLabeled = checkType === \"TSNamedTupleMember\";\n          (_labeledElements = labeledElements) != null ? _labeledElements : labeledElements = isLabeled;\n          if (labeledElements !== isLabeled) {\n            _this28.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n              at: elementNode\n            });\n          }\n        });\n        return this.finishNode(node, \"TSTupleType\");\n      }\n    }, {\n      key: \"tsParseTupleElementType\",\n      value: function tsParseTupleElementType() {\n        var startLoc = this.state.startLoc;\n        var rest = this.eat(21);\n        var labeled;\n        var label;\n        var optional;\n        var type;\n        var isWord = tokenIsKeywordOrIdentifier(this.state.type);\n        var chAfterWord = isWord ? this.lookaheadCharCode() : null;\n        if (chAfterWord === 58) {\n          labeled = true;\n          optional = false;\n          label = this.parseIdentifier(true);\n          this.expect(14);\n          type = this.tsParseType();\n        } else if (chAfterWord === 63) {\n          optional = true;\n          var _startLoc2 = this.state.startLoc;\n          var wordName = this.state.value;\n          var typeOrLabel = this.tsParseNonArrayType();\n          if (this.lookaheadCharCode() === 58) {\n            labeled = true;\n            label = this.createIdentifier(this.startNodeAt(_startLoc2), wordName);\n            this.expect(17);\n            this.expect(14);\n            type = this.tsParseType();\n          } else {\n            labeled = false;\n            type = typeOrLabel;\n            this.expect(17);\n          }\n        } else {\n          type = this.tsParseType();\n          optional = this.eat(17);\n          labeled = this.eat(14);\n        }\n        if (labeled) {\n          var labeledNode;\n          if (label) {\n            labeledNode = this.startNodeAtNode(label);\n            labeledNode.optional = optional;\n            labeledNode.label = label;\n            labeledNode.elementType = type;\n            if (this.eat(17)) {\n              labeledNode.optional = true;\n              this.raise(TSErrors.TupleOptionalAfterType, {\n                at: this.state.lastTokStartLoc\n              });\n            }\n          } else {\n            labeledNode = this.startNodeAtNode(type);\n            labeledNode.optional = optional;\n            this.raise(TSErrors.InvalidTupleMemberLabel, {\n              at: type\n            });\n            labeledNode.label = type;\n            labeledNode.elementType = this.tsParseType();\n          }\n          type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n        } else if (optional) {\n          var optionalTypeNode = this.startNodeAtNode(type);\n          optionalTypeNode.typeAnnotation = type;\n          type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n        }\n        if (rest) {\n          var restNode = this.startNodeAt(startLoc);\n          restNode.typeAnnotation = type;\n          type = this.finishNode(restNode, \"TSRestType\");\n        }\n        return type;\n      }\n    }, {\n      key: \"tsParseParenthesizedType\",\n      value: function tsParseParenthesizedType() {\n        var node = this.startNode();\n        this.expect(10);\n        node.typeAnnotation = this.tsParseType();\n        this.expect(11);\n        return this.finishNode(node, \"TSParenthesizedType\");\n      }\n    }, {\n      key: \"tsParseFunctionOrConstructorType\",\n      value: function tsParseFunctionOrConstructorType(type, abstract) {\n        var _this29 = this;\n        var node = this.startNode();\n        if (type === \"TSConstructorType\") {\n          node.abstract = !!abstract;\n          if (abstract) this.next();\n          this.next();\n        }\n        this.tsInAllowConditionalTypesContext(function () {\n          return _this29.tsFillSignature(19, node);\n        });\n        return this.finishNode(node, type);\n      }\n    }, {\n      key: \"tsParseLiteralTypeNode\",\n      value: function tsParseLiteralTypeNode() {\n        var node = this.startNode();\n        switch (this.state.type) {\n          case 132:\n          case 133:\n          case 131:\n          case 85:\n          case 86:\n            node.literal = _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseExprAtom\", this).call(this);\n            break;\n          default:\n            this.unexpected();\n        }\n        return this.finishNode(node, \"TSLiteralType\");\n      }\n    }, {\n      key: \"tsParseTemplateLiteralType\",\n      value: function tsParseTemplateLiteralType() {\n        var node = this.startNode();\n        node.literal = _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseTemplate\", this).call(this, false);\n        return this.finishNode(node, \"TSLiteralType\");\n      }\n    }, {\n      key: \"parseTemplateSubstitution\",\n      value: function parseTemplateSubstitution() {\n        if (this.state.inType) return this.tsParseType();\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseTemplateSubstitution\", this).call(this);\n      }\n    }, {\n      key: \"tsParseThisTypeOrThisTypePredicate\",\n      value: function tsParseThisTypeOrThisTypePredicate() {\n        var thisKeyword = this.tsParseThisTypeNode();\n        if (this.isContextual(114) && !this.hasPrecedingLineBreak()) {\n          return this.tsParseThisTypePredicate(thisKeyword);\n        } else {\n          return thisKeyword;\n        }\n      }\n    }, {\n      key: \"tsParseNonArrayType\",\n      value: function tsParseNonArrayType() {\n        switch (this.state.type) {\n          case 131:\n          case 132:\n          case 133:\n          case 85:\n          case 86:\n            return this.tsParseLiteralTypeNode();\n          case 53:\n            if (this.state.value === \"-\") {\n              var node = this.startNode();\n              var nextToken = this.lookahead();\n              if (nextToken.type !== 132 && nextToken.type !== 133) {\n                this.unexpected();\n              }\n              node.literal = this.parseMaybeUnary();\n              return this.finishNode(node, \"TSLiteralType\");\n            }\n            break;\n          case 78:\n            return this.tsParseThisTypeOrThisTypePredicate();\n          case 87:\n            return this.tsParseTypeQuery();\n          case 83:\n            return this.tsParseImportType();\n          case 5:\n            return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n          case 0:\n            return this.tsParseTupleType();\n          case 10:\n            return this.tsParseParenthesizedType();\n          case 25:\n          case 24:\n            return this.tsParseTemplateLiteralType();\n          default:\n            {\n              var type = this.state.type;\n              if (tokenIsIdentifier(type) || type === 88 || type === 84) {\n                var nodeType = type === 88 ? \"TSVoidKeyword\" : type === 84 ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n                if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {\n                  var _node6 = this.startNode();\n                  this.next();\n                  return this.finishNode(_node6, nodeType);\n                }\n                return this.tsParseTypeReference();\n              }\n            }\n        }\n        this.unexpected();\n      }\n    }, {\n      key: \"tsParseArrayTypeOrHigher\",\n      value: function tsParseArrayTypeOrHigher() {\n        var type = this.tsParseNonArrayType();\n        while (!this.hasPrecedingLineBreak() && this.eat(0)) {\n          if (this.match(3)) {\n            var node = this.startNodeAtNode(type);\n            node.elementType = type;\n            this.expect(3);\n            type = this.finishNode(node, \"TSArrayType\");\n          } else {\n            var _node7 = this.startNodeAtNode(type);\n            _node7.objectType = type;\n            _node7.indexType = this.tsParseType();\n            this.expect(3);\n            type = this.finishNode(_node7, \"TSIndexedAccessType\");\n          }\n        }\n        return type;\n      }\n    }, {\n      key: \"tsParseTypeOperator\",\n      value: function tsParseTypeOperator() {\n        var node = this.startNode();\n        var operator = this.state.value;\n        this.next();\n        node.operator = operator;\n        node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n        if (operator === \"readonly\") {\n          this.tsCheckTypeAnnotationForReadOnly(node);\n        }\n        return this.finishNode(node, \"TSTypeOperator\");\n      }\n    }, {\n      key: \"tsCheckTypeAnnotationForReadOnly\",\n      value: function tsCheckTypeAnnotationForReadOnly(node) {\n        switch (node.typeAnnotation.type) {\n          case \"TSTupleType\":\n          case \"TSArrayType\":\n            return;\n          default:\n            this.raise(TSErrors.UnexpectedReadonly, {\n              at: node\n            });\n        }\n      }\n    }, {\n      key: \"tsParseInferType\",\n      value: function tsParseInferType() {\n        var _this30 = this;\n        var node = this.startNode();\n        this.expectContextual(113);\n        var typeParameter = this.startNode();\n        typeParameter.name = this.tsParseTypeParameterName();\n        typeParameter.constraint = this.tsTryParse(function () {\n          return _this30.tsParseConstraintForInferType();\n        });\n        node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n        return this.finishNode(node, \"TSInferType\");\n      }\n    }, {\n      key: \"tsParseConstraintForInferType\",\n      value: function tsParseConstraintForInferType() {\n        var _this31 = this;\n        if (this.eat(81)) {\n          var constraint = this.tsInDisallowConditionalTypesContext(function () {\n            return _this31.tsParseType();\n          });\n          if (this.state.inDisallowConditionalTypesContext || !this.match(17)) {\n            return constraint;\n          }\n        }\n      }\n    }, {\n      key: \"tsParseTypeOperatorOrHigher\",\n      value: function tsParseTypeOperatorOrHigher() {\n        var _this32 = this;\n        var isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n        return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(113) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(function () {\n          return _this32.tsParseArrayTypeOrHigher();\n        });\n      }\n    }, {\n      key: \"tsParseUnionOrIntersectionType\",\n      value: function tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n        var node = this.startNode();\n        var hasLeadingOperator = this.eat(operator);\n        var types = [];\n        do {\n          types.push(parseConstituentType());\n        } while (this.eat(operator));\n        if (types.length === 1 && !hasLeadingOperator) {\n          return types[0];\n        }\n        node.types = types;\n        return this.finishNode(node, kind);\n      }\n    }, {\n      key: \"tsParseIntersectionTypeOrHigher\",\n      value: function tsParseIntersectionTypeOrHigher() {\n        return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), 45);\n      }\n    }, {\n      key: \"tsParseUnionTypeOrHigher\",\n      value: function tsParseUnionTypeOrHigher() {\n        return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), 43);\n      }\n    }, {\n      key: \"tsIsStartOfFunctionType\",\n      value: function tsIsStartOfFunctionType() {\n        if (this.match(47)) {\n          return true;\n        }\n        return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n      }\n    }, {\n      key: \"tsSkipParameterStart\",\n      value: function tsSkipParameterStart() {\n        if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n          this.next();\n          return true;\n        }\n        if (this.match(5)) {\n          var errors = this.state.errors;\n          var previousErrorCount = errors.length;\n          try {\n            this.parseObjectLike(8, true);\n            return errors.length === previousErrorCount;\n          } catch (_unused) {\n            return false;\n          }\n        }\n        if (this.match(0)) {\n          this.next();\n          var _errors = this.state.errors;\n          var _previousErrorCount = _errors.length;\n          try {\n            _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseBindingList\", this).call(this, 3, 93, 1);\n            return _errors.length === _previousErrorCount;\n          } catch (_unused2) {\n            return false;\n          }\n        }\n        return false;\n      }\n    }, {\n      key: \"tsIsUnambiguouslyStartOfFunctionType\",\n      value: function tsIsUnambiguouslyStartOfFunctionType() {\n        this.next();\n        if (this.match(11) || this.match(21)) {\n          return true;\n        }\n        if (this.tsSkipParameterStart()) {\n          if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {\n            return true;\n          }\n          if (this.match(11)) {\n            this.next();\n            if (this.match(19)) {\n              return true;\n            }\n          }\n        }\n        return false;\n      }\n    }, {\n      key: \"tsParseTypeOrTypePredicateAnnotation\",\n      value: function tsParseTypeOrTypePredicateAnnotation(returnToken) {\n        var _this33 = this;\n        return this.tsInType(function () {\n          var t = _this33.startNode();\n          _this33.expect(returnToken);\n          var node = _this33.startNode();\n          var asserts = !!_this33.tsTryParse(_this33.tsParseTypePredicateAsserts.bind(_this33));\n          if (asserts && _this33.match(78)) {\n            var thisTypePredicate = _this33.tsParseThisTypeOrThisTypePredicate();\n            if (thisTypePredicate.type === \"TSThisType\") {\n              node.parameterName = thisTypePredicate;\n              node.asserts = true;\n              node.typeAnnotation = null;\n              thisTypePredicate = _this33.finishNode(node, \"TSTypePredicate\");\n            } else {\n              _this33.resetStartLocationFromNode(thisTypePredicate, node);\n              thisTypePredicate.asserts = true;\n            }\n            t.typeAnnotation = thisTypePredicate;\n            return _this33.finishNode(t, \"TSTypeAnnotation\");\n          }\n          var typePredicateVariable = _this33.tsIsIdentifier() && _this33.tsTryParse(_this33.tsParseTypePredicatePrefix.bind(_this33));\n          if (!typePredicateVariable) {\n            if (!asserts) {\n              return _this33.tsParseTypeAnnotation(false, t);\n            }\n            node.parameterName = _this33.parseIdentifier();\n            node.asserts = asserts;\n            node.typeAnnotation = null;\n            t.typeAnnotation = _this33.finishNode(node, \"TSTypePredicate\");\n            return _this33.finishNode(t, \"TSTypeAnnotation\");\n          }\n          var type = _this33.tsParseTypeAnnotation(false);\n          node.parameterName = typePredicateVariable;\n          node.typeAnnotation = type;\n          node.asserts = asserts;\n          t.typeAnnotation = _this33.finishNode(node, \"TSTypePredicate\");\n          return _this33.finishNode(t, \"TSTypeAnnotation\");\n        });\n      }\n    }, {\n      key: \"tsTryParseTypeOrTypePredicateAnnotation\",\n      value: function tsTryParseTypeOrTypePredicateAnnotation() {\n        if (this.match(14)) {\n          return this.tsParseTypeOrTypePredicateAnnotation(14);\n        }\n      }\n    }, {\n      key: \"tsTryParseTypeAnnotation\",\n      value: function tsTryParseTypeAnnotation() {\n        if (this.match(14)) {\n          return this.tsParseTypeAnnotation();\n        }\n      }\n    }, {\n      key: \"tsTryParseType\",\n      value: function tsTryParseType() {\n        return this.tsEatThenParseType(14);\n      }\n    }, {\n      key: \"tsParseTypePredicatePrefix\",\n      value: function tsParseTypePredicatePrefix() {\n        var id = this.parseIdentifier();\n        if (this.isContextual(114) && !this.hasPrecedingLineBreak()) {\n          this.next();\n          return id;\n        }\n      }\n    }, {\n      key: \"tsParseTypePredicateAsserts\",\n      value: function tsParseTypePredicateAsserts() {\n        if (this.state.type !== 107) {\n          return false;\n        }\n        var containsEsc = this.state.containsEsc;\n        this.next();\n        if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {\n          return false;\n        }\n        if (containsEsc) {\n          this.raise(Errors.InvalidEscapedReservedWord, {\n            at: this.state.lastTokStartLoc,\n            reservedWord: \"asserts\"\n          });\n        }\n        return true;\n      }\n    }, {\n      key: \"tsParseTypeAnnotation\",\n      value: function tsParseTypeAnnotation() {\n        var _this34 = this;\n        var eatColon = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.startNode();\n        this.tsInType(function () {\n          if (eatColon) _this34.expect(14);\n          t.typeAnnotation = _this34.tsParseType();\n        });\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n    }, {\n      key: \"tsParseType\",\n      value: function tsParseType() {\n        var _this35 = this;\n        assert(this.state.inType);\n        var type = this.tsParseNonConditionalType();\n        if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) {\n          return type;\n        }\n        var node = this.startNodeAtNode(type);\n        node.checkType = type;\n        node.extendsType = this.tsInDisallowConditionalTypesContext(function () {\n          return _this35.tsParseNonConditionalType();\n        });\n        this.expect(17);\n        node.trueType = this.tsInAllowConditionalTypesContext(function () {\n          return _this35.tsParseType();\n        });\n        this.expect(14);\n        node.falseType = this.tsInAllowConditionalTypesContext(function () {\n          return _this35.tsParseType();\n        });\n        return this.finishNode(node, \"TSConditionalType\");\n      }\n    }, {\n      key: \"isAbstractConstructorSignature\",\n      value: function isAbstractConstructorSignature() {\n        return this.isContextual(122) && this.lookahead().type === 77;\n      }\n    }, {\n      key: \"tsParseNonConditionalType\",\n      value: function tsParseNonConditionalType() {\n        if (this.tsIsStartOfFunctionType()) {\n          return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n        }\n        if (this.match(77)) {\n          return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n        } else if (this.isAbstractConstructorSignature()) {\n          return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n        }\n        return this.tsParseUnionTypeOrHigher();\n      }\n    }, {\n      key: \"tsParseTypeAssertion\",\n      value: function tsParseTypeAssertion() {\n        var _this36 = this;\n        if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n          this.raise(TSErrors.ReservedTypeAssertion, {\n            at: this.state.startLoc\n          });\n        }\n        var node = this.startNode();\n        node.typeAnnotation = this.tsInType(function () {\n          _this36.next();\n          return _this36.match(75) ? _this36.tsParseTypeReference() : _this36.tsParseType();\n        });\n        this.expect(48);\n        node.expression = this.parseMaybeUnary();\n        return this.finishNode(node, \"TSTypeAssertion\");\n      }\n    }, {\n      key: \"tsParseHeritageClause\",\n      value: function tsParseHeritageClause(token) {\n        var _this37 = this;\n        var originalStartLoc = this.state.startLoc;\n        var delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", function () {\n          var node = _this37.startNode();\n          node.expression = _this37.tsParseEntityName();\n          if (_this37.match(47)) {\n            node.typeParameters = _this37.tsParseTypeArguments();\n          }\n          return _this37.finishNode(node, \"TSExpressionWithTypeArguments\");\n        });\n        if (!delimitedList.length) {\n          this.raise(TSErrors.EmptyHeritageClauseType, {\n            at: originalStartLoc,\n            token: token\n          });\n        }\n        return delimitedList;\n      }\n    }, {\n      key: \"tsParseInterfaceDeclaration\",\n      value: function tsParseInterfaceDeclaration(node) {\n        var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        if (this.hasFollowingLineBreak()) return null;\n        this.expectContextual(127);\n        if (properties.declare) node.declare = true;\n        if (tokenIsIdentifier(this.state.type)) {\n          node.id = this.parseIdentifier();\n          this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n        } else {\n          node.id = null;\n          this.raise(TSErrors.MissingInterfaceName, {\n            at: this.state.startLoc\n          });\n        }\n        node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);\n        if (this.eat(81)) {\n          node.extends = this.tsParseHeritageClause(\"extends\");\n        }\n        var body = this.startNode();\n        body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n        node.body = this.finishNode(body, \"TSInterfaceBody\");\n        return this.finishNode(node, \"TSInterfaceDeclaration\");\n      }\n    }, {\n      key: \"tsParseTypeAliasDeclaration\",\n      value: function tsParseTypeAliasDeclaration(node) {\n        var _this38 = this;\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_TYPE);\n        node.typeAnnotation = this.tsInType(function () {\n          node.typeParameters = _this38.tsTryParseTypeParameters(_this38.tsParseInOutModifiers);\n          _this38.expect(29);\n          if (_this38.isContextual(112) && _this38.lookahead().type !== 16) {\n            var _node8 = _this38.startNode();\n            _this38.next();\n            return _this38.finishNode(_node8, \"TSIntrinsicKeyword\");\n          }\n          return _this38.tsParseType();\n        });\n        this.semicolon();\n        return this.finishNode(node, \"TSTypeAliasDeclaration\");\n      }\n    }, {\n      key: \"tsInNoContext\",\n      value: function tsInNoContext(cb) {\n        var oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      }\n    }, {\n      key: \"tsInType\",\n      value: function tsInType(cb) {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        try {\n          return cb();\n        } finally {\n          this.state.inType = oldInType;\n        }\n      }\n    }, {\n      key: \"tsInDisallowConditionalTypesContext\",\n      value: function tsInDisallowConditionalTypesContext(cb) {\n        var oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;\n        this.state.inDisallowConditionalTypesContext = true;\n        try {\n          return cb();\n        } finally {\n          this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n        }\n      }\n    }, {\n      key: \"tsInAllowConditionalTypesContext\",\n      value: function tsInAllowConditionalTypesContext(cb) {\n        var oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;\n        this.state.inDisallowConditionalTypesContext = false;\n        try {\n          return cb();\n        } finally {\n          this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n        }\n      }\n    }, {\n      key: \"tsEatThenParseType\",\n      value: function tsEatThenParseType(token) {\n        if (this.match(token)) {\n          return this.tsNextThenParseType();\n        }\n      }\n    }, {\n      key: \"tsExpectThenParseType\",\n      value: function tsExpectThenParseType(token) {\n        var _this39 = this;\n        return this.tsInType(function () {\n          _this39.expect(token);\n          return _this39.tsParseType();\n        });\n      }\n    }, {\n      key: \"tsNextThenParseType\",\n      value: function tsNextThenParseType() {\n        var _this40 = this;\n        return this.tsInType(function () {\n          _this40.next();\n          return _this40.tsParseType();\n        });\n      }\n    }, {\n      key: \"tsParseEnumMember\",\n      value: function tsParseEnumMember() {\n        var node = this.startNode();\n        node.id = this.match(131) ? _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseStringLiteral\", this).call(this, this.state.value) : this.parseIdentifier(true);\n        if (this.eat(29)) {\n          node.initializer = _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseMaybeAssignAllowIn\", this).call(this);\n        }\n        return this.finishNode(node, \"TSEnumMember\");\n      }\n    }, {\n      key: \"tsParseEnumDeclaration\",\n      value: function tsParseEnumDeclaration(node) {\n        var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        if (properties.const) node.const = true;\n        if (properties.declare) node.declare = true;\n        this.expectContextual(124);\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n        this.expect(5);\n        node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n        this.expect(8);\n        return this.finishNode(node, \"TSEnumDeclaration\");\n      }\n    }, {\n      key: \"tsParseModuleBlock\",\n      value: function tsParseModuleBlock() {\n        var node = this.startNode();\n        this.scope.enter(SCOPE_OTHER);\n        this.expect(5);\n        _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseBlockOrModuleBlockBody\", this).call(this, node.body = [], undefined, true, 8);\n        this.scope.exit();\n        return this.finishNode(node, \"TSModuleBlock\");\n      }\n    }, {\n      key: \"tsParseModuleOrNamespaceDeclaration\",\n      value: function tsParseModuleOrNamespaceDeclaration(node) {\n        var nested = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        node.id = this.parseIdentifier();\n        if (!nested) {\n          this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n        }\n        if (this.eat(16)) {\n          var inner = this.startNode();\n          this.tsParseModuleOrNamespaceDeclaration(inner, true);\n          node.body = inner;\n        } else {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          node.body = this.tsParseModuleBlock();\n          this.prodParam.exit();\n          this.scope.exit();\n        }\n        return this.finishNode(node, \"TSModuleDeclaration\");\n      }\n    }, {\n      key: \"tsParseAmbientExternalModuleDeclaration\",\n      value: function tsParseAmbientExternalModuleDeclaration(node) {\n        if (this.isContextual(110)) {\n          node.global = true;\n          node.id = this.parseIdentifier();\n        } else if (this.match(131)) {\n          node.id = _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseStringLiteral\", this).call(this, this.state.value);\n        } else {\n          this.unexpected();\n        }\n        if (this.match(5)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          node.body = this.tsParseModuleBlock();\n          this.prodParam.exit();\n          this.scope.exit();\n        } else {\n          this.semicolon();\n        }\n        return this.finishNode(node, \"TSModuleDeclaration\");\n      }\n    }, {\n      key: \"tsParseImportEqualsDeclaration\",\n      value: function tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, isExport) {\n        node.isExport = isExport || false;\n        node.id = maybeDefaultIdentifier || this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_FLAGS_TS_IMPORT);\n        this.expect(29);\n        var moduleReference = this.tsParseModuleReference();\n        if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n          this.raise(TSErrors.ImportAliasHasImportType, {\n            at: moduleReference\n          });\n        }\n        node.moduleReference = moduleReference;\n        this.semicolon();\n        return this.finishNode(node, \"TSImportEqualsDeclaration\");\n      }\n    }, {\n      key: \"tsIsExternalModuleReference\",\n      value: function tsIsExternalModuleReference() {\n        return this.isContextual(117) && this.lookaheadCharCode() === 40;\n      }\n    }, {\n      key: \"tsParseModuleReference\",\n      value: function tsParseModuleReference() {\n        return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n      }\n    }, {\n      key: \"tsParseExternalModuleReference\",\n      value: function tsParseExternalModuleReference() {\n        var node = this.startNode();\n        this.expectContextual(117);\n        this.expect(10);\n        if (!this.match(131)) {\n          this.unexpected();\n        }\n        node.expression = _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseExprAtom\", this).call(this);\n        this.expect(11);\n        this.sawUnambiguousESM = true;\n        return this.finishNode(node, \"TSExternalModuleReference\");\n      }\n    }, {\n      key: \"tsLookAhead\",\n      value: function tsLookAhead(f) {\n        var state = this.state.clone();\n        var res = f();\n        this.state = state;\n        return res;\n      }\n    }, {\n      key: \"tsTryParseAndCatch\",\n      value: function tsTryParseAndCatch(f) {\n        var result = this.tryParse(function (abort) {\n          return f() || abort();\n        });\n        if (result.aborted || !result.node) return;\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }, {\n      key: \"tsTryParse\",\n      value: function tsTryParse(f) {\n        var state = this.state.clone();\n        var result = f();\n        if (result !== undefined && result !== false) {\n          return result;\n        }\n        this.state = state;\n      }\n    }, {\n      key: \"tsTryParseDeclare\",\n      value: function tsTryParseDeclare(nany) {\n        var _this41 = this;\n        if (this.isLineTerminator()) {\n          return;\n        }\n        var startType = this.state.type;\n        var kind;\n        if (this.isContextual(99)) {\n          startType = 74;\n          kind = \"let\";\n        }\n        return this.tsInAmbientContext(function () {\n          switch (startType) {\n            case 68:\n              nany.declare = true;\n              return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseFunctionStatement\", _this41).call(_this41, nany, false, false);\n            case 80:\n              nany.declare = true;\n              return _this41.parseClass(nany, true, false);\n            case 124:\n              return _this41.tsParseEnumDeclaration(nany, {\n                declare: true\n              });\n            case 110:\n              return _this41.tsParseAmbientExternalModuleDeclaration(nany);\n            case 75:\n            case 74:\n              if (!_this41.match(75) || !_this41.isLookaheadContextual(\"enum\")) {\n                nany.declare = true;\n                return _this41.parseVarStatement(nany, kind || _this41.state.value, true);\n              }\n              _this41.expect(75);\n              return _this41.tsParseEnumDeclaration(nany, {\n                const: true,\n                declare: true\n              });\n            case 127:\n              {\n                var result = _this41.tsParseInterfaceDeclaration(nany, {\n                  declare: true\n                });\n                if (result) return result;\n              }\n            default:\n              if (tokenIsIdentifier(startType)) {\n                return _this41.tsParseDeclaration(nany, _this41.state.value, true, null);\n              }\n          }\n        });\n      }\n    }, {\n      key: \"tsTryParseExportDeclaration\",\n      value: function tsTryParseExportDeclaration() {\n        return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);\n      }\n    }, {\n      key: \"tsParseExpressionStatement\",\n      value: function tsParseExpressionStatement(node, expr, decorators) {\n        switch (expr.name) {\n          case \"declare\":\n            {\n              var declaration = this.tsTryParseDeclare(node);\n              if (declaration) {\n                declaration.declare = true;\n              }\n              return declaration;\n            }\n          case \"global\":\n            if (this.match(5)) {\n              this.scope.enter(SCOPE_TS_MODULE);\n              this.prodParam.enter(PARAM);\n              var mod = node;\n              mod.global = true;\n              mod.id = expr;\n              mod.body = this.tsParseModuleBlock();\n              this.scope.exit();\n              this.prodParam.exit();\n              return this.finishNode(mod, \"TSModuleDeclaration\");\n            }\n            break;\n          default:\n            return this.tsParseDeclaration(node, expr.name, false, decorators);\n        }\n      }\n    }, {\n      key: \"tsParseDeclaration\",\n      value: function tsParseDeclaration(node, value, next, decorators) {\n        switch (value) {\n          case \"abstract\":\n            if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {\n              return this.tsParseAbstractDeclaration(node, decorators);\n            }\n            break;\n          case \"module\":\n            if (this.tsCheckLineTerminator(next)) {\n              if (this.match(131)) {\n                return this.tsParseAmbientExternalModuleDeclaration(node);\n              } else if (tokenIsIdentifier(this.state.type)) {\n                return this.tsParseModuleOrNamespaceDeclaration(node);\n              }\n            }\n            break;\n          case \"namespace\":\n            if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n            break;\n          case \"type\":\n            if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n              return this.tsParseTypeAliasDeclaration(node);\n            }\n            break;\n        }\n      }\n    }, {\n      key: \"tsCheckLineTerminator\",\n      value: function tsCheckLineTerminator(next) {\n        if (next) {\n          if (this.hasFollowingLineBreak()) return false;\n          this.next();\n          return true;\n        }\n        return !this.isLineTerminator();\n      }\n    }, {\n      key: \"tsTryParseGenericAsyncArrowFunction\",\n      value: function tsTryParseGenericAsyncArrowFunction(startLoc) {\n        var _this42 = this;\n        if (!this.match(47)) return;\n        var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n        this.state.maybeInArrowParameters = true;\n        var res = this.tsTryParseAndCatch(function () {\n          var node = _this42.startNodeAt(startLoc);\n          node.typeParameters = _this42.tsParseTypeParameters(_this42.tsParseConstModifier);\n          _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseFunctionParams\", _this42).call(_this42, node);\n          node.returnType = _this42.tsTryParseTypeOrTypePredicateAnnotation();\n          _this42.expect(19);\n          return node;\n        });\n        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n        if (!res) return;\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseArrowExpression\", this).call(this, res, null, true);\n      }\n    }, {\n      key: \"tsParseTypeArgumentsInExpression\",\n      value: function tsParseTypeArgumentsInExpression() {\n        if (this.reScan_lt() !== 47) return;\n        return this.tsParseTypeArguments();\n      }\n    }, {\n      key: \"tsParseTypeArguments\",\n      value: function tsParseTypeArguments() {\n        var _this43 = this;\n        var node = this.startNode();\n        node.params = this.tsInType(function () {\n          return _this43.tsInNoContext(function () {\n            _this43.expect(47);\n            return _this43.tsParseDelimitedList(\"TypeParametersOrArguments\", _this43.tsParseType.bind(_this43));\n          });\n        });\n        if (node.params.length === 0) {\n          this.raise(TSErrors.EmptyTypeArguments, {\n            at: node\n          });\n        } else if (!this.state.inType && this.curContext() === types.brace) {\n          this.reScan_lt_gt();\n        }\n        this.expect(48);\n        return this.finishNode(node, \"TSTypeParameterInstantiation\");\n      }\n    }, {\n      key: \"tsIsDeclarationStart\",\n      value: function tsIsDeclarationStart() {\n        return tokenIsTSDeclarationStart(this.state.type);\n      }\n    }, {\n      key: \"isExportDefaultSpecifier\",\n      value: function isExportDefaultSpecifier() {\n        if (this.tsIsDeclarationStart()) return false;\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"isExportDefaultSpecifier\", this).call(this);\n      }\n    }, {\n      key: \"parseAssignableListItem\",\n      value: function parseAssignableListItem(flags, decorators) {\n        var startLoc = this.state.startLoc;\n        var modified = {};\n        this.tsParseModifiers({\n          allowedModifiers: [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]\n        }, modified);\n        var accessibility = modified.accessibility;\n        var override = modified.override;\n        var readonly = modified.readonly;\n        if (!(flags & 4) && (accessibility || readonly || override)) {\n          this.raise(TSErrors.UnexpectedParameterModifier, {\n            at: startLoc\n          });\n        }\n        var left = this.parseMaybeDefault();\n        this.parseAssignableListItemTypes(left, flags);\n        var elt = this.parseMaybeDefault(left.loc.start, left);\n        if (accessibility || readonly || override) {\n          var pp = this.startNodeAt(startLoc);\n          if (decorators.length) {\n            pp.decorators = decorators;\n          }\n          if (accessibility) pp.accessibility = accessibility;\n          if (readonly) pp.readonly = readonly;\n          if (override) pp.override = override;\n          if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n            this.raise(TSErrors.UnsupportedParameterPropertyKind, {\n              at: pp\n            });\n          }\n          pp.parameter = elt;\n          return this.finishNode(pp, \"TSParameterProperty\");\n        }\n        if (decorators.length) {\n          left.decorators = decorators;\n        }\n        return elt;\n      }\n    }, {\n      key: \"isSimpleParameter\",\n      value: function isSimpleParameter(node) {\n        return node.type === \"TSParameterProperty\" && _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"isSimpleParameter\", this).call(this, node.parameter) || _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"isSimpleParameter\", this).call(this, node);\n      }\n    }, {\n      key: \"tsDisallowOptionalPattern\",\n      value: function tsDisallowOptionalPattern(node) {\n        var _iterator9 = _createForOfIteratorHelper(node.params),\n          _step9;\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var param = _step9.value;\n            if (param.type !== \"Identifier\" && param.optional && !this.state.isAmbientContext) {\n              this.raise(TSErrors.PatternIsOptional, {\n                at: param\n              });\n            }\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n      }\n    }, {\n      key: \"setArrowFunctionParameters\",\n      value: function setArrowFunctionParameters(node, params, trailingCommaLoc) {\n        _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"setArrowFunctionParameters\", this).call(this, node, params, trailingCommaLoc);\n        this.tsDisallowOptionalPattern(node);\n      }\n    }, {\n      key: \"parseFunctionBodyAndFinish\",\n      value: function parseFunctionBodyAndFinish(node, type) {\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        if (this.match(14)) {\n          node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n        }\n        var bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" || type === \"ClassPrivateMethod\" ? \"TSDeclareMethod\" : undefined;\n        if (bodilessType && !this.match(5) && this.isLineTerminator()) {\n          return this.finishNode(node, bodilessType);\n        }\n        if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n          this.raise(TSErrors.DeclareFunctionHasImplementation, {\n            at: node\n          });\n          if (node.declare) {\n            return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseFunctionBodyAndFinish\", this).call(this, node, bodilessType, isMethod);\n          }\n        }\n        this.tsDisallowOptionalPattern(node);\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseFunctionBodyAndFinish\", this).call(this, node, type, isMethod);\n      }\n    }, {\n      key: \"registerFunctionStatementId\",\n      value: function registerFunctionStatementId(node) {\n        if (!node.body && node.id) {\n          this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n        } else {\n          _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"registerFunctionStatementId\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"tsCheckForInvalidTypeCasts\",\n      value: function tsCheckForInvalidTypeCasts(items) {\n        var _this44 = this;\n        items.forEach(function (node) {\n          if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n            _this44.raise(TSErrors.UnexpectedTypeAnnotation, {\n              at: node.typeAnnotation\n            });\n          }\n        });\n      }\n    }, {\n      key: \"toReferencedList\",\n      value: function toReferencedList(exprList, isInParens) {\n        this.tsCheckForInvalidTypeCasts(exprList);\n        return exprList;\n      }\n    }, {\n      key: \"parseArrayLike\",\n      value: function parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n        var node = _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseArrayLike\", this).call(this, close, canBePattern, isTuple, refExpressionErrors);\n        if (node.type === \"ArrayExpression\") {\n          this.tsCheckForInvalidTypeCasts(node.elements);\n        }\n        return node;\n      }\n    }, {\n      key: \"parseSubscript\",\n      value: function parseSubscript(base, startLoc, noCalls, state) {\n        var _this45 = this;\n        if (!this.hasPrecedingLineBreak() && this.match(35)) {\n          this.state.canStartJSXElement = false;\n          this.next();\n          var nonNullExpression = this.startNodeAt(startLoc);\n          nonNullExpression.expression = base;\n          return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n        }\n        var isOptionalCall = false;\n        if (this.match(18) && this.lookaheadCharCode() === 60) {\n          if (noCalls) {\n            state.stop = true;\n            return base;\n          }\n          state.optionalChainMember = isOptionalCall = true;\n          this.next();\n        }\n        if (this.match(47) || this.match(51)) {\n          var missingParenErrorLoc;\n          var result = this.tsTryParseAndCatch(function () {\n            if (!noCalls && _this45.atPossibleAsyncArrow(base)) {\n              var asyncArrowFn = _this45.tsTryParseGenericAsyncArrowFunction(startLoc);\n              if (asyncArrowFn) {\n                return asyncArrowFn;\n              }\n            }\n            var typeArguments = _this45.tsParseTypeArgumentsInExpression();\n            if (!typeArguments) return;\n            if (isOptionalCall && !_this45.match(10)) {\n              missingParenErrorLoc = _this45.state.curPosition();\n              return;\n            }\n            if (tokenIsTemplate(_this45.state.type)) {\n              var _result = _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseTaggedTemplateExpression\", _this45).call(_this45, base, startLoc, state);\n              _result.typeParameters = typeArguments;\n              return _result;\n            }\n            if (!noCalls && _this45.eat(10)) {\n              var _node9 = _this45.startNodeAt(startLoc);\n              _node9.callee = base;\n              _node9.arguments = _this45.parseCallExpressionArguments(11, false);\n              _this45.tsCheckForInvalidTypeCasts(_node9.arguments);\n              _node9.typeParameters = typeArguments;\n              if (state.optionalChainMember) {\n                _node9.optional = isOptionalCall;\n              }\n              return _this45.finishCallExpression(_node9, state.optionalChainMember);\n            }\n            var tokenType = _this45.state.type;\n            if (tokenType === 48 || tokenType === 52 || tokenType !== 10 && tokenCanStartExpression(tokenType) && !_this45.hasPrecedingLineBreak()) {\n              return;\n            }\n            var node = _this45.startNodeAt(startLoc);\n            node.expression = base;\n            node.typeParameters = typeArguments;\n            return _this45.finishNode(node, \"TSInstantiationExpression\");\n          });\n          if (missingParenErrorLoc) {\n            this.unexpected(missingParenErrorLoc, 10);\n          }\n          if (result) {\n            if (result.type === \"TSInstantiationExpression\" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40)) {\n              this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, {\n                at: this.state.startLoc\n              });\n            }\n            return result;\n          }\n        }\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseSubscript\", this).call(this, base, startLoc, noCalls, state);\n      }\n    }, {\n      key: \"parseNewCallee\",\n      value: function parseNewCallee(node) {\n        var _callee$extra;\n        _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseNewCallee\", this).call(this, node);\n        var callee = node.callee;\n        if (callee.type === \"TSInstantiationExpression\" && !((_callee$extra = callee.extra) != null && _callee$extra.parenthesized)) {\n          node.typeParameters = callee.typeParameters;\n          node.callee = callee.expression;\n        }\n      }\n    }, {\n      key: \"parseExprOp\",\n      value: function parseExprOp(left, leftStartLoc, minPrec) {\n        var _this46 = this;\n        var isSatisfies;\n        if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(118)))) {\n          var node = this.startNodeAt(leftStartLoc);\n          node.expression = left;\n          node.typeAnnotation = this.tsInType(function () {\n            _this46.next();\n            if (_this46.match(75)) {\n              if (isSatisfies) {\n                _this46.raise(Errors.UnexpectedKeyword, {\n                  at: _this46.state.startLoc,\n                  keyword: \"const\"\n                });\n              }\n              return _this46.tsParseTypeReference();\n            }\n            return _this46.tsParseType();\n          });\n          this.finishNode(node, isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\");\n          this.reScan_lt_gt();\n          return this.parseExprOp(node, leftStartLoc, minPrec);\n        }\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseExprOp\", this).call(this, left, leftStartLoc, minPrec);\n      }\n    }, {\n      key: \"checkReservedWord\",\n      value: function checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n        if (!this.state.isAmbientContext) {\n          _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"checkReservedWord\", this).call(this, word, startLoc, checkKeywords, isBinding);\n        }\n      }\n    }, {\n      key: \"checkImportReflection\",\n      value: function checkImportReflection(node) {\n        _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"checkImportReflection\", this).call(this, node);\n        if (node.module && node.importKind !== \"value\") {\n          this.raise(TSErrors.ImportReflectionHasImportType, {\n            at: node.specifiers[0].loc.start\n          });\n        }\n      }\n    }, {\n      key: \"checkDuplicateExports\",\n      value: function checkDuplicateExports() {}\n    }, {\n      key: \"isPotentialImportPhase\",\n      value: function isPotentialImportPhase(isExport) {\n        if (_get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"isPotentialImportPhase\", this).call(this, isExport)) return true;\n        if (this.isContextual(128)) {\n          var ch = this.lookaheadCharCode();\n          return isExport ? ch === 123 || ch === 42 : ch !== 61;\n        }\n        return !isExport && this.isContextual(87);\n      }\n    }, {\n      key: \"applyImportPhase\",\n      value: function applyImportPhase(node, isExport, phase, loc) {\n        _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"applyImportPhase\", this).call(this, node, isExport, phase, loc);\n        if (isExport) {\n          node.exportKind = phase === \"type\" ? \"type\" : \"value\";\n        } else {\n          node.importKind = phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n        }\n      }\n    }, {\n      key: \"parseImport\",\n      value: function parseImport(node) {\n        if (this.match(131)) {\n          node.importKind = \"value\";\n          return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseImport\", this).call(this, node);\n        }\n        var importNode;\n        if (tokenIsIdentifier(this.state.type) && this.lookaheadCharCode() === 61) {\n          node.importKind = \"value\";\n          return this.tsParseImportEqualsDeclaration(node);\n        } else if (this.isContextual(128)) {\n          var maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);\n          if (this.lookaheadCharCode() === 61) {\n            return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier);\n          } else {\n            importNode = _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseImportSpecifiersAndAfter\", this).call(this, node, maybeDefaultIdentifier);\n          }\n        } else {\n          importNode = _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseImport\", this).call(this, node);\n        }\n        if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n          this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n            at: importNode\n          });\n        }\n        return importNode;\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node, decorators) {\n        if (this.match(83)) {\n          this.next();\n          var maybeDefaultIdentifier = null;\n          if (this.isContextual(128) && this.isPotentialImportPhase(false)) {\n            maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);\n          } else {\n            node.importKind = \"value\";\n          }\n          return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, true);\n        } else if (this.eat(29)) {\n          var assign = node;\n          assign.expression = _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseExpression\", this).call(this);\n          this.semicolon();\n          this.sawUnambiguousESM = true;\n          return this.finishNode(assign, \"TSExportAssignment\");\n        } else if (this.eatContextual(93)) {\n          var decl = node;\n          this.expectContextual(126);\n          decl.id = this.parseIdentifier();\n          this.semicolon();\n          return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n        } else {\n          return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseExport\", this).call(this, node, decorators);\n        }\n      }\n    }, {\n      key: \"isAbstractClass\",\n      value: function isAbstractClass() {\n        return this.isContextual(122) && this.lookahead().type === 80;\n      }\n    }, {\n      key: \"parseExportDefaultExpression\",\n      value: function parseExportDefaultExpression() {\n        if (this.isAbstractClass()) {\n          var cls = this.startNode();\n          this.next();\n          cls.abstract = true;\n          return this.parseClass(cls, true, true);\n        }\n        if (this.match(127)) {\n          var result = this.tsParseInterfaceDeclaration(this.startNode());\n          if (result) return result;\n        }\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseExportDefaultExpression\", this).call(this);\n      }\n    }, {\n      key: \"parseVarStatement\",\n      value: function parseVarStatement(node, kind) {\n        var allowMissingInitializer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        var isAmbientContext = this.state.isAmbientContext;\n        var declaration = _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseVarStatement\", this).call(this, node, kind, allowMissingInitializer || isAmbientContext);\n        if (!isAmbientContext) return declaration;\n        var _iterator10 = _createForOfIteratorHelper(declaration.declarations),\n          _step10;\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var _step10$value = _step10.value,\n              id = _step10$value.id,\n              init = _step10$value.init;\n            if (!init) continue;\n            if (kind !== \"const\" || !!id.typeAnnotation) {\n              this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n                at: init\n              });\n            } else if (!isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))) {\n              this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, {\n                at: init\n              });\n            }\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n        return declaration;\n      }\n    }, {\n      key: \"parseStatementContent\",\n      value: function parseStatementContent(flags, decorators) {\n        if (this.match(75) && this.isLookaheadContextual(\"enum\")) {\n          var node = this.startNode();\n          this.expect(75);\n          return this.tsParseEnumDeclaration(node, {\n            const: true\n          });\n        }\n        if (this.isContextual(124)) {\n          return this.tsParseEnumDeclaration(this.startNode());\n        }\n        if (this.isContextual(127)) {\n          var result = this.tsParseInterfaceDeclaration(this.startNode());\n          if (result) return result;\n        }\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseStatementContent\", this).call(this, flags, decorators);\n      }\n    }, {\n      key: \"parseAccessModifier\",\n      value: function parseAccessModifier() {\n        return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n      }\n    }, {\n      key: \"tsHasSomeModifiers\",\n      value: function tsHasSomeModifiers(member, modifiers) {\n        return modifiers.some(function (modifier) {\n          if (tsIsAccessModifier(modifier)) {\n            return member.accessibility === modifier;\n          }\n          return !!member[modifier];\n        });\n      }\n    }, {\n      key: \"tsIsStartOfStaticBlocks\",\n      value: function tsIsStartOfStaticBlocks() {\n        return this.isContextual(104) && this.lookaheadCharCode() === 123;\n      }\n    }, {\n      key: \"parseClassMember\",\n      value: function parseClassMember(classBody, member, state) {\n        var _this47 = this;\n        var modifiers = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\", \"static\"];\n        this.tsParseModifiers({\n          allowedModifiers: modifiers,\n          disallowedModifiers: [\"in\", \"out\"],\n          stopOnStartOfClassStaticBlock: true,\n          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions\n        }, member);\n        var callParseClassMemberWithIsStatic = function callParseClassMemberWithIsStatic() {\n          if (_this47.tsIsStartOfStaticBlocks()) {\n            _this47.next();\n            _this47.next();\n            if (_this47.tsHasSomeModifiers(member, modifiers)) {\n              _this47.raise(TSErrors.StaticBlockCannotHaveModifier, {\n                at: _this47.state.curPosition()\n              });\n            }\n            _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseClassStaticBlock\", _this47).call(_this47, classBody, member);\n          } else {\n            _this47.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);\n          }\n        };\n        if (member.declare) {\n          this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n        } else {\n          callParseClassMemberWithIsStatic();\n        }\n      }\n    }, {\n      key: \"parseClassMemberWithIsStatic\",\n      value: function parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n        var idx = this.tsTryParseIndexSignature(member);\n        if (idx) {\n          classBody.body.push(idx);\n          if (member.abstract) {\n            this.raise(TSErrors.IndexSignatureHasAbstract, {\n              at: member\n            });\n          }\n          if (member.accessibility) {\n            this.raise(TSErrors.IndexSignatureHasAccessibility, {\n              at: member,\n              modifier: member.accessibility\n            });\n          }\n          if (member.declare) {\n            this.raise(TSErrors.IndexSignatureHasDeclare, {\n              at: member\n            });\n          }\n          if (member.override) {\n            this.raise(TSErrors.IndexSignatureHasOverride, {\n              at: member\n            });\n          }\n          return;\n        }\n        if (!this.state.inAbstractClass && member.abstract) {\n          this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n            at: member\n          });\n        }\n        if (member.override) {\n          if (!state.hadSuperClass) {\n            this.raise(TSErrors.OverrideNotInSubClass, {\n              at: member\n            });\n          }\n        }\n        _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseClassMemberWithIsStatic\", this).call(this, classBody, member, state, isStatic);\n      }\n    }, {\n      key: \"parsePostMemberNameModifiers\",\n      value: function parsePostMemberNameModifiers(methodOrProp) {\n        var optional = this.eat(17);\n        if (optional) methodOrProp.optional = true;\n        if (methodOrProp.readonly && this.match(10)) {\n          this.raise(TSErrors.ClassMethodHasReadonly, {\n            at: methodOrProp\n          });\n        }\n        if (methodOrProp.declare && this.match(10)) {\n          this.raise(TSErrors.ClassMethodHasDeclare, {\n            at: methodOrProp\n          });\n        }\n      }\n    }, {\n      key: \"parseExpressionStatement\",\n      value: function parseExpressionStatement(node, expr, decorators) {\n        var decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr, decorators) : undefined;\n        return decl || _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseExpressionStatement\", this).call(this, node, expr, decorators);\n      }\n    }, {\n      key: \"shouldParseExportDeclaration\",\n      value: function shouldParseExportDeclaration() {\n        if (this.tsIsDeclarationStart()) return true;\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"shouldParseExportDeclaration\", this).call(this);\n      }\n    }, {\n      key: \"parseConditional\",\n      value: function parseConditional(expr, startLoc, refExpressionErrors) {\n        var _this48 = this;\n        if (!this.state.maybeInArrowParameters || !this.match(17)) {\n          return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseConditional\", this).call(this, expr, startLoc, refExpressionErrors);\n        }\n        var result = this.tryParse(function () {\n          return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseConditional\", _this48).call(_this48, expr, startLoc);\n        });\n        if (!result.node) {\n          if (result.error) {\n            _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"setOptionalParametersError\", this).call(this, refExpressionErrors, result.error);\n          }\n          return expr;\n        }\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }, {\n      key: \"parseParenItem\",\n      value: function parseParenItem(node, startLoc) {\n        node = _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseParenItem\", this).call(this, node, startLoc);\n        if (this.eat(17)) {\n          node.optional = true;\n          this.resetEndLocation(node);\n        }\n        if (this.match(14)) {\n          var typeCastNode = this.startNodeAt(startLoc);\n          typeCastNode.expression = node;\n          typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n          return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n        }\n        return node;\n      }\n    }, {\n      key: \"parseExportDeclaration\",\n      value: function parseExportDeclaration(node) {\n        var _this49 = this;\n        if (!this.state.isAmbientContext && this.isContextual(123)) {\n          return this.tsInAmbientContext(function () {\n            return _this49.parseExportDeclaration(node);\n          });\n        }\n        var startLoc = this.state.startLoc;\n        var isDeclare = this.eatContextual(123);\n        if (isDeclare && (this.isContextual(123) || !this.shouldParseExportDeclaration())) {\n          throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n            at: this.state.startLoc\n          });\n        }\n        var isIdentifier = tokenIsIdentifier(this.state.type);\n        var declaration = isIdentifier && this.tsTryParseExportDeclaration() || _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseExportDeclaration\", this).call(this, node);\n        if (!declaration) return null;\n        if (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare) {\n          node.exportKind = \"type\";\n        }\n        if (isDeclare) {\n          this.resetStartLocation(declaration, startLoc);\n          declaration.declare = true;\n        }\n        return declaration;\n      }\n    }, {\n      key: \"parseClassId\",\n      value: function parseClassId(node, isStatement, optionalId, bindingType) {\n        if ((!isStatement || optionalId) && this.isContextual(111)) {\n          return;\n        }\n        _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseClassId\", this).call(this, node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n        var typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);\n        if (typeParameters) node.typeParameters = typeParameters;\n      }\n    }, {\n      key: \"parseClassPropertyAnnotation\",\n      value: function parseClassPropertyAnnotation(node) {\n        if (!node.optional) {\n          if (this.eat(35)) {\n            node.definite = true;\n          } else if (this.eat(17)) {\n            node.optional = true;\n          }\n        }\n        var type = this.tsTryParseTypeAnnotation();\n        if (type) node.typeAnnotation = type;\n      }\n    }, {\n      key: \"parseClassProperty\",\n      value: function parseClassProperty(node) {\n        this.parseClassPropertyAnnotation(node);\n        if (this.state.isAmbientContext && !(node.readonly && !node.typeAnnotation) && this.match(29)) {\n          this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n            at: this.state.startLoc\n          });\n        }\n        if (node.abstract && this.match(29)) {\n          var key = node.key;\n          this.raise(TSErrors.AbstractPropertyHasInitializer, {\n            at: this.state.startLoc,\n            propertyName: key.type === \"Identifier\" && !node.computed ? key.name : \"[\".concat(this.input.slice(key.start, key.end), \"]\")\n          });\n        }\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseClassProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"parseClassPrivateProperty\",\n      value: function parseClassPrivateProperty(node) {\n        if (node.abstract) {\n          this.raise(TSErrors.PrivateElementHasAbstract, {\n            at: node\n          });\n        }\n        if (node.accessibility) {\n          this.raise(TSErrors.PrivateElementHasAccessibility, {\n            at: node,\n            modifier: node.accessibility\n          });\n        }\n        this.parseClassPropertyAnnotation(node);\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseClassPrivateProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"parseClassAccessorProperty\",\n      value: function parseClassAccessorProperty(node) {\n        this.parseClassPropertyAnnotation(node);\n        if (node.optional) {\n          this.raise(TSErrors.AccessorCannotBeOptional, {\n            at: node\n          });\n        }\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseClassAccessorProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"pushClassMethod\",\n      value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n        var typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n        if (typeParameters && isConstructor) {\n          this.raise(TSErrors.ConstructorHasTypeParameters, {\n            at: typeParameters\n          });\n        }\n        var _method$declare = method.declare,\n          declare = _method$declare === void 0 ? false : _method$declare,\n          kind = method.kind;\n        if (declare && (kind === \"get\" || kind === \"set\")) {\n          this.raise(TSErrors.DeclareAccessor, {\n            at: method,\n            kind: kind\n          });\n        }\n        if (typeParameters) method.typeParameters = typeParameters;\n        _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"pushClassMethod\", this).call(this, classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n      }\n    }, {\n      key: \"pushClassPrivateMethod\",\n      value: function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n        var typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n        if (typeParameters) method.typeParameters = typeParameters;\n        _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"pushClassPrivateMethod\", this).call(this, classBody, method, isGenerator, isAsync);\n      }\n    }, {\n      key: \"declareClassPrivateMethodInScope\",\n      value: function declareClassPrivateMethodInScope(node, kind) {\n        if (node.type === \"TSDeclareMethod\") return;\n        if (node.type === \"MethodDefinition\" && !node.value.body) return;\n        _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"declareClassPrivateMethodInScope\", this).call(this, node, kind);\n      }\n    }, {\n      key: \"parseClassSuper\",\n      value: function parseClassSuper(node) {\n        _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseClassSuper\", this).call(this, node);\n        if (node.superClass && (this.match(47) || this.match(51))) {\n          node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n        }\n        if (this.eatContextual(111)) {\n          node.implements = this.tsParseHeritageClause(\"implements\");\n        }\n      }\n    }, {\n      key: \"parseObjPropValue\",\n      value: function parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n        var typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n        if (typeParameters) prop.typeParameters = typeParameters;\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseObjPropValue\", this).call(this, prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n      }\n    }, {\n      key: \"parseFunctionParams\",\n      value: function parseFunctionParams(node, isConstructor) {\n        var typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n        if (typeParameters) node.typeParameters = typeParameters;\n        _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseFunctionParams\", this).call(this, node, isConstructor);\n      }\n    }, {\n      key: \"parseVarId\",\n      value: function parseVarId(decl, kind) {\n        _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseVarId\", this).call(this, decl, kind);\n        if (decl.id.type === \"Identifier\" && !this.hasPrecedingLineBreak() && this.eat(35)) {\n          decl.definite = true;\n        }\n        var type = this.tsTryParseTypeAnnotation();\n        if (type) {\n          decl.id.typeAnnotation = type;\n          this.resetEndLocation(decl.id);\n        }\n      }\n    }, {\n      key: \"parseAsyncArrowFromCallExpression\",\n      value: function parseAsyncArrowFromCallExpression(node, call) {\n        if (this.match(14)) {\n          node.returnType = this.tsParseTypeAnnotation();\n        }\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseAsyncArrowFromCallExpression\", this).call(this, node, call);\n      }\n    }, {\n      key: \"parseMaybeAssign\",\n      value: function parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n        var _this50 = this;\n        var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2;\n        var state;\n        var jsx;\n        var typeCast;\n        if (this.hasPlugin(\"jsx\") && (this.match(140) || this.match(47))) {\n          state = this.state.clone();\n          jsx = this.tryParse(function () {\n            return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseMaybeAssign\", _this50).call(_this50, refExpressionErrors, afterLeftParse);\n          }, state);\n          if (!jsx.error) return jsx.node;\n          var context = this.state.context;\n          var currentContext = context[context.length - 1];\n          if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n            context.pop();\n          }\n        }\n        if (!((_jsx = jsx) != null && _jsx.error) && !this.match(47)) {\n          return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseMaybeAssign\", this).call(this, refExpressionErrors, afterLeftParse);\n        }\n        if (!state || state === this.state) state = this.state.clone();\n        var typeParameters;\n        var arrow = this.tryParse(function (abort) {\n          var _expr$extra, _typeParameters;\n          typeParameters = _this50.tsParseTypeParameters(_this50.tsParseConstModifier);\n          var expr = _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseMaybeAssign\", _this50).call(_this50, refExpressionErrors, afterLeftParse);\n          if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n            abort();\n          }\n          if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n            _this50.resetStartLocationFromNode(expr, typeParameters);\n          }\n          expr.typeParameters = typeParameters;\n          return expr;\n        }, state);\n        if (!arrow.error && !arrow.aborted) {\n          if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n          return arrow.node;\n        }\n        if (!jsx) {\n          assert(!this.hasPlugin(\"jsx\"));\n          typeCast = this.tryParse(function () {\n            return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseMaybeAssign\", _this50).call(_this50, refExpressionErrors, afterLeftParse);\n          }, state);\n          if (!typeCast.error) return typeCast.node;\n        }\n        if ((_jsx2 = jsx) != null && _jsx2.node) {\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n        if (arrow.node) {\n          this.state = arrow.failState;\n          if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n          return arrow.node;\n        }\n        if ((_typeCast = typeCast) != null && _typeCast.node) {\n          this.state = typeCast.failState;\n          return typeCast.node;\n        }\n        throw ((_jsx3 = jsx) == null ? void 0 : _jsx3.error) || arrow.error || ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.error);\n      }\n    }, {\n      key: \"reportReservedArrowTypeParam\",\n      value: function reportReservedArrowTypeParam(node) {\n        var _node$extra;\n        if (node.params.length === 1 && !node.params[0].constraint && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n          this.raise(TSErrors.ReservedArrowTypeParam, {\n            at: node\n          });\n        }\n      }\n    }, {\n      key: \"parseMaybeUnary\",\n      value: function parseMaybeUnary(refExpressionErrors, sawUnary) {\n        if (!this.hasPlugin(\"jsx\") && this.match(47)) {\n          return this.tsParseTypeAssertion();\n        }\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseMaybeUnary\", this).call(this, refExpressionErrors, sawUnary);\n      }\n    }, {\n      key: \"parseArrow\",\n      value: function parseArrow(node) {\n        var _this51 = this;\n        if (this.match(14)) {\n          var result = this.tryParse(function (abort) {\n            var returnType = _this51.tsParseTypeOrTypePredicateAnnotation(14);\n            if (_this51.canInsertSemicolon() || !_this51.match(19)) abort();\n            return returnType;\n          });\n          if (result.aborted) return;\n          if (!result.thrown) {\n            if (result.error) this.state = result.failState;\n            node.returnType = result.node;\n          }\n        }\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseArrow\", this).call(this, node);\n      }\n    }, {\n      key: \"parseAssignableListItemTypes\",\n      value: function parseAssignableListItemTypes(param, flags) {\n        if (!(flags & 2)) return param;\n        if (this.eat(17)) {\n          param.optional = true;\n        }\n        var type = this.tsTryParseTypeAnnotation();\n        if (type) param.typeAnnotation = type;\n        this.resetEndLocation(param);\n        return param;\n      }\n    }, {\n      key: \"isAssignable\",\n      value: function isAssignable(node, isBinding) {\n        switch (node.type) {\n          case \"TSTypeCastExpression\":\n            return this.isAssignable(node.expression, isBinding);\n          case \"TSParameterProperty\":\n            return true;\n          default:\n            return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"isAssignable\", this).call(this, node, isBinding);\n        }\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        var isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        switch (node.type) {\n          case \"ParenthesizedExpression\":\n            this.toAssignableParenthesizedExpression(node, isLHS);\n            break;\n          case \"TSAsExpression\":\n          case \"TSSatisfiesExpression\":\n          case \"TSNonNullExpression\":\n          case \"TSTypeAssertion\":\n            if (isLHS) {\n              this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, {\n                at: node\n              });\n            } else {\n              this.raise(TSErrors.UnexpectedTypeCastInParameter, {\n                at: node\n              });\n            }\n            this.toAssignable(node.expression, isLHS);\n            break;\n          case \"AssignmentExpression\":\n            if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n              node.left = this.typeCastToParameter(node.left);\n            }\n          default:\n            _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"toAssignable\", this).call(this, node, isLHS);\n        }\n      }\n    }, {\n      key: \"toAssignableParenthesizedExpression\",\n      value: function toAssignableParenthesizedExpression(node, isLHS) {\n        switch (node.expression.type) {\n          case \"TSAsExpression\":\n          case \"TSSatisfiesExpression\":\n          case \"TSNonNullExpression\":\n          case \"TSTypeAssertion\":\n          case \"ParenthesizedExpression\":\n            this.toAssignable(node.expression, isLHS);\n            break;\n          default:\n            _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"toAssignable\", this).call(this, node, isLHS);\n        }\n      }\n    }, {\n      key: \"checkToRestConversion\",\n      value: function checkToRestConversion(node, allowPattern) {\n        switch (node.type) {\n          case \"TSAsExpression\":\n          case \"TSSatisfiesExpression\":\n          case \"TSTypeAssertion\":\n          case \"TSNonNullExpression\":\n            this.checkToRestConversion(node.expression, false);\n            break;\n          default:\n            _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"checkToRestConversion\", this).call(this, node, allowPattern);\n        }\n      }\n    }, {\n      key: \"isValidLVal\",\n      value: function isValidLVal(type, isUnparenthesizedInAssign, binding) {\n        return getOwn({\n          TSTypeCastExpression: true,\n          TSParameterProperty: \"parameter\",\n          TSNonNullExpression: \"expression\",\n          TSAsExpression: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && [\"expression\", true],\n          TSSatisfiesExpression: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && [\"expression\", true],\n          TSTypeAssertion: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && [\"expression\", true]\n        }, type) || _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"isValidLVal\", this).call(this, type, isUnparenthesizedInAssign, binding);\n      }\n    }, {\n      key: \"parseBindingAtom\",\n      value: function parseBindingAtom() {\n        if (this.state.type === 78) {\n          return this.parseIdentifier(true);\n        }\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseBindingAtom\", this).call(this);\n      }\n    }, {\n      key: \"parseMaybeDecoratorArguments\",\n      value: function parseMaybeDecoratorArguments(expr) {\n        if (this.match(47) || this.match(51)) {\n          var typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (this.match(10)) {\n            var call = _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseMaybeDecoratorArguments\", this).call(this, expr);\n            call.typeParameters = typeArguments;\n            return call;\n          }\n          this.unexpected(null, 10);\n        }\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseMaybeDecoratorArguments\", this).call(this, expr);\n      }\n    }, {\n      key: \"checkCommaAfterRest\",\n      value: function checkCommaAfterRest(close) {\n        if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {\n          this.next();\n          return false;\n        }\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"checkCommaAfterRest\", this).call(this, close);\n      }\n    }, {\n      key: \"isClassMethod\",\n      value: function isClassMethod() {\n        return this.match(47) || _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"isClassMethod\", this).call(this);\n      }\n    }, {\n      key: \"isClassProperty\",\n      value: function isClassProperty() {\n        return this.match(35) || this.match(14) || _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"isClassProperty\", this).call(this);\n      }\n    }, {\n      key: \"parseMaybeDefault\",\n      value: function parseMaybeDefault(startLoc, left) {\n        var node = _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseMaybeDefault\", this).call(this, startLoc, left);\n        if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n          this.raise(TSErrors.TypeAnnotationAfterAssign, {\n            at: node.typeAnnotation\n          });\n        }\n        return node;\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        if (this.state.inType) {\n          if (code === 62) {\n            this.finishOp(48, 1);\n            return;\n          }\n          if (code === 60) {\n            this.finishOp(47, 1);\n            return;\n          }\n        }\n        _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"getTokenFromCode\", this).call(this, code);\n      }\n    }, {\n      key: \"reScan_lt_gt\",\n      value: function reScan_lt_gt() {\n        var type = this.state.type;\n        if (type === 47) {\n          this.state.pos -= 1;\n          this.readToken_lt();\n        } else if (type === 48) {\n          this.state.pos -= 1;\n          this.readToken_gt();\n        }\n      }\n    }, {\n      key: \"reScan_lt\",\n      value: function reScan_lt() {\n        var type = this.state.type;\n        if (type === 51) {\n          this.state.pos -= 2;\n          this.finishOp(47, 1);\n          return 47;\n        }\n        return type;\n      }\n    }, {\n      key: \"toAssignableList\",\n      value: function toAssignableList(exprList, trailingCommaLoc, isLHS) {\n        for (var i = 0; i < exprList.length; i++) {\n          var expr = exprList[i];\n          if ((expr == null ? void 0 : expr.type) === \"TSTypeCastExpression\") {\n            exprList[i] = this.typeCastToParameter(expr);\n          }\n        }\n        _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"toAssignableList\", this).call(this, exprList, trailingCommaLoc, isLHS);\n      }\n    }, {\n      key: \"typeCastToParameter\",\n      value: function typeCastToParameter(node) {\n        node.expression.typeAnnotation = node.typeAnnotation;\n        this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n        return node.expression;\n      }\n    }, {\n      key: \"shouldParseArrow\",\n      value: function shouldParseArrow(params) {\n        var _this52 = this;\n        if (this.match(14)) {\n          return params.every(function (expr) {\n            return _this52.isAssignable(expr, true);\n          });\n        }\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"shouldParseArrow\", this).call(this, params);\n      }\n    }, {\n      key: \"shouldParseAsyncArrow\",\n      value: function shouldParseAsyncArrow() {\n        return this.match(14) || _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"shouldParseAsyncArrow\", this).call(this);\n      }\n    }, {\n      key: \"canHaveLeadingDecorator\",\n      value: function canHaveLeadingDecorator() {\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"canHaveLeadingDecorator\", this).call(this) || this.isAbstractClass();\n      }\n    }, {\n      key: \"jsxParseOpeningElementAfterName\",\n      value: function jsxParseOpeningElementAfterName(node) {\n        var _this53 = this;\n        if (this.match(47) || this.match(51)) {\n          var typeArguments = this.tsTryParseAndCatch(function () {\n            return _this53.tsParseTypeArgumentsInExpression();\n          });\n          if (typeArguments) node.typeParameters = typeArguments;\n        }\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"jsxParseOpeningElementAfterName\", this).call(this, node);\n      }\n    }, {\n      key: \"getGetterSetterExpectedParamCount\",\n      value: function getGetterSetterExpectedParamCount(method) {\n        var baseCount = _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"getGetterSetterExpectedParamCount\", this).call(this, method);\n        var params = this.getObjectOrClassMethodParams(method);\n        var firstParam = params[0];\n        var hasContextParam = firstParam && this.isThisParam(firstParam);\n        return hasContextParam ? baseCount + 1 : baseCount;\n      }\n    }, {\n      key: \"parseCatchClauseParam\",\n      value: function parseCatchClauseParam() {\n        var param = _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseCatchClauseParam\", this).call(this);\n        var type = this.tsTryParseTypeAnnotation();\n        if (type) {\n          param.typeAnnotation = type;\n          this.resetEndLocation(param);\n        }\n        return param;\n      }\n    }, {\n      key: \"tsInAmbientContext\",\n      value: function tsInAmbientContext(cb) {\n        var oldIsAmbientContext = this.state.isAmbientContext;\n        this.state.isAmbientContext = true;\n        try {\n          return cb();\n        } finally {\n          this.state.isAmbientContext = oldIsAmbientContext;\n        }\n      }\n    }, {\n      key: \"parseClass\",\n      value: function parseClass(node, isStatement, optionalId) {\n        var oldInAbstractClass = this.state.inAbstractClass;\n        this.state.inAbstractClass = !!node.abstract;\n        try {\n          return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseClass\", this).call(this, node, isStatement, optionalId);\n        } finally {\n          this.state.inAbstractClass = oldInAbstractClass;\n        }\n      }\n    }, {\n      key: \"tsParseAbstractDeclaration\",\n      value: function tsParseAbstractDeclaration(node, decorators) {\n        if (this.match(80)) {\n          node.abstract = true;\n          return this.maybeTakeDecorators(decorators, this.parseClass(node, true, false));\n        } else if (this.isContextual(127)) {\n          if (!this.hasFollowingLineBreak()) {\n            node.abstract = true;\n            this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n              at: node\n            });\n            return this.tsParseInterfaceDeclaration(node);\n          }\n        } else {\n          this.unexpected(null, 80);\n        }\n      }\n    }, {\n      key: \"parseMethod\",\n      value: function parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {\n        var method = _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseMethod\", this).call(this, node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n        if (method.abstract) {\n          var hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n          if (hasBody) {\n            var key = method.key;\n            this.raise(TSErrors.AbstractMethodHasImplementation, {\n              at: method,\n              methodName: key.type === \"Identifier\" && !method.computed ? key.name : \"[\".concat(this.input.slice(key.start, key.end), \"]\")\n            });\n          }\n        }\n        return method;\n      }\n    }, {\n      key: \"tsParseTypeParameterName\",\n      value: function tsParseTypeParameterName() {\n        var typeName = this.parseIdentifier();\n        return typeName.name;\n      }\n    }, {\n      key: \"shouldParseAsAmbientContext\",\n      value: function shouldParseAsAmbientContext() {\n        return !!this.getPluginOption(\"typescript\", \"dts\");\n      }\n    }, {\n      key: \"parse\",\n      value: function parse() {\n        if (this.shouldParseAsAmbientContext()) {\n          this.state.isAmbientContext = true;\n        }\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parse\", this).call(this);\n      }\n    }, {\n      key: \"getExpression\",\n      value: function getExpression() {\n        if (this.shouldParseAsAmbientContext()) {\n          this.state.isAmbientContext = true;\n        }\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"getExpression\", this).call(this);\n      }\n    }, {\n      key: \"parseExportSpecifier\",\n      value: function parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n        if (!isString && isMaybeTypeOnly) {\n          this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);\n          return this.finishNode(node, \"ExportSpecifier\");\n        }\n        node.exportKind = \"value\";\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseExportSpecifier\", this).call(this, node, isString, isInTypeExport, isMaybeTypeOnly);\n      }\n    }, {\n      key: \"parseImportSpecifier\",\n      value: function parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {\n        if (!importedIsString && isMaybeTypeOnly) {\n          this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);\n          return this.finishNode(specifier, \"ImportSpecifier\");\n        }\n        specifier.importKind = \"value\";\n        return _get(_getPrototypeOf(TypeScriptParserMixin.prototype), \"parseImportSpecifier\", this).call(this, specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT);\n      }\n    }, {\n      key: \"parseTypeOnlyImportExportSpecifier\",\n      value: function parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {\n        var leftOfAsKey = isImport ? \"imported\" : \"local\";\n        var rightOfAsKey = isImport ? \"local\" : \"exported\";\n        var leftOfAs = node[leftOfAsKey];\n        var rightOfAs;\n        var hasTypeSpecifier = false;\n        var canParseAsKeyword = true;\n        var loc = leftOfAs.loc.start;\n        if (this.isContextual(93)) {\n          var firstAs = this.parseIdentifier();\n          if (this.isContextual(93)) {\n            var secondAs = this.parseIdentifier();\n            if (tokenIsKeywordOrIdentifier(this.state.type)) {\n              hasTypeSpecifier = true;\n              leftOfAs = firstAs;\n              rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n              canParseAsKeyword = false;\n            } else {\n              rightOfAs = secondAs;\n              canParseAsKeyword = false;\n            }\n          } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            canParseAsKeyword = false;\n            rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n          } else {\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          hasTypeSpecifier = true;\n          if (isImport) {\n            leftOfAs = this.parseIdentifier(true);\n            if (!this.isContextual(93)) {\n              this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true);\n            }\n          } else {\n            leftOfAs = this.parseModuleExportName();\n          }\n        }\n        if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n          this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, {\n            at: loc\n          });\n        }\n        node[leftOfAsKey] = leftOfAs;\n        node[rightOfAsKey] = rightOfAs;\n        var kindKey = isImport ? \"importKind\" : \"exportKind\";\n        node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n        if (canParseAsKeyword && this.eatContextual(93)) {\n          node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n        }\n        if (!node[rightOfAsKey]) {\n          node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n        }\n        if (isImport) {\n          this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT);\n        }\n      }\n    }]);\n    return TypeScriptParserMixin;\n  }(superClass);\n};\nfunction isPossiblyLiteralEnum(expression) {\n  if (expression.type !== \"MemberExpression\") return false;\n  var computed = expression.computed,\n    property = expression.property;\n  if (computed && property.type !== \"StringLiteral\" && (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)) {\n    return false;\n  }\n  return isUncomputedMemberExpressionChain(expression.object);\n}\nfunction isValidAmbientConstInitializer(expression, estree) {\n  var _expression$extra;\n  var type = expression.type;\n  if ((_expression$extra = expression.extra) != null && _expression$extra.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      var value = expression.value;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\nfunction isNumber(expression, estree) {\n  if (estree) {\n    return expression.type === \"Literal\" && (typeof expression.value === \"number\" || \"bigint\" in expression);\n  }\n  return expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\";\n}\nfunction isNegativeNumber(expression, estree) {\n  if (expression.type === \"UnaryExpression\") {\n    var operator = expression.operator,\n      argument = expression.argument;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isUncomputedMemberExpressionChain(expression) {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\" || expression.computed) {\n    return false;\n  }\n  return isUncomputedMemberExpressionChain(expression.object);\n}\nvar PlaceholderErrors = ParseErrorEnum(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"placeholders\"])))({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\"\n});\nvar placeholders = function placeholders(superClass) {\n  return /*#__PURE__*/function (_superClass5) {\n    _inherits(PlaceholdersParserMixin, _superClass5);\n    var _super15 = _createSuper(PlaceholdersParserMixin);\n    function PlaceholdersParserMixin() {\n      _classCallCheck(this, PlaceholdersParserMixin);\n      return _super15.apply(this, arguments);\n    }\n    _createClass(PlaceholdersParserMixin, [{\n      key: \"parsePlaceholder\",\n      value: function parsePlaceholder(expectedNode) {\n        if (this.match(142)) {\n          var node = this.startNode();\n          this.next();\n          this.assertNoSpace();\n          node.name = _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"parseIdentifier\", this).call(this, true);\n          this.assertNoSpace();\n          this.expect(142);\n          return this.finishPlaceholder(node, expectedNode);\n        }\n      }\n    }, {\n      key: \"finishPlaceholder\",\n      value: function finishPlaceholder(node, expectedNode) {\n        var isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n        node.expectedNode = expectedNode;\n        return isFinished ? node : this.finishNode(node, \"Placeholder\");\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n          this.finishOp(142, 2);\n        } else {\n          _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"getTokenFromCode\", this).call(this, code);\n        }\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom(refExpressionErrors) {\n        return this.parsePlaceholder(\"Expression\") || _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"parseExprAtom\", this).call(this, refExpressionErrors);\n      }\n    }, {\n      key: \"parseIdentifier\",\n      value: function parseIdentifier(liberal) {\n        return this.parsePlaceholder(\"Identifier\") || _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"parseIdentifier\", this).call(this, liberal);\n      }\n    }, {\n      key: \"checkReservedWord\",\n      value: function checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n        if (word !== undefined) {\n          _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"checkReservedWord\", this).call(this, word, startLoc, checkKeywords, isBinding);\n        }\n      }\n    }, {\n      key: \"parseBindingAtom\",\n      value: function parseBindingAtom() {\n        return this.parsePlaceholder(\"Pattern\") || _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"parseBindingAtom\", this).call(this);\n      }\n    }, {\n      key: \"isValidLVal\",\n      value: function isValidLVal(type, isParenthesized, binding) {\n        return type === \"Placeholder\" || _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"isValidLVal\", this).call(this, type, isParenthesized, binding);\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node, isLHS) {\n        if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n          node.expectedNode = \"Pattern\";\n        } else {\n          _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"toAssignable\", this).call(this, node, isLHS);\n        }\n      }\n    }, {\n      key: \"chStartsBindingIdentifier\",\n      value: function chStartsBindingIdentifier(ch, pos) {\n        if (_get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"chStartsBindingIdentifier\", this).call(this, ch, pos)) {\n          return true;\n        }\n        var nextToken = this.lookahead();\n        if (nextToken.type === 142) {\n          return true;\n        }\n        return false;\n      }\n    }, {\n      key: \"verifyBreakContinue\",\n      value: function verifyBreakContinue(node, isBreak) {\n        if (node.label && node.label.type === \"Placeholder\") return;\n        _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"verifyBreakContinue\", this).call(this, node, isBreak);\n      }\n    }, {\n      key: \"parseExpressionStatement\",\n      value: function parseExpressionStatement(node, expr) {\n        if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n          return _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"parseExpressionStatement\", this).call(this, node, expr);\n        }\n        if (this.match(14)) {\n          var stmt = node;\n          stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n          this.next();\n          stmt.body = _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"parseStatementOrSloppyAnnexBFunctionDeclaration\", this).call(this);\n          return this.finishNode(stmt, \"LabeledStatement\");\n        }\n        this.semicolon();\n        node.name = expr.name;\n        return this.finishPlaceholder(node, \"Statement\");\n      }\n    }, {\n      key: \"parseBlock\",\n      value: function parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {\n        return this.parsePlaceholder(\"BlockStatement\") || _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"parseBlock\", this).call(this, allowDirectives, createNewLexicalScope, afterBlockParse);\n      }\n    }, {\n      key: \"parseFunctionId\",\n      value: function parseFunctionId(requireId) {\n        return this.parsePlaceholder(\"Identifier\") || _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"parseFunctionId\", this).call(this, requireId);\n      }\n    }, {\n      key: \"parseClass\",\n      value: function parseClass(node, isStatement, optionalId) {\n        var type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n        this.next();\n        var oldStrict = this.state.strict;\n        var placeholder = this.parsePlaceholder(\"Identifier\");\n        if (placeholder) {\n          if (this.match(81) || this.match(142) || this.match(5)) {\n            node.id = placeholder;\n          } else if (optionalId || !isStatement) {\n            node.id = null;\n            node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n            return this.finishNode(node, type);\n          } else {\n            throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n              at: this.state.startLoc\n            });\n          }\n        } else {\n          this.parseClassId(node, isStatement, optionalId);\n        }\n        _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"parseClassSuper\", this).call(this, node);\n        node.body = this.parsePlaceholder(\"ClassBody\") || _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"parseClassBody\", this).call(this, !!node.superClass, oldStrict);\n        return this.finishNode(node, type);\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node, decorators) {\n        var placeholder = this.parsePlaceholder(\"Identifier\");\n        if (!placeholder) return _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"parseExport\", this).call(this, node, decorators);\n        if (!this.isContextual(97) && !this.match(12)) {\n          node.specifiers = [];\n          node.source = null;\n          node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n          return this.finishNode(node, \"ExportNamedDeclaration\");\n        }\n        this.expectPlugin(\"exportDefaultFrom\");\n        var specifier = this.startNode();\n        specifier.exported = placeholder;\n        node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n        return _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"parseExport\", this).call(this, node, decorators);\n      }\n    }, {\n      key: \"isExportDefaultSpecifier\",\n      value: function isExportDefaultSpecifier() {\n        if (this.match(65)) {\n          var next = this.nextTokenStart();\n          if (this.isUnparsedContextual(next, \"from\")) {\n            if (this.input.startsWith(tokenLabelName(142), this.nextTokenStartSince(next + 4))) {\n              return true;\n            }\n          }\n        }\n        return _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"isExportDefaultSpecifier\", this).call(this);\n      }\n    }, {\n      key: \"maybeParseExportDefaultSpecifier\",\n      value: function maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {\n        var _specifiers;\n        if ((_specifiers = node.specifiers) != null && _specifiers.length) {\n          return true;\n        }\n        return _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"maybeParseExportDefaultSpecifier\", this).call(this, node, maybeDefaultIdentifier);\n      }\n    }, {\n      key: \"checkExport\",\n      value: function checkExport(node) {\n        var specifiers = node.specifiers;\n        if (specifiers != null && specifiers.length) {\n          node.specifiers = specifiers.filter(function (node) {\n            return node.exported.type === \"Placeholder\";\n          });\n        }\n        _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"checkExport\", this).call(this, node);\n        node.specifiers = specifiers;\n      }\n    }, {\n      key: \"parseImport\",\n      value: function parseImport(node) {\n        var placeholder = this.parsePlaceholder(\"Identifier\");\n        if (!placeholder) return _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"parseImport\", this).call(this, node);\n        node.specifiers = [];\n        if (!this.isContextual(97) && !this.match(12)) {\n          node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n          this.semicolon();\n          return this.finishNode(node, \"ImportDeclaration\");\n        }\n        var specifier = this.startNodeAtNode(placeholder);\n        specifier.local = placeholder;\n        node.specifiers.push(this.finishNode(specifier, \"ImportDefaultSpecifier\"));\n        if (this.eat(12)) {\n          var hasStarImport = this.maybeParseStarImportSpecifier(node);\n          if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n        }\n        this.expectContextual(97);\n        node.source = this.parseImportSource();\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n    }, {\n      key: \"parseImportSource\",\n      value: function parseImportSource() {\n        return this.parsePlaceholder(\"StringLiteral\") || _get(_getPrototypeOf(PlaceholdersParserMixin.prototype), \"parseImportSource\", this).call(this);\n      }\n    }, {\n      key: \"assertNoSpace\",\n      value: function assertNoSpace() {\n        if (this.state.start > this.state.lastTokEndLoc.index) {\n          this.raise(PlaceholderErrors.UnexpectedSpace, {\n            at: this.state.lastTokEndLoc\n          });\n        }\n      }\n    }]);\n    return PlaceholdersParserMixin;\n  }(superClass);\n};\nvar v8intrinsic = function v8intrinsic(superClass) {\n  return /*#__PURE__*/function (_superClass6) {\n    _inherits(V8IntrinsicMixin, _superClass6);\n    var _super16 = _createSuper(V8IntrinsicMixin);\n    function V8IntrinsicMixin() {\n      _classCallCheck(this, V8IntrinsicMixin);\n      return _super16.apply(this, arguments);\n    }\n    _createClass(V8IntrinsicMixin, [{\n      key: \"parseV8Intrinsic\",\n      value: function parseV8Intrinsic() {\n        if (this.match(54)) {\n          var v8IntrinsicStartLoc = this.state.startLoc;\n          var node = this.startNode();\n          this.next();\n          if (tokenIsIdentifier(this.state.type)) {\n            var name = this.parseIdentifierName();\n            var identifier = this.createIdentifier(node, name);\n            identifier.type = \"V8IntrinsicIdentifier\";\n            if (this.match(10)) {\n              return identifier;\n            }\n          }\n          this.unexpected(v8IntrinsicStartLoc);\n        }\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom(refExpressionErrors) {\n        return this.parseV8Intrinsic() || _get(_getPrototypeOf(V8IntrinsicMixin.prototype), \"parseExprAtom\", this).call(this, refExpressionErrors);\n      }\n    }]);\n    return V8IntrinsicMixin;\n  }(superClass);\n};\nfunction hasPlugin(plugins, expectedConfig) {\n  var _ref96 = typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig,\n    _ref97 = _slicedToArray(_ref96, 2),\n    expectedName = _ref97[0],\n    expectedOptions = _ref97[1];\n  var expectedKeys = Object.keys(expectedOptions);\n  var expectedOptionsIsEmpty = expectedKeys.length === 0;\n  return plugins.some(function (p) {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      var _p = _slicedToArray(p, 2),\n        pluginName = _p[0],\n        pluginOptions = _p[1];\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (var _i4 = 0, _expectedKeys = expectedKeys; _i4 < _expectedKeys.length; _i4++) {\n        var key = _expectedKeys[_i4];\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\nfunction getPluginOption(plugins, name, option) {\n  var plugin = plugins.find(function (plugin) {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n  if (plugin && Array.isArray(plugin) && plugin.length > 1) {\n    return plugin[1][option];\n  }\n  return null;\n}\nvar PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nvar TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nvar RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n    var decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n    if (decoratorsBeforeExport != null && typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean, if specified.\");\n    }\n    var allowCallParenthesized = getPluginOption(plugins, \"decorators\", \"allowCallParenthesized\");\n    if (allowCallParenthesized != null && typeof allowCallParenthesized !== \"boolean\") {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    var proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      var proposalList = PIPELINE_PROPOSALS.map(function (p) {\n        return \"\\\"\".concat(p, \"\\\"\");\n      }).join(\", \");\n      throw new Error(\"\\\"pipelineOperator\\\" requires \\\"proposal\\\" option whose value must be one of: \".concat(proposalList, \".\"));\n    }\n    var tupleSyntaxIsHash = hasPlugin(plugins, [\"recordAndTuple\", {\n      syntaxType: \"hash\"\n    }]);\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n      var topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        var tokenList = TOPIC_TOKENS.map(function (t) {\n          return \"\\\"\".concat(t, \"\\\"\");\n        }).join(\", \");\n        throw new Error(\"\\\"pipelineOperator\\\" in \\\"proposal\\\": \\\"hack\\\" mode also requires a \\\"topicToken\\\" option whose value must be one of: \".concat(tokenList, \".\"));\n      }\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\") || hasPlugin(plugins, \"importAttributes\")) {\n        throw new Error(\"Cannot combine importAssertions, importAttributes and moduleAttributes plugins.\");\n      }\n      var moduleAttributesVersionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n  if (hasPlugin(plugins, \"importAssertions\") && hasPlugin(plugins, \"importAttributes\")) {\n    throw new Error(\"Cannot combine importAssertions and importAttributes plugins.\");\n  }\n  if (hasPlugin(plugins, \"recordAndTuple\") && getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") != null && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(function (p) {\n      return \"'\".concat(p, \"'\");\n    }).join(\", \"));\n  }\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    var error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\nvar mixinPlugins = {\n  estree: estree,\n  jsx: jsx,\n  flow: flow,\n  typescript: typescript,\n  v8intrinsic: v8intrinsic,\n  placeholders: placeholders\n};\nvar mixinPluginNames = Object.keys(mixinPlugins);\nvar defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startColumn: 0,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowNewTargetOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true,\n  annexB: true\n};\nfunction getOptions(opts) {\n  if (opts && opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n  var options = {};\n  for (var _i5 = 0, _Object$keys3 = Object.keys(defaultOptions); _i5 < _Object$keys3.length; _i5++) {\n    var key = _Object$keys3[_i5];\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\nvar ExpressionParser = /*#__PURE__*/function (_LValParser) {\n  _inherits(ExpressionParser, _LValParser);\n  var _super17 = _createSuper(ExpressionParser);\n  function ExpressionParser() {\n    _classCallCheck(this, ExpressionParser);\n    return _super17.apply(this, arguments);\n  }\n  _createClass(ExpressionParser, [{\n    key: \"checkProto\",\n    value: function checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n      if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n        return;\n      }\n      var key = prop.key;\n      var name = key.type === \"Identifier\" ? key.name : key.value;\n      if (name === \"__proto__\") {\n        if (isRecord) {\n          this.raise(Errors.RecordNoProto, {\n            at: key\n          });\n          return;\n        }\n        if (protoRef.used) {\n          if (refExpressionErrors) {\n            if (refExpressionErrors.doubleProtoLoc === null) {\n              refExpressionErrors.doubleProtoLoc = key.loc.start;\n            }\n          } else {\n            this.raise(Errors.DuplicateProto, {\n              at: key\n            });\n          }\n        }\n        protoRef.used = true;\n      }\n    }\n  }, {\n    key: \"shouldExitDescending\",\n    value: function shouldExitDescending(expr, potentialArrowAt) {\n      return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n    }\n  }, {\n    key: \"getExpression\",\n    value: function getExpression() {\n      this.enterInitialScopes();\n      this.nextToken();\n      var expr = this.parseExpression();\n      if (!this.match(137)) {\n        this.unexpected();\n      }\n      this.finalizeRemainingComments();\n      expr.comments = this.state.comments;\n      expr.errors = this.state.errors;\n      if (this.options.tokens) {\n        expr.tokens = this.tokens;\n      }\n      return expr;\n    }\n  }, {\n    key: \"parseExpression\",\n    value: function parseExpression(disallowIn, refExpressionErrors) {\n      var _this54 = this;\n      if (disallowIn) {\n        return this.disallowInAnd(function () {\n          return _this54.parseExpressionBase(refExpressionErrors);\n        });\n      }\n      return this.allowInAnd(function () {\n        return _this54.parseExpressionBase(refExpressionErrors);\n      });\n    }\n  }, {\n    key: \"parseExpressionBase\",\n    value: function parseExpressionBase(refExpressionErrors) {\n      var startLoc = this.state.startLoc;\n      var expr = this.parseMaybeAssign(refExpressionErrors);\n      if (this.match(12)) {\n        var node = this.startNodeAt(startLoc);\n        node.expressions = [expr];\n        while (this.eat(12)) {\n          node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n        }\n        this.toReferencedList(node.expressions);\n        return this.finishNode(node, \"SequenceExpression\");\n      }\n      return expr;\n    }\n  }, {\n    key: \"parseMaybeAssignDisallowIn\",\n    value: function parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n      var _this55 = this;\n      return this.disallowInAnd(function () {\n        return _this55.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      });\n    }\n  }, {\n    key: \"parseMaybeAssignAllowIn\",\n    value: function parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n      var _this56 = this;\n      return this.allowInAnd(function () {\n        return _this56.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      });\n    }\n  }, {\n    key: \"setOptionalParametersError\",\n    value: function setOptionalParametersError(refExpressionErrors, resultError) {\n      var _resultError$loc;\n      refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;\n    }\n  }, {\n    key: \"parseMaybeAssign\",\n    value: function parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n      var startLoc = this.state.startLoc;\n      if (this.isContextual(106)) {\n        if (this.prodParam.hasYield) {\n          var _left2 = this.parseYield();\n          if (afterLeftParse) {\n            _left2 = afterLeftParse.call(this, _left2, startLoc);\n          }\n          return _left2;\n        }\n      }\n      var ownExpressionErrors;\n      if (refExpressionErrors) {\n        ownExpressionErrors = false;\n      } else {\n        refExpressionErrors = new ExpressionErrors();\n        ownExpressionErrors = true;\n      }\n      var type = this.state.type;\n      if (type === 10 || tokenIsIdentifier(type)) {\n        this.state.potentialArrowAt = this.state.start;\n      }\n      var left = this.parseMaybeConditional(refExpressionErrors);\n      if (afterLeftParse) {\n        left = afterLeftParse.call(this, left, startLoc);\n      }\n      if (tokenIsAssignment(this.state.type)) {\n        var node = this.startNodeAt(startLoc);\n        var operator = this.state.value;\n        node.operator = operator;\n        if (this.match(29)) {\n          this.toAssignable(left, true);\n          node.left = left;\n          var startIndex = startLoc.index;\n          if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startIndex) {\n            refExpressionErrors.doubleProtoLoc = null;\n          }\n          if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startIndex) {\n            refExpressionErrors.shorthandAssignLoc = null;\n          }\n          if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startIndex) {\n            this.checkDestructuringPrivate(refExpressionErrors);\n            refExpressionErrors.privateKeyLoc = null;\n          }\n        } else {\n          node.left = left;\n        }\n        this.next();\n        node.right = this.parseMaybeAssign();\n        this.checkLVal(left, {\n          in: this.finishNode(node, \"AssignmentExpression\")\n        });\n        return node;\n      } else if (ownExpressionErrors) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n      }\n      return left;\n    }\n  }, {\n    key: \"parseMaybeConditional\",\n    value: function parseMaybeConditional(refExpressionErrors) {\n      var startLoc = this.state.startLoc;\n      var potentialArrowAt = this.state.potentialArrowAt;\n      var expr = this.parseExprOps(refExpressionErrors);\n      if (this.shouldExitDescending(expr, potentialArrowAt)) {\n        return expr;\n      }\n      return this.parseConditional(expr, startLoc, refExpressionErrors);\n    }\n  }, {\n    key: \"parseConditional\",\n    value: function parseConditional(expr, startLoc, refExpressionErrors) {\n      if (this.eat(17)) {\n        var node = this.startNodeAt(startLoc);\n        node.test = expr;\n        node.consequent = this.parseMaybeAssignAllowIn();\n        this.expect(14);\n        node.alternate = this.parseMaybeAssign();\n        return this.finishNode(node, \"ConditionalExpression\");\n      }\n      return expr;\n    }\n  }, {\n    key: \"parseMaybeUnaryOrPrivate\",\n    value: function parseMaybeUnaryOrPrivate(refExpressionErrors) {\n      return this.match(136) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);\n    }\n  }, {\n    key: \"parseExprOps\",\n    value: function parseExprOps(refExpressionErrors) {\n      var startLoc = this.state.startLoc;\n      var potentialArrowAt = this.state.potentialArrowAt;\n      var expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n      if (this.shouldExitDescending(expr, potentialArrowAt)) {\n        return expr;\n      }\n      return this.parseExprOp(expr, startLoc, -1);\n    }\n  }, {\n    key: \"parseExprOp\",\n    value: function parseExprOp(left, leftStartLoc, minPrec) {\n      if (this.isPrivateName(left)) {\n        var value = this.getPrivateNameSV(left);\n        if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {\n          this.raise(Errors.PrivateInExpectedIn, {\n            at: left,\n            identifierName: value\n          });\n        }\n        this.classScope.usePrivateName(value, left.loc.start);\n      }\n      var op = this.state.type;\n      if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {\n        var prec = tokenOperatorPrecedence(op);\n        if (prec > minPrec) {\n          if (op === 39) {\n            this.expectPlugin(\"pipelineOperator\");\n            if (this.state.inFSharpPipelineDirectBody) {\n              return left;\n            }\n            this.checkPipelineAtInfixOperator(left, leftStartLoc);\n          }\n          var node = this.startNodeAt(leftStartLoc);\n          node.left = left;\n          node.operator = this.state.value;\n          var logical = op === 41 || op === 42;\n          var coalesce = op === 40;\n          if (coalesce) {\n            prec = tokenOperatorPrecedence(42);\n          }\n          this.next();\n          if (op === 39 && this.hasPlugin([\"pipelineOperator\", {\n            proposal: \"minimal\"\n          }])) {\n            if (this.state.type === 96 && this.prodParam.hasAwait) {\n              throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n                at: this.state.startLoc\n              });\n            }\n          }\n          node.right = this.parseExprOpRightExpr(op, prec);\n          var finishedNode = this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n          var nextOp = this.state.type;\n          if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {\n            throw this.raise(Errors.MixingCoalesceWithLogical, {\n              at: this.state.startLoc\n            });\n          }\n          return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n        }\n      }\n      return left;\n    }\n  }, {\n    key: \"parseExprOpRightExpr\",\n    value: function parseExprOpRightExpr(op, prec) {\n      var _this57 = this;\n      var startLoc = this.state.startLoc;\n      switch (op) {\n        case 39:\n          switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n            case \"hack\":\n              return this.withTopicBindingContext(function () {\n                return _this57.parseHackPipeBody();\n              });\n            case \"smart\":\n              return this.withTopicBindingContext(function () {\n                if (_this57.prodParam.hasYield && _this57.isContextual(106)) {\n                  throw _this57.raise(Errors.PipeBodyIsTighter, {\n                    at: _this57.state.startLoc\n                  });\n                }\n                return _this57.parseSmartPipelineBodyInStyle(_this57.parseExprOpBaseRightExpr(op, prec), startLoc);\n              });\n            case \"fsharp\":\n              return this.withSoloAwaitPermittingContext(function () {\n                return _this57.parseFSharpPipelineBody(prec);\n              });\n          }\n        default:\n          return this.parseExprOpBaseRightExpr(op, prec);\n      }\n    }\n  }, {\n    key: \"parseExprOpBaseRightExpr\",\n    value: function parseExprOpBaseRightExpr(op, prec) {\n      var startLoc = this.state.startLoc;\n      return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);\n    }\n  }, {\n    key: \"parseHackPipeBody\",\n    value: function parseHackPipeBody() {\n      var _body$extra;\n      var startLoc = this.state.startLoc;\n      var body = this.parseMaybeAssign();\n      var requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);\n      if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {\n        this.raise(Errors.PipeUnparenthesizedBody, {\n          at: startLoc,\n          type: body.type\n        });\n      }\n      if (!this.topicReferenceWasUsedInCurrentContext()) {\n        this.raise(Errors.PipeTopicUnused, {\n          at: startLoc\n        });\n      }\n      return body;\n    }\n  }, {\n    key: \"checkExponentialAfterUnary\",\n    value: function checkExponentialAfterUnary(node) {\n      if (this.match(57)) {\n        this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n          at: node.argument\n        });\n      }\n    }\n  }, {\n    key: \"parseMaybeUnary\",\n    value: function parseMaybeUnary(refExpressionErrors, sawUnary) {\n      var startLoc = this.state.startLoc;\n      var isAwait = this.isContextual(96);\n      if (isAwait && this.isAwaitAllowed()) {\n        this.next();\n        var _expr = this.parseAwait(startLoc);\n        if (!sawUnary) this.checkExponentialAfterUnary(_expr);\n        return _expr;\n      }\n      var update = this.match(34);\n      var node = this.startNode();\n      if (tokenIsPrefix(this.state.type)) {\n        node.operator = this.state.value;\n        node.prefix = true;\n        if (this.match(72)) {\n          this.expectPlugin(\"throwExpressions\");\n        }\n        var isDelete = this.match(89);\n        this.next();\n        node.argument = this.parseMaybeUnary(null, true);\n        this.checkExpressionErrors(refExpressionErrors, true);\n        if (this.state.strict && isDelete) {\n          var arg = node.argument;\n          if (arg.type === \"Identifier\") {\n            this.raise(Errors.StrictDelete, {\n              at: node\n            });\n          } else if (this.hasPropertyAsPrivateName(arg)) {\n            this.raise(Errors.DeletePrivateField, {\n              at: node\n            });\n          }\n        }\n        if (!update) {\n          if (!sawUnary) {\n            this.checkExponentialAfterUnary(node);\n          }\n          return this.finishNode(node, \"UnaryExpression\");\n        }\n      }\n      var expr = this.parseUpdate(node, update, refExpressionErrors);\n      if (isAwait) {\n        var type = this.state.type;\n        var _startsExpr = this.hasPlugin(\"v8intrinsic\") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);\n        if (_startsExpr && !this.isAmbiguousAwait()) {\n          this.raiseOverwrite(Errors.AwaitNotInAsyncContext, {\n            at: startLoc\n          });\n          return this.parseAwait(startLoc);\n        }\n      }\n      return expr;\n    }\n  }, {\n    key: \"parseUpdate\",\n    value: function parseUpdate(node, update, refExpressionErrors) {\n      if (update) {\n        var updateExpressionNode = node;\n        this.checkLVal(updateExpressionNode.argument, {\n          in: this.finishNode(updateExpressionNode, \"UpdateExpression\")\n        });\n        return node;\n      }\n      var startLoc = this.state.startLoc;\n      var expr = this.parseExprSubscripts(refExpressionErrors);\n      if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n      while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n        var _node10 = this.startNodeAt(startLoc);\n        _node10.operator = this.state.value;\n        _node10.prefix = false;\n        _node10.argument = expr;\n        this.next();\n        this.checkLVal(expr, {\n          in: expr = this.finishNode(_node10, \"UpdateExpression\")\n        });\n      }\n      return expr;\n    }\n  }, {\n    key: \"parseExprSubscripts\",\n    value: function parseExprSubscripts(refExpressionErrors) {\n      var startLoc = this.state.startLoc;\n      var potentialArrowAt = this.state.potentialArrowAt;\n      var expr = this.parseExprAtom(refExpressionErrors);\n      if (this.shouldExitDescending(expr, potentialArrowAt)) {\n        return expr;\n      }\n      return this.parseSubscripts(expr, startLoc);\n    }\n  }, {\n    key: \"parseSubscripts\",\n    value: function parseSubscripts(base, startLoc, noCalls) {\n      var state = {\n        optionalChainMember: false,\n        maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n        stop: false\n      };\n      do {\n        base = this.parseSubscript(base, startLoc, noCalls, state);\n        state.maybeAsyncArrow = false;\n      } while (!state.stop);\n      return base;\n    }\n  }, {\n    key: \"parseSubscript\",\n    value: function parseSubscript(base, startLoc, noCalls, state) {\n      var type = this.state.type;\n      if (!noCalls && type === 15) {\n        return this.parseBind(base, startLoc, noCalls, state);\n      } else if (tokenIsTemplate(type)) {\n        return this.parseTaggedTemplateExpression(base, startLoc, state);\n      }\n      var optional = false;\n      if (type === 18) {\n        if (noCalls) {\n          this.raise(Errors.OptionalChainingNoNew, {\n            at: this.state.startLoc\n          });\n          if (this.lookaheadCharCode() === 40) {\n            state.stop = true;\n            return base;\n          }\n        }\n        state.optionalChainMember = optional = true;\n        this.next();\n      }\n      if (!noCalls && this.match(10)) {\n        return this.parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional);\n      } else {\n        var computed = this.eat(0);\n        if (computed || optional || this.eat(16)) {\n          return this.parseMember(base, startLoc, state, computed, optional);\n        } else {\n          state.stop = true;\n          return base;\n        }\n      }\n    }\n  }, {\n    key: \"parseMember\",\n    value: function parseMember(base, startLoc, state, computed, optional) {\n      var node = this.startNodeAt(startLoc);\n      node.object = base;\n      node.computed = computed;\n      if (computed) {\n        node.property = this.parseExpression();\n        this.expect(3);\n      } else if (this.match(136)) {\n        if (base.type === \"Super\") {\n          this.raise(Errors.SuperPrivateField, {\n            at: startLoc\n          });\n        }\n        this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n        node.property = this.parsePrivateName();\n      } else {\n        node.property = this.parseIdentifier(true);\n      }\n      if (state.optionalChainMember) {\n        node.optional = optional;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      } else {\n        return this.finishNode(node, \"MemberExpression\");\n      }\n    }\n  }, {\n    key: \"parseBind\",\n    value: function parseBind(base, startLoc, noCalls, state) {\n      var node = this.startNodeAt(startLoc);\n      node.object = base;\n      this.next();\n      node.callee = this.parseNoCallExpr();\n      state.stop = true;\n      return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startLoc, noCalls);\n    }\n  }, {\n    key: \"parseCoverCallAndAsyncArrowHead\",\n    value: function parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional) {\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      var refExpressionErrors = null;\n      this.state.maybeInArrowParameters = true;\n      this.next();\n      var node = this.startNodeAt(startLoc);\n      node.callee = base;\n      var maybeAsyncArrow = state.maybeAsyncArrow,\n        optionalChainMember = state.optionalChainMember;\n      if (maybeAsyncArrow) {\n        this.expressionScope.enter(newAsyncArrowScope());\n        refExpressionErrors = new ExpressionErrors();\n      }\n      if (optionalChainMember) {\n        node.optional = optional;\n      }\n      if (optional) {\n        node.arguments = this.parseCallExpressionArguments(11);\n      } else {\n        node.arguments = this.parseCallExpressionArguments(11, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n      }\n      var finishedNode = this.finishCallExpression(node, optionalChainMember);\n      if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n        state.stop = true;\n        this.checkDestructuringPrivate(refExpressionErrors);\n        this.expressionScope.validateAsPattern();\n        this.expressionScope.exit();\n        finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode);\n      } else {\n        if (maybeAsyncArrow) {\n          this.checkExpressionErrors(refExpressionErrors, true);\n          this.expressionScope.exit();\n        }\n        this.toReferencedArguments(finishedNode);\n      }\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      return finishedNode;\n    }\n  }, {\n    key: \"toReferencedArguments\",\n    value: function toReferencedArguments(node, isParenthesizedExpr) {\n      this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n    }\n  }, {\n    key: \"parseTaggedTemplateExpression\",\n    value: function parseTaggedTemplateExpression(base, startLoc, state) {\n      var node = this.startNodeAt(startLoc);\n      node.tag = base;\n      node.quasi = this.parseTemplate(true);\n      if (state.optionalChainMember) {\n        this.raise(Errors.OptionalChainingNoTemplate, {\n          at: startLoc\n        });\n      }\n      return this.finishNode(node, \"TaggedTemplateExpression\");\n    }\n  }, {\n    key: \"atPossibleAsyncArrow\",\n    value: function atPossibleAsyncArrow(base) {\n      return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n    }\n  }, {\n    key: \"expectImportAttributesPlugin\",\n    value: function expectImportAttributesPlugin() {\n      if (!this.hasPlugin(\"importAssertions\")) {\n        this.expectPlugin(\"importAttributes\");\n      }\n    }\n  }, {\n    key: \"finishCallExpression\",\n    value: function finishCallExpression(node, optional) {\n      if (node.callee.type === \"Import\") {\n        if (node.arguments.length === 2) {\n          {\n            if (!this.hasPlugin(\"moduleAttributes\")) {\n              this.expectImportAttributesPlugin();\n            }\n          }\n        }\n        if (node.arguments.length === 0 || node.arguments.length > 2) {\n          this.raise(Errors.ImportCallArity, {\n            at: node,\n            maxArgumentCount: this.hasPlugin(\"importAttributes\") || this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? 2 : 1\n          });\n        } else {\n          var _iterator11 = _createForOfIteratorHelper(node.arguments),\n            _step11;\n          try {\n            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n              var arg = _step11.value;\n              if (arg.type === \"SpreadElement\") {\n                this.raise(Errors.ImportCallSpreadArgument, {\n                  at: arg\n                });\n              }\n            }\n          } catch (err) {\n            _iterator11.e(err);\n          } finally {\n            _iterator11.f();\n          }\n        }\n      }\n      return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n    }\n  }, {\n    key: \"parseCallExpressionArguments\",\n    value: function parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n      var elts = [];\n      var first = true;\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = false;\n      while (!this.eat(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(12);\n          if (this.match(close)) {\n            if (dynamicImport && !this.hasPlugin(\"importAttributes\") && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n              this.raise(Errors.ImportCallArgumentTrailingComma, {\n                at: this.state.lastTokStartLoc\n              });\n            }\n            if (nodeForExtra) {\n              this.addTrailingCommaExtraToNode(nodeForExtra);\n            }\n            this.next();\n            break;\n          }\n        }\n        elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n      }\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      return elts;\n    }\n  }, {\n    key: \"shouldParseAsyncArrow\",\n    value: function shouldParseAsyncArrow() {\n      return this.match(19) && !this.canInsertSemicolon();\n    }\n  }, {\n    key: \"parseAsyncArrowFromCallExpression\",\n    value: function parseAsyncArrowFromCallExpression(node, call) {\n      var _call$extra;\n      this.resetPreviousNodeTrailingComments(call);\n      this.expect(19);\n      this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);\n      if (call.innerComments) {\n        setInnerComments(node, call.innerComments);\n      }\n      if (call.callee.trailingComments) {\n        setInnerComments(node, call.callee.trailingComments);\n      }\n      return node;\n    }\n  }, {\n    key: \"parseNoCallExpr\",\n    value: function parseNoCallExpr() {\n      var startLoc = this.state.startLoc;\n      return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n    }\n  }, {\n    key: \"parseExprAtom\",\n    value: function parseExprAtom(refExpressionErrors) {\n      var node;\n      var decorators = null;\n      var type = this.state.type;\n      switch (type) {\n        case 79:\n          return this.parseSuper();\n        case 83:\n          node = this.startNode();\n          this.next();\n          if (this.match(16)) {\n            return this.parseImportMetaProperty(node);\n          }\n          if (!this.match(10)) {\n            this.raise(Errors.UnsupportedImport, {\n              at: this.state.lastTokStartLoc\n            });\n          }\n          return this.finishNode(node, \"Import\");\n        case 78:\n          node = this.startNode();\n          this.next();\n          return this.finishNode(node, \"ThisExpression\");\n        case 90:\n          {\n            return this.parseDo(this.startNode(), false);\n          }\n        case 56:\n        case 31:\n          {\n            this.readRegexp();\n            return this.parseRegExpLiteral(this.state.value);\n          }\n        case 132:\n          return this.parseNumericLiteral(this.state.value);\n        case 133:\n          return this.parseBigIntLiteral(this.state.value);\n        case 134:\n          return this.parseDecimalLiteral(this.state.value);\n        case 131:\n          return this.parseStringLiteral(this.state.value);\n        case 84:\n          return this.parseNullLiteral();\n        case 85:\n          return this.parseBooleanLiteral(true);\n        case 86:\n          return this.parseBooleanLiteral(false);\n        case 10:\n          {\n            var canBeArrow = this.state.potentialArrowAt === this.state.start;\n            return this.parseParenAndDistinguishExpression(canBeArrow);\n          }\n        case 2:\n        case 1:\n          {\n            return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);\n          }\n        case 0:\n          {\n            return this.parseArrayLike(3, true, false, refExpressionErrors);\n          }\n        case 6:\n        case 7:\n          {\n            return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);\n          }\n        case 5:\n          {\n            return this.parseObjectLike(8, false, false, refExpressionErrors);\n          }\n        case 68:\n          return this.parseFunctionOrFunctionSent();\n        case 26:\n          decorators = this.parseDecorators();\n        case 80:\n          return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), false);\n        case 77:\n          return this.parseNewOrNewTarget();\n        case 25:\n        case 24:\n          return this.parseTemplate(false);\n        case 15:\n          {\n            node = this.startNode();\n            this.next();\n            node.object = null;\n            var callee = node.callee = this.parseNoCallExpr();\n            if (callee.type === \"MemberExpression\") {\n              return this.finishNode(node, \"BindExpression\");\n            } else {\n              throw this.raise(Errors.UnsupportedBind, {\n                at: callee\n              });\n            }\n          }\n        case 136:\n          {\n            this.raise(Errors.PrivateInExpectedIn, {\n              at: this.state.startLoc,\n              identifierName: this.state.value\n            });\n            return this.parsePrivateName();\n          }\n        case 33:\n          {\n            return this.parseTopicReferenceThenEqualsSign(54, \"%\");\n          }\n        case 32:\n          {\n            return this.parseTopicReferenceThenEqualsSign(44, \"^\");\n          }\n        case 37:\n        case 38:\n          {\n            return this.parseTopicReference(\"hack\");\n          }\n        case 44:\n        case 54:\n        case 27:\n          {\n            var pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n            if (pipeProposal) {\n              return this.parseTopicReference(pipeProposal);\n            }\n            this.unexpected();\n            break;\n          }\n        case 47:\n          {\n            var lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n              this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            } else {\n              this.unexpected();\n            }\n            break;\n          }\n        default:\n          if (tokenIsIdentifier(type)) {\n            if (this.isContextual(125) && this.lookaheadInLineCharCode() === 123) {\n              return this.parseModuleExpression();\n            }\n            var _canBeArrow = this.state.potentialArrowAt === this.state.start;\n            var containsEsc = this.state.containsEsc;\n            var id = this.parseIdentifier();\n            if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n              var _type = this.state.type;\n              if (_type === 68) {\n                this.resetPreviousNodeTrailingComments(id);\n                this.next();\n                return this.parseAsyncFunctionExpression(this.startNodeAtNode(id));\n              } else if (tokenIsIdentifier(_type)) {\n                if (this.lookaheadCharCode() === 61) {\n                  return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n                } else {\n                  return id;\n                }\n              } else if (_type === 90) {\n                this.resetPreviousNodeTrailingComments(id);\n                return this.parseDo(this.startNodeAtNode(id), true);\n              }\n            }\n            if (_canBeArrow && this.match(19) && !this.canInsertSemicolon()) {\n              this.next();\n              return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n            }\n            return id;\n          } else {\n            this.unexpected();\n          }\n      }\n    }\n  }, {\n    key: \"parseTopicReferenceThenEqualsSign\",\n    value: function parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {\n      var pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n      if (pipeProposal) {\n        this.state.type = topicTokenType;\n        this.state.value = topicTokenValue;\n        this.state.pos--;\n        this.state.end--;\n        this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n        return this.parseTopicReference(pipeProposal);\n      } else {\n        this.unexpected();\n      }\n    }\n  }, {\n    key: \"parseTopicReference\",\n    value: function parseTopicReference(pipeProposal) {\n      var node = this.startNode();\n      var startLoc = this.state.startLoc;\n      var tokenType = this.state.type;\n      this.next();\n      return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n    }\n  }, {\n    key: \"finishTopicReference\",\n    value: function finishTopicReference(node, startLoc, pipeProposal, tokenType) {\n      if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {\n        var nodeType = pipeProposal === \"smart\" ? \"PipelinePrimaryTopicReference\" : \"TopicReference\";\n        if (!this.topicReferenceIsAllowedInCurrentContext()) {\n          this.raise(pipeProposal === \"smart\" ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, {\n            at: startLoc\n          });\n        }\n        this.registerTopicReference();\n        return this.finishNode(node, nodeType);\n      } else {\n        throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n          at: startLoc,\n          token: tokenLabelName(tokenType)\n        });\n      }\n    }\n  }, {\n    key: \"testTopicReferenceConfiguration\",\n    value: function testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {\n      switch (pipeProposal) {\n        case \"hack\":\n          {\n            return this.hasPlugin([\"pipelineOperator\", {\n              topicToken: tokenLabelName(tokenType)\n            }]);\n          }\n        case \"smart\":\n          return tokenType === 27;\n        default:\n          throw this.raise(Errors.PipeTopicRequiresHackPipes, {\n            at: startLoc\n          });\n      }\n    }\n  }, {\n    key: \"parseAsyncArrowUnaryFunction\",\n    value: function parseAsyncArrowUnaryFunction(node) {\n      this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n      var params = [this.parseIdentifier()];\n      this.prodParam.exit();\n      if (this.hasPrecedingLineBreak()) {\n        this.raise(Errors.LineTerminatorBeforeArrow, {\n          at: this.state.curPosition()\n        });\n      }\n      this.expect(19);\n      return this.parseArrowExpression(node, params, true);\n    }\n  }, {\n    key: \"parseDo\",\n    value: function parseDo(node, isAsync) {\n      this.expectPlugin(\"doExpressions\");\n      if (isAsync) {\n        this.expectPlugin(\"asyncDoExpressions\");\n      }\n      node.async = isAsync;\n      this.next();\n      var oldLabels = this.state.labels;\n      this.state.labels = [];\n      if (isAsync) {\n        this.prodParam.enter(PARAM_AWAIT);\n        node.body = this.parseBlock();\n        this.prodParam.exit();\n      } else {\n        node.body = this.parseBlock();\n      }\n      this.state.labels = oldLabels;\n      return this.finishNode(node, \"DoExpression\");\n    }\n  }, {\n    key: \"parseSuper\",\n    value: function parseSuper() {\n      var node = this.startNode();\n      this.next();\n      if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n        this.raise(Errors.SuperNotAllowed, {\n          at: node\n        });\n      } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n        this.raise(Errors.UnexpectedSuper, {\n          at: node\n        });\n      }\n      if (!this.match(10) && !this.match(0) && !this.match(16)) {\n        this.raise(Errors.UnsupportedSuper, {\n          at: node\n        });\n      }\n      return this.finishNode(node, \"Super\");\n    }\n  }, {\n    key: \"parsePrivateName\",\n    value: function parsePrivateName() {\n      var node = this.startNode();\n      var id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1));\n      var name = this.state.value;\n      this.next();\n      node.id = this.createIdentifier(id, name);\n      return this.finishNode(node, \"PrivateName\");\n    }\n  }, {\n    key: \"parseFunctionOrFunctionSent\",\n    value: function parseFunctionOrFunctionSent() {\n      var node = this.startNode();\n      this.next();\n      if (this.prodParam.hasYield && this.match(16)) {\n        var meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n        this.next();\n        if (this.match(102)) {\n          this.expectPlugin(\"functionSent\");\n        } else if (!this.hasPlugin(\"functionSent\")) {\n          this.unexpected();\n        }\n        return this.parseMetaProperty(node, meta, \"sent\");\n      }\n      return this.parseFunction(node);\n    }\n  }, {\n    key: \"parseMetaProperty\",\n    value: function parseMetaProperty(node, meta, propertyName) {\n      node.meta = meta;\n      var containsEsc = this.state.containsEsc;\n      node.property = this.parseIdentifier(true);\n      if (node.property.name !== propertyName || containsEsc) {\n        this.raise(Errors.UnsupportedMetaProperty, {\n          at: node.property,\n          target: meta.name,\n          onlyValidPropertyName: propertyName\n        });\n      }\n      return this.finishNode(node, \"MetaProperty\");\n    }\n  }, {\n    key: \"parseImportMetaProperty\",\n    value: function parseImportMetaProperty(node) {\n      var id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n      this.next();\n      if (this.isContextual(100)) {\n        if (!this.inModule) {\n          this.raise(Errors.ImportMetaOutsideModule, {\n            at: id\n          });\n        }\n        this.sawUnambiguousESM = true;\n      }\n      return this.parseMetaProperty(node, id, \"meta\");\n    }\n  }, {\n    key: \"parseLiteralAtNode\",\n    value: function parseLiteralAtNode(value, type, node) {\n      this.addExtra(node, \"rawValue\", value);\n      this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n      node.value = value;\n      this.next();\n      return this.finishNode(node, type);\n    }\n  }, {\n    key: \"parseLiteral\",\n    value: function parseLiteral(value, type) {\n      var node = this.startNode();\n      return this.parseLiteralAtNode(value, type, node);\n    }\n  }, {\n    key: \"parseStringLiteral\",\n    value: function parseStringLiteral(value) {\n      return this.parseLiteral(value, \"StringLiteral\");\n    }\n  }, {\n    key: \"parseNumericLiteral\",\n    value: function parseNumericLiteral(value) {\n      return this.parseLiteral(value, \"NumericLiteral\");\n    }\n  }, {\n    key: \"parseBigIntLiteral\",\n    value: function parseBigIntLiteral(value) {\n      return this.parseLiteral(value, \"BigIntLiteral\");\n    }\n  }, {\n    key: \"parseDecimalLiteral\",\n    value: function parseDecimalLiteral(value) {\n      return this.parseLiteral(value, \"DecimalLiteral\");\n    }\n  }, {\n    key: \"parseRegExpLiteral\",\n    value: function parseRegExpLiteral(value) {\n      var node = this.parseLiteral(value.value, \"RegExpLiteral\");\n      node.pattern = value.pattern;\n      node.flags = value.flags;\n      return node;\n    }\n  }, {\n    key: \"parseBooleanLiteral\",\n    value: function parseBooleanLiteral(value) {\n      var node = this.startNode();\n      node.value = value;\n      this.next();\n      return this.finishNode(node, \"BooleanLiteral\");\n    }\n  }, {\n    key: \"parseNullLiteral\",\n    value: function parseNullLiteral() {\n      var node = this.startNode();\n      this.next();\n      return this.finishNode(node, \"NullLiteral\");\n    }\n  }, {\n    key: \"parseParenAndDistinguishExpression\",\n    value: function parseParenAndDistinguishExpression(canBeArrow) {\n      var startLoc = this.state.startLoc;\n      var val;\n      this.next();\n      this.expressionScope.enter(newArrowHeadScope());\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.maybeInArrowParameters = true;\n      this.state.inFSharpPipelineDirectBody = false;\n      var innerStartLoc = this.state.startLoc;\n      var exprList = [];\n      var refExpressionErrors = new ExpressionErrors();\n      var first = true;\n      var spreadStartLoc;\n      var optionalCommaStartLoc;\n      while (!this.match(11)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);\n          if (this.match(11)) {\n            optionalCommaStartLoc = this.state.startLoc;\n            break;\n          }\n        }\n        if (this.match(21)) {\n          var spreadNodeStartLoc = this.state.startLoc;\n          spreadStartLoc = this.state.startLoc;\n          exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc));\n          if (!this.checkCommaAfterRest(41)) {\n            break;\n          }\n        } else {\n          exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n        }\n      }\n      var innerEndLoc = this.state.lastTokEndLoc;\n      this.expect(11);\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      var arrowNode = this.startNodeAt(startLoc);\n      if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n        this.checkDestructuringPrivate(refExpressionErrors);\n        this.expressionScope.validateAsPattern();\n        this.expressionScope.exit();\n        this.parseArrowExpression(arrowNode, exprList, false);\n        return arrowNode;\n      }\n      this.expressionScope.exit();\n      if (!exprList.length) {\n        this.unexpected(this.state.lastTokStartLoc);\n      }\n      if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n      if (spreadStartLoc) this.unexpected(spreadStartLoc);\n      this.checkExpressionErrors(refExpressionErrors, true);\n      this.toReferencedListDeep(exprList, true);\n      if (exprList.length > 1) {\n        val = this.startNodeAt(innerStartLoc);\n        val.expressions = exprList;\n        this.finishNode(val, \"SequenceExpression\");\n        this.resetEndLocation(val, innerEndLoc);\n      } else {\n        val = exprList[0];\n      }\n      return this.wrapParenthesis(startLoc, val);\n    }\n  }, {\n    key: \"wrapParenthesis\",\n    value: function wrapParenthesis(startLoc, expression) {\n      if (!this.options.createParenthesizedExpressions) {\n        this.addExtra(expression, \"parenthesized\", true);\n        this.addExtra(expression, \"parenStart\", startLoc.index);\n        this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index);\n        return expression;\n      }\n      var parenExpression = this.startNodeAt(startLoc);\n      parenExpression.expression = expression;\n      return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    }\n  }, {\n    key: \"shouldParseArrow\",\n    value: function shouldParseArrow(params) {\n      return !this.canInsertSemicolon();\n    }\n  }, {\n    key: \"parseArrow\",\n    value: function parseArrow(node) {\n      if (this.eat(19)) {\n        return node;\n      }\n    }\n  }, {\n    key: \"parseParenItem\",\n    value: function parseParenItem(node, startLoc) {\n      return node;\n    }\n  }, {\n    key: \"parseNewOrNewTarget\",\n    value: function parseNewOrNewTarget() {\n      var node = this.startNode();\n      this.next();\n      if (this.match(16)) {\n        var meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n        this.next();\n        var metaProp = this.parseMetaProperty(node, meta, \"target\");\n        if (!this.scope.inNonArrowFunction && !this.scope.inClass && !this.options.allowNewTargetOutsideFunction) {\n          this.raise(Errors.UnexpectedNewTarget, {\n            at: metaProp\n          });\n        }\n        return metaProp;\n      }\n      return this.parseNew(node);\n    }\n  }, {\n    key: \"parseNew\",\n    value: function parseNew(node) {\n      this.parseNewCallee(node);\n      if (this.eat(10)) {\n        var args = this.parseExprList(11);\n        this.toReferencedList(args);\n        node.arguments = args;\n      } else {\n        node.arguments = [];\n      }\n      return this.finishNode(node, \"NewExpression\");\n    }\n  }, {\n    key: \"parseNewCallee\",\n    value: function parseNewCallee(node) {\n      node.callee = this.parseNoCallExpr();\n      if (node.callee.type === \"Import\") {\n        this.raise(Errors.ImportCallNotNewExpression, {\n          at: node.callee\n        });\n      }\n    }\n  }, {\n    key: \"parseTemplateElement\",\n    value: function parseTemplateElement(isTagged) {\n      var _this$state3 = this.state,\n        start = _this$state3.start,\n        startLoc = _this$state3.startLoc,\n        end = _this$state3.end,\n        value = _this$state3.value;\n      var elemStart = start + 1;\n      var elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));\n      if (value === null) {\n        if (!isTagged) {\n          this.raise(Errors.InvalidEscapeSequenceTemplate, {\n            at: createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1)\n          });\n        }\n      }\n      var isTail = this.match(24);\n      var endOffset = isTail ? -1 : -2;\n      var elemEnd = end + endOffset;\n      elem.value = {\n        raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n        cooked: value === null ? null : value.slice(1, endOffset)\n      };\n      elem.tail = isTail;\n      this.next();\n      var finishedNode = this.finishNode(elem, \"TemplateElement\");\n      this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));\n      return finishedNode;\n    }\n  }, {\n    key: \"parseTemplate\",\n    value: function parseTemplate(isTagged) {\n      var node = this.startNode();\n      node.expressions = [];\n      var curElt = this.parseTemplateElement(isTagged);\n      node.quasis = [curElt];\n      while (!curElt.tail) {\n        node.expressions.push(this.parseTemplateSubstitution());\n        this.readTemplateContinuation();\n        node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n      }\n      return this.finishNode(node, \"TemplateLiteral\");\n    }\n  }, {\n    key: \"parseTemplateSubstitution\",\n    value: function parseTemplateSubstitution() {\n      return this.parseExpression();\n    }\n  }, {\n    key: \"parseObjectLike\",\n    value: function parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n      if (isRecord) {\n        this.expectPlugin(\"recordAndTuple\");\n      }\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = false;\n      var propHash = Object.create(null);\n      var first = true;\n      var node = this.startNode();\n      node.properties = [];\n      this.next();\n      while (!this.match(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(12);\n          if (this.match(close)) {\n            this.addTrailingCommaExtraToNode(node);\n            break;\n          }\n        }\n        var prop = void 0;\n        if (isPattern) {\n          prop = this.parseBindingProperty();\n        } else {\n          prop = this.parsePropertyDefinition(refExpressionErrors);\n          this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n        }\n        if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n          this.raise(Errors.InvalidRecordProperty, {\n            at: prop\n          });\n        }\n        if (prop.shorthand) {\n          this.addExtra(prop, \"shorthand\", true);\n        }\n        node.properties.push(prop);\n      }\n      this.next();\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      var type = \"ObjectExpression\";\n      if (isPattern) {\n        type = \"ObjectPattern\";\n      } else if (isRecord) {\n        type = \"RecordExpression\";\n      }\n      return this.finishNode(node, type);\n    }\n  }, {\n    key: \"addTrailingCommaExtraToNode\",\n    value: function addTrailingCommaExtraToNode(node) {\n      this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n      this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n    }\n  }, {\n    key: \"maybeAsyncOrAccessorProp\",\n    value: function maybeAsyncOrAccessorProp(prop) {\n      return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));\n    }\n  }, {\n    key: \"parsePropertyDefinition\",\n    value: function parsePropertyDefinition(refExpressionErrors) {\n      var decorators = [];\n      if (this.match(26)) {\n        if (this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedPropertyDecorator, {\n            at: this.state.startLoc\n          });\n        }\n        while (this.match(26)) {\n          decorators.push(this.parseDecorator());\n        }\n      }\n      var prop = this.startNode();\n      var isAsync = false;\n      var isAccessor = false;\n      var startLoc;\n      if (this.match(21)) {\n        if (decorators.length) this.unexpected();\n        return this.parseSpread();\n      }\n      if (decorators.length) {\n        prop.decorators = decorators;\n        decorators = [];\n      }\n      prop.method = false;\n      if (refExpressionErrors) {\n        startLoc = this.state.startLoc;\n      }\n      var isGenerator = this.eat(55);\n      this.parsePropertyNamePrefixOperator(prop);\n      var containsEsc = this.state.containsEsc;\n      var key = this.parsePropertyName(prop, refExpressionErrors);\n      if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n        var keyName = key.name;\n        if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n          isAsync = true;\n          this.resetPreviousNodeTrailingComments(key);\n          isGenerator = this.eat(55);\n          this.parsePropertyName(prop);\n        }\n        if (keyName === \"get\" || keyName === \"set\") {\n          isAccessor = true;\n          this.resetPreviousNodeTrailingComments(key);\n          prop.kind = keyName;\n          if (this.match(55)) {\n            isGenerator = true;\n            this.raise(Errors.AccessorIsGenerator, {\n              at: this.state.curPosition(),\n              kind: keyName\n            });\n            this.next();\n          }\n          this.parsePropertyName(prop);\n        }\n      }\n      return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);\n    }\n  }, {\n    key: \"getGetterSetterExpectedParamCount\",\n    value: function getGetterSetterExpectedParamCount(method) {\n      return method.kind === \"get\" ? 0 : 1;\n    }\n  }, {\n    key: \"getObjectOrClassMethodParams\",\n    value: function getObjectOrClassMethodParams(method) {\n      return method.params;\n    }\n  }, {\n    key: \"checkGetterSetterParams\",\n    value: function checkGetterSetterParams(method) {\n      var _params;\n      var paramCount = this.getGetterSetterExpectedParamCount(method);\n      var params = this.getObjectOrClassMethodParams(method);\n      if (params.length !== paramCount) {\n        this.raise(method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity, {\n          at: method\n        });\n      }\n      if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n        this.raise(Errors.BadSetterRestParameter, {\n          at: method\n        });\n      }\n    }\n  }, {\n    key: \"parseObjectMethod\",\n    value: function parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n      if (isAccessor) {\n        var finishedProp = this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n        this.checkGetterSetterParams(finishedProp);\n        return finishedProp;\n      }\n      if (isAsync || isGenerator || this.match(10)) {\n        if (isPattern) this.unexpected();\n        prop.kind = \"method\";\n        prop.method = true;\n        return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n      }\n    }\n  }, {\n    key: \"parseObjectProperty\",\n    value: function parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {\n      prop.shorthand = false;\n      if (this.eat(14)) {\n        prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n        return this.finishNode(prop, \"ObjectProperty\");\n      }\n      if (!prop.computed && prop.key.type === \"Identifier\") {\n        this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n        if (isPattern) {\n          prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));\n        } else if (this.match(29)) {\n          var shorthandAssignLoc = this.state.startLoc;\n          if (refExpressionErrors != null) {\n            if (refExpressionErrors.shorthandAssignLoc === null) {\n              refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n            }\n          } else {\n            this.raise(Errors.InvalidCoverInitializedName, {\n              at: shorthandAssignLoc\n            });\n          }\n          prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));\n        } else {\n          prop.value = cloneIdentifier(prop.key);\n        }\n        prop.shorthand = true;\n        return this.finishNode(prop, \"ObjectProperty\");\n      }\n    }\n  }, {\n    key: \"parseObjPropValue\",\n    value: function parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n      var node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);\n      if (!node) this.unexpected();\n      return node;\n    }\n  }, {\n    key: \"parsePropertyName\",\n    value: function parsePropertyName(prop, refExpressionErrors) {\n      if (this.eat(0)) {\n        prop.computed = true;\n        prop.key = this.parseMaybeAssignAllowIn();\n        this.expect(3);\n      } else {\n        var _this$state4 = this.state,\n          type = _this$state4.type,\n          value = _this$state4.value;\n        var key;\n        if (tokenIsKeywordOrIdentifier(type)) {\n          key = this.parseIdentifier(true);\n        } else {\n          switch (type) {\n            case 132:\n              key = this.parseNumericLiteral(value);\n              break;\n            case 131:\n              key = this.parseStringLiteral(value);\n              break;\n            case 133:\n              key = this.parseBigIntLiteral(value);\n              break;\n            case 134:\n              key = this.parseDecimalLiteral(value);\n              break;\n            case 136:\n              {\n                var privateKeyLoc = this.state.startLoc;\n                if (refExpressionErrors != null) {\n                  if (refExpressionErrors.privateKeyLoc === null) {\n                    refExpressionErrors.privateKeyLoc = privateKeyLoc;\n                  }\n                } else {\n                  this.raise(Errors.UnexpectedPrivateField, {\n                    at: privateKeyLoc\n                  });\n                }\n                key = this.parsePrivateName();\n                break;\n              }\n            default:\n              this.unexpected();\n          }\n        }\n        prop.key = key;\n        if (type !== 136) {\n          prop.computed = false;\n        }\n      }\n      return prop.key;\n    }\n  }, {\n    key: \"initFunction\",\n    value: function initFunction(node, isAsync) {\n      node.id = null;\n      node.generator = false;\n      node.async = isAsync;\n    }\n  }, {\n    key: \"parseMethod\",\n    value: function parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n      var inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      this.initFunction(node, isAsync);\n      node.generator = isGenerator;\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n      this.prodParam.enter(functionFlags(isAsync, node.generator));\n      this.parseFunctionParams(node, isConstructor);\n      var finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n      this.prodParam.exit();\n      this.scope.exit();\n      return finishedNode;\n    }\n  }, {\n    key: \"parseArrayLike\",\n    value: function parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n      if (isTuple) {\n        this.expectPlugin(\"recordAndTuple\");\n      }\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = false;\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n    }\n  }, {\n    key: \"parseArrowExpression\",\n    value: function parseArrowExpression(node, params, isAsync, trailingCommaLoc) {\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      var flags = functionFlags(isAsync, false);\n      if (!this.match(5) && this.prodParam.hasIn) {\n        flags |= PARAM_IN;\n      }\n      this.prodParam.enter(flags);\n      this.initFunction(node, isAsync);\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      if (params) {\n        this.state.maybeInArrowParameters = true;\n        this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n      }\n      this.state.maybeInArrowParameters = false;\n      this.parseFunctionBody(node, true);\n      this.prodParam.exit();\n      this.scope.exit();\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      return this.finishNode(node, \"ArrowFunctionExpression\");\n    }\n  }, {\n    key: \"setArrowFunctionParameters\",\n    value: function setArrowFunctionParameters(node, params, trailingCommaLoc) {\n      this.toAssignableList(params, trailingCommaLoc, false);\n      node.params = params;\n    }\n  }, {\n    key: \"parseFunctionBodyAndFinish\",\n    value: function parseFunctionBodyAndFinish(node, type) {\n      var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this.parseFunctionBody(node, false, isMethod);\n      return this.finishNode(node, type);\n    }\n  }, {\n    key: \"parseFunctionBody\",\n    value: function parseFunctionBody(node, allowExpression) {\n      var _this58 = this;\n      var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var isExpression = allowExpression && !this.match(5);\n      this.expressionScope.enter(newExpressionScope());\n      if (isExpression) {\n        node.body = this.parseMaybeAssign();\n        this.checkParams(node, false, allowExpression, false);\n      } else {\n        var oldStrict = this.state.strict;\n        var oldLabels = this.state.labels;\n        this.state.labels = [];\n        this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n        node.body = this.parseBlock(true, false, function (hasStrictModeDirective) {\n          var nonSimple = !_this58.isSimpleParamList(node.params);\n          if (hasStrictModeDirective && nonSimple) {\n            _this58.raise(Errors.IllegalLanguageModeDirective, {\n              at: (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.loc.end : node\n            });\n          }\n          var strictModeChanged = !oldStrict && _this58.state.strict;\n          _this58.checkParams(node, !_this58.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n          if (_this58.state.strict && node.id) {\n            _this58.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        });\n        this.prodParam.exit();\n        this.state.labels = oldLabels;\n      }\n      this.expressionScope.exit();\n    }\n  }, {\n    key: \"isSimpleParameter\",\n    value: function isSimpleParameter(node) {\n      return node.type === \"Identifier\";\n    }\n  }, {\n    key: \"isSimpleParamList\",\n    value: function isSimpleParamList(params) {\n      for (var i = 0, len = params.length; i < len; i++) {\n        if (!this.isSimpleParameter(params[i])) return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"checkParams\",\n    value: function checkParams(node, allowDuplicates, isArrowFunction) {\n      var strictModeChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var checkClashes = !allowDuplicates && new Set();\n      var formalParameters = {\n        type: \"FormalParameters\"\n      };\n      var _iterator12 = _createForOfIteratorHelper(node.params),\n        _step12;\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var param = _step12.value;\n          this.checkLVal(param, {\n            in: formalParameters,\n            binding: BIND_VAR,\n            checkClashes: checkClashes,\n            strictModeChanged: strictModeChanged\n          });\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n    }\n  }, {\n    key: \"parseExprList\",\n    value: function parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n      var elts = [];\n      var first = true;\n      while (!this.eat(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(12);\n          if (this.match(close)) {\n            if (nodeForExtra) {\n              this.addTrailingCommaExtraToNode(nodeForExtra);\n            }\n            this.next();\n            break;\n          }\n        }\n        elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n      }\n      return elts;\n    }\n  }, {\n    key: \"parseExprListItem\",\n    value: function parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n      var elt;\n      if (this.match(12)) {\n        if (!allowEmpty) {\n          this.raise(Errors.UnexpectedToken, {\n            at: this.state.curPosition(),\n            unexpected: \",\"\n          });\n        }\n        elt = null;\n      } else if (this.match(21)) {\n        var spreadNodeStartLoc = this.state.startLoc;\n        elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);\n      } else if (this.match(17)) {\n        this.expectPlugin(\"partialApplication\");\n        if (!allowPlaceholder) {\n          this.raise(Errors.UnexpectedArgumentPlaceholder, {\n            at: this.state.startLoc\n          });\n        }\n        var node = this.startNode();\n        this.next();\n        elt = this.finishNode(node, \"ArgumentPlaceholder\");\n      } else {\n        elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n      }\n      return elt;\n    }\n  }, {\n    key: \"parseIdentifier\",\n    value: function parseIdentifier(liberal) {\n      var node = this.startNode();\n      var name = this.parseIdentifierName(liberal);\n      return this.createIdentifier(node, name);\n    }\n  }, {\n    key: \"createIdentifier\",\n    value: function createIdentifier(node, name) {\n      node.name = name;\n      node.loc.identifierName = name;\n      return this.finishNode(node, \"Identifier\");\n    }\n  }, {\n    key: \"parseIdentifierName\",\n    value: function parseIdentifierName(liberal) {\n      var name;\n      var _this$state5 = this.state,\n        startLoc = _this$state5.startLoc,\n        type = _this$state5.type;\n      if (tokenIsKeywordOrIdentifier(type)) {\n        name = this.state.value;\n      } else {\n        this.unexpected();\n      }\n      var tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n      if (liberal) {\n        if (tokenIsKeyword) {\n          this.replaceToken(130);\n        }\n      } else {\n        this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n      }\n      this.next();\n      return name;\n    }\n  }, {\n    key: \"checkReservedWord\",\n    value: function checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n      if (word.length > 10) {\n        return;\n      }\n      if (!canBeReservedWord(word)) {\n        return;\n      }\n      if (checkKeywords && isKeyword(word)) {\n        this.raise(Errors.UnexpectedKeyword, {\n          at: startLoc,\n          keyword: word\n        });\n        return;\n      }\n      var reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n      if (reservedTest(word, this.inModule)) {\n        this.raise(Errors.UnexpectedReservedWord, {\n          at: startLoc,\n          reservedWord: word\n        });\n        return;\n      } else if (word === \"yield\") {\n        if (this.prodParam.hasYield) {\n          this.raise(Errors.YieldBindingIdentifier, {\n            at: startLoc\n          });\n          return;\n        }\n      } else if (word === \"await\") {\n        if (this.prodParam.hasAwait) {\n          this.raise(Errors.AwaitBindingIdentifier, {\n            at: startLoc\n          });\n          return;\n        }\n        if (this.scope.inStaticBlock) {\n          this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n            at: startLoc\n          });\n          return;\n        }\n        this.expressionScope.recordAsyncArrowParametersError({\n          at: startLoc\n        });\n      } else if (word === \"arguments\") {\n        if (this.scope.inClassAndNotInNonArrowFunction) {\n          this.raise(Errors.ArgumentsInClass, {\n            at: startLoc\n          });\n          return;\n        }\n      }\n    }\n  }, {\n    key: \"isAwaitAllowed\",\n    value: function isAwaitAllowed() {\n      if (this.prodParam.hasAwait) return true;\n      if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"parseAwait\",\n    value: function parseAwait(startLoc) {\n      var node = this.startNodeAt(startLoc);\n      this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, {\n        at: node\n      });\n      if (this.eat(55)) {\n        this.raise(Errors.ObsoleteAwaitStar, {\n          at: node\n        });\n      }\n      if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n        if (this.isAmbiguousAwait()) {\n          this.ambiguousScriptDifferentAst = true;\n        } else {\n          this.sawUnambiguousESM = true;\n        }\n      }\n      if (!this.state.soloAwait) {\n        node.argument = this.parseMaybeUnary(null, true);\n      }\n      return this.finishNode(node, \"AwaitExpression\");\n    }\n  }, {\n    key: \"isAmbiguousAwait\",\n    value: function isAmbiguousAwait() {\n      if (this.hasPrecedingLineBreak()) return true;\n      var type = this.state.type;\n      return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 101 && !this.state.containsEsc || type === 135 || type === 56 || this.hasPlugin(\"v8intrinsic\") && type === 54;\n    }\n  }, {\n    key: \"parseYield\",\n    value: function parseYield() {\n      var node = this.startNode();\n      this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, {\n        at: node\n      });\n      this.next();\n      var delegating = false;\n      var argument = null;\n      if (!this.hasPrecedingLineBreak()) {\n        delegating = this.eat(55);\n        switch (this.state.type) {\n          case 13:\n          case 137:\n          case 8:\n          case 11:\n          case 3:\n          case 9:\n          case 14:\n          case 12:\n            if (!delegating) break;\n          default:\n            argument = this.parseMaybeAssign();\n        }\n      }\n      node.delegate = delegating;\n      node.argument = argument;\n      return this.finishNode(node, \"YieldExpression\");\n    }\n  }, {\n    key: \"checkPipelineAtInfixOperator\",\n    value: function checkPipelineAtInfixOperator(left, leftStartLoc) {\n      if (this.hasPlugin([\"pipelineOperator\", {\n        proposal: \"smart\"\n      }])) {\n        if (left.type === \"SequenceExpression\") {\n          this.raise(Errors.PipelineHeadSequenceExpression, {\n            at: leftStartLoc\n          });\n        }\n      }\n    }\n  }, {\n    key: \"parseSmartPipelineBodyInStyle\",\n    value: function parseSmartPipelineBodyInStyle(childExpr, startLoc) {\n      if (this.isSimpleReference(childExpr)) {\n        var bodyNode = this.startNodeAt(startLoc);\n        bodyNode.callee = childExpr;\n        return this.finishNode(bodyNode, \"PipelineBareFunction\");\n      } else {\n        var _bodyNode2 = this.startNodeAt(startLoc);\n        this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n        _bodyNode2.expression = childExpr;\n        return this.finishNode(_bodyNode2, \"PipelineTopicExpression\");\n      }\n    }\n  }, {\n    key: \"isSimpleReference\",\n    value: function isSimpleReference(expression) {\n      switch (expression.type) {\n        case \"MemberExpression\":\n          return !expression.computed && this.isSimpleReference(expression.object);\n        case \"Identifier\":\n          return true;\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"checkSmartPipeTopicBodyEarlyErrors\",\n    value: function checkSmartPipeTopicBodyEarlyErrors(startLoc) {\n      if (this.match(19)) {\n        throw this.raise(Errors.PipelineBodyNoArrow, {\n          at: this.state.startLoc\n        });\n      }\n      if (!this.topicReferenceWasUsedInCurrentContext()) {\n        this.raise(Errors.PipelineTopicUnused, {\n          at: startLoc\n        });\n      }\n    }\n  }, {\n    key: \"withTopicBindingContext\",\n    value: function withTopicBindingContext(callback) {\n      var outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 1,\n        maxTopicIndex: null\n      };\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    }\n  }, {\n    key: \"withSmartMixTopicForbiddingContext\",\n    value: function withSmartMixTopicForbiddingContext(callback) {\n      if (this.hasPlugin([\"pipelineOperator\", {\n        proposal: \"smart\"\n      }])) {\n        var outerContextTopicState = this.state.topicContext;\n        this.state.topicContext = {\n          maxNumOfResolvableTopics: 0,\n          maxTopicIndex: null\n        };\n        try {\n          return callback();\n        } finally {\n          this.state.topicContext = outerContextTopicState;\n        }\n      } else {\n        return callback();\n      }\n    }\n  }, {\n    key: \"withSoloAwaitPermittingContext\",\n    value: function withSoloAwaitPermittingContext(callback) {\n      var outerContextSoloAwaitState = this.state.soloAwait;\n      this.state.soloAwait = true;\n      try {\n        return callback();\n      } finally {\n        this.state.soloAwait = outerContextSoloAwaitState;\n      }\n    }\n  }, {\n    key: \"allowInAnd\",\n    value: function allowInAnd(callback) {\n      var flags = this.prodParam.currentFlags();\n      var prodParamToSet = PARAM_IN & ~flags;\n      if (prodParamToSet) {\n        this.prodParam.enter(flags | PARAM_IN);\n        try {\n          return callback();\n        } finally {\n          this.prodParam.exit();\n        }\n      }\n      return callback();\n    }\n  }, {\n    key: \"disallowInAnd\",\n    value: function disallowInAnd(callback) {\n      var flags = this.prodParam.currentFlags();\n      var prodParamToClear = PARAM_IN & flags;\n      if (prodParamToClear) {\n        this.prodParam.enter(flags & ~PARAM_IN);\n        try {\n          return callback();\n        } finally {\n          this.prodParam.exit();\n        }\n      }\n      return callback();\n    }\n  }, {\n    key: \"registerTopicReference\",\n    value: function registerTopicReference() {\n      this.state.topicContext.maxTopicIndex = 0;\n    }\n  }, {\n    key: \"topicReferenceIsAllowedInCurrentContext\",\n    value: function topicReferenceIsAllowedInCurrentContext() {\n      return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n    }\n  }, {\n    key: \"topicReferenceWasUsedInCurrentContext\",\n    value: function topicReferenceWasUsedInCurrentContext() {\n      return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n    }\n  }, {\n    key: \"parseFSharpPipelineBody\",\n    value: function parseFSharpPipelineBody(prec) {\n      var startLoc = this.state.startLoc;\n      this.state.potentialArrowAt = this.state.start;\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = true;\n      var ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      return ret;\n    }\n  }, {\n    key: \"parseModuleExpression\",\n    value: function parseModuleExpression() {\n      this.expectPlugin(\"moduleBlocks\");\n      var node = this.startNode();\n      this.next();\n      if (!this.match(5)) {\n        this.unexpected(null, 5);\n      }\n      var program = this.startNodeAt(this.state.endLoc);\n      this.next();\n      var revertScopes = this.initializeScopes(true);\n      this.enterInitialScopes();\n      try {\n        node.body = this.parseProgram(program, 8, \"module\");\n      } finally {\n        revertScopes();\n      }\n      return this.finishNode(node, \"ModuleExpression\");\n    }\n  }, {\n    key: \"parsePropertyNamePrefixOperator\",\n    value: function parsePropertyNamePrefixOperator(prop) {}\n  }]);\n  return ExpressionParser;\n}(LValParser);\nvar loopLabel = {\n    kind: \"loop\"\n  },\n  switchLabel = {\n    kind: \"switch\"\n  };\nvar loneSurrogate = /(?:[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/;\nvar keywordRelationalOperator = new RegExp(\"in(?:stanceof)?\", \"y\");\nfunction babel7CompatTokens(tokens, input) {\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n    var type = token.type;\n    if (typeof type === \"number\") {\n      {\n        if (type === 136) {\n          var loc = token.loc,\n            start = token.start,\n            value = token.value,\n            end = token.end;\n          var hashEndPos = start + 1;\n          var hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(i, 1, new Token({\n            type: getExportedToken(27),\n            value: \"#\",\n            start: start,\n            end: hashEndPos,\n            startLoc: loc.start,\n            endLoc: hashEndLoc\n          }), new Token({\n            type: getExportedToken(130),\n            value: value,\n            start: hashEndPos,\n            end: end,\n            startLoc: hashEndLoc,\n            endLoc: loc.end\n          }));\n          i++;\n          continue;\n        }\n        if (tokenIsTemplate(type)) {\n          var _loc = token.loc,\n            _start = token.start,\n            _value = token.value,\n            _end = token.end;\n          var backquoteEnd = _start + 1;\n          var backquoteEndLoc = createPositionWithColumnOffset(_loc.start, 1);\n          var startToken = void 0;\n          if (input.charCodeAt(_start) === 96) {\n            startToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: _start,\n              end: backquoteEnd,\n              startLoc: _loc.start,\n              endLoc: backquoteEndLoc\n            });\n          } else {\n            startToken = new Token({\n              type: getExportedToken(8),\n              value: \"}\",\n              start: _start,\n              end: backquoteEnd,\n              startLoc: _loc.start,\n              endLoc: backquoteEndLoc\n            });\n          }\n          var templateValue = void 0,\n            templateElementEnd = void 0,\n            templateElementEndLoc = void 0,\n            endToken = void 0;\n          if (type === 24) {\n            templateElementEnd = _end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(_loc.end, -1);\n            templateValue = _value === null ? null : _value.slice(1, -1);\n            endToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: templateElementEnd,\n              end: _end,\n              startLoc: templateElementEndLoc,\n              endLoc: _loc.end\n            });\n          } else {\n            templateElementEnd = _end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(_loc.end, -2);\n            templateValue = _value === null ? null : _value.slice(1, -2);\n            endToken = new Token({\n              type: getExportedToken(23),\n              value: \"${\",\n              start: templateElementEnd,\n              end: _end,\n              startLoc: templateElementEndLoc,\n              endLoc: _loc.end\n            });\n          }\n          tokens.splice(i, 1, startToken, new Token({\n            type: getExportedToken(20),\n            value: templateValue,\n            start: backquoteEnd,\n            end: templateElementEnd,\n            startLoc: backquoteEndLoc,\n            endLoc: templateElementEndLoc\n          }), endToken);\n          i += 2;\n          continue;\n        }\n      }\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nvar StatementParser = /*#__PURE__*/function (_ExpressionParser) {\n  _inherits(StatementParser, _ExpressionParser);\n  var _super18 = _createSuper(StatementParser);\n  function StatementParser() {\n    _classCallCheck(this, StatementParser);\n    return _super18.apply(this, arguments);\n  }\n  _createClass(StatementParser, [{\n    key: \"parseTopLevel\",\n    value: function parseTopLevel(file, program) {\n      file.program = this.parseProgram(program);\n      file.comments = this.state.comments;\n      if (this.options.tokens) {\n        file.tokens = babel7CompatTokens(this.tokens, this.input);\n      }\n      return this.finishNode(file, \"File\");\n    }\n  }, {\n    key: \"parseProgram\",\n    value: function parseProgram(program) {\n      var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 137;\n      var sourceType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.options.sourceType;\n      program.sourceType = sourceType;\n      program.interpreter = this.parseInterpreterDirective();\n      this.parseBlockBody(program, true, true, end);\n      if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n        for (var _i6 = 0, _Array$from2 = Array.from(this.scope.undefinedExports); _i6 < _Array$from2.length; _i6++) {\n          var _Array$from2$_i = _slicedToArray(_Array$from2[_i6], 2),\n            localName = _Array$from2$_i[0],\n            at = _Array$from2$_i[1];\n          this.raise(Errors.ModuleExportUndefined, {\n            at: at,\n            localName: localName\n          });\n        }\n      }\n      var finishedProgram;\n      if (end === 137) {\n        finishedProgram = this.finishNode(program, \"Program\");\n      } else {\n        finishedProgram = this.finishNodeAt(program, \"Program\", createPositionWithColumnOffset(this.state.startLoc, -1));\n      }\n      return finishedProgram;\n    }\n  }, {\n    key: \"stmtToDirective\",\n    value: function stmtToDirective(stmt) {\n      var directive = stmt;\n      directive.type = \"Directive\";\n      directive.value = directive.expression;\n      delete directive.expression;\n      var directiveLiteral = directive.value;\n      var expressionValue = directiveLiteral.value;\n      var raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n      var val = directiveLiteral.value = raw.slice(1, -1);\n      this.addExtra(directiveLiteral, \"raw\", raw);\n      this.addExtra(directiveLiteral, \"rawValue\", val);\n      this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n      directiveLiteral.type = \"DirectiveLiteral\";\n      return directive;\n    }\n  }, {\n    key: \"parseInterpreterDirective\",\n    value: function parseInterpreterDirective() {\n      if (!this.match(28)) {\n        return null;\n      }\n      var node = this.startNode();\n      node.value = this.state.value;\n      this.next();\n      return this.finishNode(node, \"InterpreterDirective\");\n    }\n  }, {\n    key: \"isLet\",\n    value: function isLet() {\n      if (!this.isContextual(99)) {\n        return false;\n      }\n      return this.hasFollowingBindingAtom();\n    }\n  }, {\n    key: \"chStartsBindingIdentifier\",\n    value: function chStartsBindingIdentifier(ch, pos) {\n      if (isIdentifierStart(ch)) {\n        keywordRelationalOperator.lastIndex = pos;\n        if (keywordRelationalOperator.test(this.input)) {\n          var endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n          if (!isIdentifierChar(endCh) && endCh !== 92) {\n            return false;\n          }\n        }\n        return true;\n      } else if (ch === 92) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"chStartsBindingPattern\",\n    value: function chStartsBindingPattern(ch) {\n      return ch === 91 || ch === 123;\n    }\n  }, {\n    key: \"hasFollowingBindingAtom\",\n    value: function hasFollowingBindingAtom() {\n      var next = this.nextTokenStart();\n      var nextCh = this.codePointAtPos(next);\n      return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);\n    }\n  }, {\n    key: \"hasInLineFollowingBindingIdentifier\",\n    value: function hasInLineFollowingBindingIdentifier() {\n      var next = this.nextTokenInLineStart();\n      var nextCh = this.codePointAtPos(next);\n      return this.chStartsBindingIdentifier(nextCh, next);\n    }\n  }, {\n    key: \"startsUsingForOf\",\n    value: function startsUsingForOf() {\n      var _this$lookahead = this.lookahead(),\n        type = _this$lookahead.type,\n        containsEsc = _this$lookahead.containsEsc;\n      if (type === 101 && !containsEsc) {\n        return false;\n      } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {\n        this.expectPlugin(\"explicitResourceManagement\");\n        return true;\n      }\n    }\n  }, {\n    key: \"startsAwaitUsing\",\n    value: function startsAwaitUsing() {\n      var next = this.nextTokenInLineStart();\n      if (this.isUnparsedContextual(next, \"using\")) {\n        next = this.nextTokenInLineStartSince(next + 5);\n        var nextCh = this.codePointAtPos(next);\n        if (this.chStartsBindingIdentifier(nextCh, next)) {\n          this.expectPlugin(\"explicitResourceManagement\");\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"parseModuleItem\",\n    value: function parseModuleItem() {\n      return this.parseStatementLike(1 | 2 | 4 | 8);\n    }\n  }, {\n    key: \"parseStatementListItem\",\n    value: function parseStatementListItem() {\n      return this.parseStatementLike(2 | 4 | (!this.options.annexB || this.state.strict ? 0 : 8));\n    }\n  }, {\n    key: \"parseStatementOrSloppyAnnexBFunctionDeclaration\",\n    value: function parseStatementOrSloppyAnnexBFunctionDeclaration() {\n      var allowLabeledFunction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var flags = 0;\n      if (this.options.annexB && !this.state.strict) {\n        flags |= 4;\n        if (allowLabeledFunction) {\n          flags |= 8;\n        }\n      }\n      return this.parseStatementLike(flags);\n    }\n  }, {\n    key: \"parseStatement\",\n    value: function parseStatement() {\n      return this.parseStatementLike(0);\n    }\n  }, {\n    key: \"parseStatementLike\",\n    value: function parseStatementLike(flags) {\n      var decorators = null;\n      if (this.match(26)) {\n        decorators = this.parseDecorators(true);\n      }\n      return this.parseStatementContent(flags, decorators);\n    }\n  }, {\n    key: \"parseStatementContent\",\n    value: function parseStatementContent(flags, decorators) {\n      var starttype = this.state.type;\n      var node = this.startNode();\n      var allowDeclaration = !!(flags & 2);\n      var allowFunctionDeclaration = !!(flags & 4);\n      var topLevel = flags & 1;\n      switch (starttype) {\n        case 60:\n          return this.parseBreakContinueStatement(node, true);\n        case 63:\n          return this.parseBreakContinueStatement(node, false);\n        case 64:\n          return this.parseDebuggerStatement(node);\n        case 90:\n          return this.parseDoWhileStatement(node);\n        case 91:\n          return this.parseForStatement(node);\n        case 68:\n          if (this.lookaheadCharCode() === 46) break;\n          if (!allowFunctionDeclaration) {\n            this.raise(this.state.strict ? Errors.StrictFunction : this.options.annexB ? Errors.SloppyFunctionAnnexB : Errors.SloppyFunction, {\n              at: this.state.startLoc\n            });\n          }\n          return this.parseFunctionStatement(node, false, !allowDeclaration && allowFunctionDeclaration);\n        case 80:\n          if (!allowDeclaration) this.unexpected();\n          return this.parseClass(this.maybeTakeDecorators(decorators, node), true);\n        case 69:\n          return this.parseIfStatement(node);\n        case 70:\n          return this.parseReturnStatement(node);\n        case 71:\n          return this.parseSwitchStatement(node);\n        case 72:\n          return this.parseThrowStatement(node);\n        case 73:\n          return this.parseTryStatement(node);\n        case 96:\n          if (!this.state.containsEsc && this.startsAwaitUsing()) {\n            if (!this.isAwaitAllowed()) {\n              this.raise(Errors.AwaitUsingNotInAsyncContext, {\n                at: node\n              });\n            } else if (!allowDeclaration) {\n              this.raise(Errors.UnexpectedLexicalDeclaration, {\n                at: node\n              });\n            }\n            this.next();\n            return this.parseVarStatement(node, \"await using\");\n          }\n          break;\n        case 105:\n          if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifier()) {\n            break;\n          }\n          this.expectPlugin(\"explicitResourceManagement\");\n          if (!this.scope.inModule && this.scope.inTopLevel) {\n            this.raise(Errors.UnexpectedUsingDeclaration, {\n              at: this.state.startLoc\n            });\n          } else if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, {\n              at: this.state.startLoc\n            });\n          }\n          return this.parseVarStatement(node, \"using\");\n        case 99:\n          {\n            if (this.state.containsEsc) {\n              break;\n            }\n            var next = this.nextTokenStart();\n            var nextCh = this.codePointAtPos(next);\n            if (nextCh !== 91) {\n              if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n              if (!this.chStartsBindingIdentifier(nextCh, next) && nextCh !== 123) {\n                break;\n              }\n            }\n          }\n        case 75:\n          {\n            if (!allowDeclaration) {\n              this.raise(Errors.UnexpectedLexicalDeclaration, {\n                at: this.state.startLoc\n              });\n            }\n          }\n        case 74:\n          {\n            var kind = this.state.value;\n            return this.parseVarStatement(node, kind);\n          }\n        case 92:\n          return this.parseWhileStatement(node);\n        case 76:\n          return this.parseWithStatement(node);\n        case 5:\n          return this.parseBlock();\n        case 13:\n          return this.parseEmptyStatement(node);\n        case 83:\n          {\n            var nextTokenCharCode = this.lookaheadCharCode();\n            if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n              break;\n            }\n          }\n        case 82:\n          {\n            if (!this.options.allowImportExportEverywhere && !topLevel) {\n              this.raise(Errors.UnexpectedImportExport, {\n                at: this.state.startLoc\n              });\n            }\n            this.next();\n            var result;\n            if (starttype === 83) {\n              result = this.parseImport(node);\n              if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n                this.sawUnambiguousESM = true;\n              }\n            } else {\n              result = this.parseExport(node, decorators);\n              if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n                this.sawUnambiguousESM = true;\n              }\n            }\n            this.assertModuleNodeAllowed(result);\n            return result;\n          }\n        default:\n          {\n            if (this.isAsyncFunction()) {\n              if (!allowDeclaration) {\n                this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n                  at: this.state.startLoc\n                });\n              }\n              this.next();\n              return this.parseFunctionStatement(node, true, !allowDeclaration && allowFunctionDeclaration);\n            }\n          }\n      }\n      var maybeName = this.state.value;\n      var expr = this.parseExpression();\n      if (tokenIsIdentifier(starttype) && expr.type === \"Identifier\" && this.eat(14)) {\n        return this.parseLabeledStatement(node, maybeName, expr, flags);\n      } else {\n        return this.parseExpressionStatement(node, expr, decorators);\n      }\n    }\n  }, {\n    key: \"assertModuleNodeAllowed\",\n    value: function assertModuleNodeAllowed(node) {\n      if (!this.options.allowImportExportEverywhere && !this.inModule) {\n        this.raise(Errors.ImportOutsideModule, {\n          at: node\n        });\n      }\n    }\n  }, {\n    key: \"decoratorsEnabledBeforeExport\",\n    value: function decoratorsEnabledBeforeExport() {\n      if (this.hasPlugin(\"decorators-legacy\")) return true;\n      return this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false;\n    }\n  }, {\n    key: \"maybeTakeDecorators\",\n    value: function maybeTakeDecorators(maybeDecorators, classNode, exportNode) {\n      if (maybeDecorators) {\n        if (classNode.decorators && classNode.decorators.length > 0) {\n          var _classNode$decorators;\n          if (typeof this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== \"boolean\") {\n            this.raise(Errors.DecoratorsBeforeAfterExport, {\n              at: classNode.decorators[0]\n            });\n          }\n          (_classNode$decorators = classNode.decorators).unshift.apply(_classNode$decorators, _toConsumableArray(maybeDecorators));\n        } else {\n          classNode.decorators = maybeDecorators;\n        }\n        this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n        if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n      }\n      return classNode;\n    }\n  }, {\n    key: \"canHaveLeadingDecorator\",\n    value: function canHaveLeadingDecorator() {\n      return this.match(80);\n    }\n  }, {\n    key: \"parseDecorators\",\n    value: function parseDecorators(allowExport) {\n      var decorators = [];\n      do {\n        decorators.push(this.parseDecorator());\n      } while (this.match(26));\n      if (this.match(82)) {\n        if (!allowExport) {\n          this.unexpected();\n        }\n        if (!this.decoratorsEnabledBeforeExport()) {\n          this.raise(Errors.DecoratorExportClass, {\n            at: this.state.startLoc\n          });\n        }\n      } else if (!this.canHaveLeadingDecorator()) {\n        throw this.raise(Errors.UnexpectedLeadingDecorator, {\n          at: this.state.startLoc\n        });\n      }\n      return decorators;\n    }\n  }, {\n    key: \"parseDecorator\",\n    value: function parseDecorator() {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      var node = this.startNode();\n      this.next();\n      if (this.hasPlugin(\"decorators\")) {\n        var startLoc = this.state.startLoc;\n        var expr;\n        if (this.match(10)) {\n          var _startLoc3 = this.state.startLoc;\n          this.next();\n          expr = this.parseExpression();\n          this.expect(11);\n          expr = this.wrapParenthesis(_startLoc3, expr);\n          var paramsStartLoc = this.state.startLoc;\n          node.expression = this.parseMaybeDecoratorArguments(expr);\n          if (this.getPluginOption(\"decorators\", \"allowCallParenthesized\") === false && node.expression !== expr) {\n            this.raise(Errors.DecoratorArgumentsOutsideParentheses, {\n              at: paramsStartLoc\n            });\n          }\n        } else {\n          expr = this.parseIdentifier(false);\n          while (this.eat(16)) {\n            var _node11 = this.startNodeAt(startLoc);\n            _node11.object = expr;\n            if (this.match(136)) {\n              this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n              _node11.property = this.parsePrivateName();\n            } else {\n              _node11.property = this.parseIdentifier(true);\n            }\n            _node11.computed = false;\n            expr = this.finishNode(_node11, \"MemberExpression\");\n          }\n          node.expression = this.parseMaybeDecoratorArguments(expr);\n        }\n      } else {\n        node.expression = this.parseExprSubscripts();\n      }\n      return this.finishNode(node, \"Decorator\");\n    }\n  }, {\n    key: \"parseMaybeDecoratorArguments\",\n    value: function parseMaybeDecoratorArguments(expr) {\n      if (this.eat(10)) {\n        var node = this.startNodeAtNode(expr);\n        node.callee = expr;\n        node.arguments = this.parseCallExpressionArguments(11, false);\n        this.toReferencedList(node.arguments);\n        return this.finishNode(node, \"CallExpression\");\n      }\n      return expr;\n    }\n  }, {\n    key: \"parseBreakContinueStatement\",\n    value: function parseBreakContinueStatement(node, isBreak) {\n      this.next();\n      if (this.isLineTerminator()) {\n        node.label = null;\n      } else {\n        node.label = this.parseIdentifier();\n        this.semicolon();\n      }\n      this.verifyBreakContinue(node, isBreak);\n      return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n    }\n  }, {\n    key: \"verifyBreakContinue\",\n    value: function verifyBreakContinue(node, isBreak) {\n      var i;\n      for (i = 0; i < this.state.labels.length; ++i) {\n        var lab = this.state.labels[i];\n        if (node.label == null || lab.name === node.label.name) {\n          if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n          if (node.label && isBreak) break;\n        }\n      }\n      if (i === this.state.labels.length) {\n        var type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n        this.raise(Errors.IllegalBreakContinue, {\n          at: node,\n          type: type\n        });\n      }\n    }\n  }, {\n    key: \"parseDebuggerStatement\",\n    value: function parseDebuggerStatement(node) {\n      this.next();\n      this.semicolon();\n      return this.finishNode(node, \"DebuggerStatement\");\n    }\n  }, {\n    key: \"parseHeaderExpression\",\n    value: function parseHeaderExpression() {\n      this.expect(10);\n      var val = this.parseExpression();\n      this.expect(11);\n      return val;\n    }\n  }, {\n    key: \"parseDoWhileStatement\",\n    value: function parseDoWhileStatement(node) {\n      var _this59 = this;\n      this.next();\n      this.state.labels.push(loopLabel);\n      node.body = this.withSmartMixTopicForbiddingContext(function () {\n        return _this59.parseStatement();\n      });\n      this.state.labels.pop();\n      this.expect(92);\n      node.test = this.parseHeaderExpression();\n      this.eat(13);\n      return this.finishNode(node, \"DoWhileStatement\");\n    }\n  }, {\n    key: \"parseForStatement\",\n    value: function parseForStatement(node) {\n      this.next();\n      this.state.labels.push(loopLabel);\n      var awaitAt = null;\n      if (this.isAwaitAllowed() && this.eatContextual(96)) {\n        awaitAt = this.state.lastTokStartLoc;\n      }\n      this.scope.enter(SCOPE_OTHER);\n      this.expect(10);\n      if (this.match(13)) {\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n        return this.parseFor(node, null);\n      }\n      var startsWithLet = this.isContextual(99);\n      {\n        var startsWithAwaitUsing = this.isContextual(96) && this.startsAwaitUsing();\n        var starsWithUsingDeclaration = startsWithAwaitUsing || this.isContextual(105) && this.startsUsingForOf();\n        var isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || starsWithUsingDeclaration;\n        if (this.match(74) || this.match(75) || isLetOrUsing) {\n          var initNode = this.startNode();\n          var kind;\n          if (startsWithAwaitUsing) {\n            kind = \"await using\";\n            if (!this.isAwaitAllowed()) {\n              this.raise(Errors.AwaitUsingNotInAsyncContext, {\n                at: this.state.startLoc\n              });\n            }\n            this.next();\n          } else {\n            kind = this.state.value;\n          }\n          this.next();\n          this.parseVar(initNode, true, kind);\n          var _init = this.finishNode(initNode, \"VariableDeclaration\");\n          var isForIn = this.match(58);\n          if (isForIn && starsWithUsingDeclaration) {\n            this.raise(Errors.ForInUsing, {\n              at: _init\n            });\n          }\n          if ((isForIn || this.isContextual(101)) && _init.declarations.length === 1) {\n            return this.parseForIn(node, _init, awaitAt);\n          }\n          if (awaitAt !== null) {\n            this.unexpected(awaitAt);\n          }\n          return this.parseFor(node, _init);\n        }\n      }\n      var startsWithAsync = this.isContextual(95);\n      var refExpressionErrors = new ExpressionErrors();\n      var init = this.parseExpression(true, refExpressionErrors);\n      var isForOf = this.isContextual(101);\n      if (isForOf) {\n        if (startsWithLet) {\n          this.raise(Errors.ForOfLet, {\n            at: init\n          });\n        }\n        if (awaitAt === null && startsWithAsync && init.type === \"Identifier\") {\n          this.raise(Errors.ForOfAsync, {\n            at: init\n          });\n        }\n      }\n      if (isForOf || this.match(58)) {\n        this.checkDestructuringPrivate(refExpressionErrors);\n        this.toAssignable(init, true);\n        var type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n        this.checkLVal(init, {\n          in: {\n            type: type\n          }\n        });\n        return this.parseForIn(node, init, awaitAt);\n      } else {\n        this.checkExpressionErrors(refExpressionErrors, true);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n  }, {\n    key: \"parseFunctionStatement\",\n    value: function parseFunctionStatement(node, isAsync, isHangingDeclaration) {\n      this.next();\n      return this.parseFunction(node, 1 | (isHangingDeclaration ? 2 : 0) | (isAsync ? 8 : 0));\n    }\n  }, {\n    key: \"parseIfStatement\",\n    value: function parseIfStatement(node) {\n      this.next();\n      node.test = this.parseHeaderExpression();\n      node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n      node.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null;\n      return this.finishNode(node, \"IfStatement\");\n    }\n  }, {\n    key: \"parseReturnStatement\",\n    value: function parseReturnStatement(node) {\n      if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n        this.raise(Errors.IllegalReturn, {\n          at: this.state.startLoc\n        });\n      }\n      this.next();\n      if (this.isLineTerminator()) {\n        node.argument = null;\n      } else {\n        node.argument = this.parseExpression();\n        this.semicolon();\n      }\n      return this.finishNode(node, \"ReturnStatement\");\n    }\n  }, {\n    key: \"parseSwitchStatement\",\n    value: function parseSwitchStatement(node) {\n      this.next();\n      node.discriminant = this.parseHeaderExpression();\n      var cases = node.cases = [];\n      this.expect(5);\n      this.state.labels.push(switchLabel);\n      this.scope.enter(SCOPE_OTHER);\n      var cur;\n      for (var sawDefault; !this.match(8);) {\n        if (this.match(61) || this.match(65)) {\n          var isCase = this.match(61);\n          if (cur) this.finishNode(cur, \"SwitchCase\");\n          cases.push(cur = this.startNode());\n          cur.consequent = [];\n          this.next();\n          if (isCase) {\n            cur.test = this.parseExpression();\n          } else {\n            if (sawDefault) {\n              this.raise(Errors.MultipleDefaultsInSwitch, {\n                at: this.state.lastTokStartLoc\n              });\n            }\n            sawDefault = true;\n            cur.test = null;\n          }\n          this.expect(14);\n        } else {\n          if (cur) {\n            cur.consequent.push(this.parseStatementListItem());\n          } else {\n            this.unexpected();\n          }\n        }\n      }\n      this.scope.exit();\n      if (cur) this.finishNode(cur, \"SwitchCase\");\n      this.next();\n      this.state.labels.pop();\n      return this.finishNode(node, \"SwitchStatement\");\n    }\n  }, {\n    key: \"parseThrowStatement\",\n    value: function parseThrowStatement(node) {\n      this.next();\n      if (this.hasPrecedingLineBreak()) {\n        this.raise(Errors.NewlineAfterThrow, {\n          at: this.state.lastTokEndLoc\n        });\n      }\n      node.argument = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(node, \"ThrowStatement\");\n    }\n  }, {\n    key: \"parseCatchClauseParam\",\n    value: function parseCatchClauseParam() {\n      var param = this.parseBindingAtom();\n      this.scope.enter(this.options.annexB && param.type === \"Identifier\" ? SCOPE_SIMPLE_CATCH : 0);\n      this.checkLVal(param, {\n        in: {\n          type: \"CatchClause\"\n        },\n        binding: BIND_CATCH_PARAM\n      });\n      return param;\n    }\n  }, {\n    key: \"parseTryStatement\",\n    value: function parseTryStatement(node) {\n      var _this60 = this;\n      this.next();\n      node.block = this.parseBlock();\n      node.handler = null;\n      if (this.match(62)) {\n        var clause = this.startNode();\n        this.next();\n        if (this.match(10)) {\n          this.expect(10);\n          clause.param = this.parseCatchClauseParam();\n          this.expect(11);\n        } else {\n          clause.param = null;\n          this.scope.enter(SCOPE_OTHER);\n        }\n        clause.body = this.withSmartMixTopicForbiddingContext(function () {\n          return _this60.parseBlock(false, false);\n        });\n        this.scope.exit();\n        node.handler = this.finishNode(clause, \"CatchClause\");\n      }\n      node.finalizer = this.eat(67) ? this.parseBlock() : null;\n      if (!node.handler && !node.finalizer) {\n        this.raise(Errors.NoCatchOrFinally, {\n          at: node\n        });\n      }\n      return this.finishNode(node, \"TryStatement\");\n    }\n  }, {\n    key: \"parseVarStatement\",\n    value: function parseVarStatement(node, kind) {\n      var allowMissingInitializer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this.next();\n      this.parseVar(node, false, kind, allowMissingInitializer);\n      this.semicolon();\n      return this.finishNode(node, \"VariableDeclaration\");\n    }\n  }, {\n    key: \"parseWhileStatement\",\n    value: function parseWhileStatement(node) {\n      var _this61 = this;\n      this.next();\n      node.test = this.parseHeaderExpression();\n      this.state.labels.push(loopLabel);\n      node.body = this.withSmartMixTopicForbiddingContext(function () {\n        return _this61.parseStatement();\n      });\n      this.state.labels.pop();\n      return this.finishNode(node, \"WhileStatement\");\n    }\n  }, {\n    key: \"parseWithStatement\",\n    value: function parseWithStatement(node) {\n      var _this62 = this;\n      if (this.state.strict) {\n        this.raise(Errors.StrictWith, {\n          at: this.state.startLoc\n        });\n      }\n      this.next();\n      node.object = this.parseHeaderExpression();\n      node.body = this.withSmartMixTopicForbiddingContext(function () {\n        return _this62.parseStatement();\n      });\n      return this.finishNode(node, \"WithStatement\");\n    }\n  }, {\n    key: \"parseEmptyStatement\",\n    value: function parseEmptyStatement(node) {\n      this.next();\n      return this.finishNode(node, \"EmptyStatement\");\n    }\n  }, {\n    key: \"parseLabeledStatement\",\n    value: function parseLabeledStatement(node, maybeName, expr, flags) {\n      var _iterator13 = _createForOfIteratorHelper(this.state.labels),\n        _step13;\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var _label = _step13.value;\n          if (_label.name === maybeName) {\n            this.raise(Errors.LabelRedeclaration, {\n              at: expr,\n              labelName: maybeName\n            });\n          }\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n      var kind = tokenIsLoop(this.state.type) ? \"loop\" : this.match(71) ? \"switch\" : null;\n      for (var i = this.state.labels.length - 1; i >= 0; i--) {\n        var label = this.state.labels[i];\n        if (label.statementStart === node.start) {\n          label.statementStart = this.state.start;\n          label.kind = kind;\n        } else {\n          break;\n        }\n      }\n      this.state.labels.push({\n        name: maybeName,\n        kind: kind,\n        statementStart: this.state.start\n      });\n      node.body = flags & 8 ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true) : this.parseStatement();\n      this.state.labels.pop();\n      node.label = expr;\n      return this.finishNode(node, \"LabeledStatement\");\n    }\n  }, {\n    key: \"parseExpressionStatement\",\n    value: function parseExpressionStatement(node, expr, decorators) {\n      node.expression = expr;\n      this.semicolon();\n      return this.finishNode(node, \"ExpressionStatement\");\n    }\n  }, {\n    key: \"parseBlock\",\n    value: function parseBlock() {\n      var allowDirectives = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var createNewLexicalScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var afterBlockParse = arguments.length > 2 ? arguments[2] : undefined;\n      var node = this.startNode();\n      if (allowDirectives) {\n        this.state.strictErrors.clear();\n      }\n      this.expect(5);\n      if (createNewLexicalScope) {\n        this.scope.enter(SCOPE_OTHER);\n      }\n      this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);\n      if (createNewLexicalScope) {\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"BlockStatement\");\n    }\n  }, {\n    key: \"isValidDirective\",\n    value: function isValidDirective(stmt) {\n      return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n    }\n  }, {\n    key: \"parseBlockBody\",\n    value: function parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n      var body = node.body = [];\n      var directives = node.directives = [];\n      this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n    }\n  }, {\n    key: \"parseBlockOrModuleBlockBody\",\n    value: function parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n      var oldStrict = this.state.strict;\n      var hasStrictModeDirective = false;\n      var parsedNonDirective = false;\n      while (!this.match(end)) {\n        var stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();\n        if (directives && !parsedNonDirective) {\n          if (this.isValidDirective(stmt)) {\n            var directive = this.stmtToDirective(stmt);\n            directives.push(directive);\n            if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n              hasStrictModeDirective = true;\n              this.setStrict(true);\n            }\n            continue;\n          }\n          parsedNonDirective = true;\n          this.state.strictErrors.clear();\n        }\n        body.push(stmt);\n      }\n      afterBlockParse == null ? void 0 : afterBlockParse.call(this, hasStrictModeDirective);\n      if (!oldStrict) {\n        this.setStrict(false);\n      }\n      this.next();\n    }\n  }, {\n    key: \"parseFor\",\n    value: function parseFor(node, init) {\n      var _this63 = this;\n      node.init = init;\n      this.semicolon(false);\n      node.test = this.match(13) ? null : this.parseExpression();\n      this.semicolon(false);\n      node.update = this.match(11) ? null : this.parseExpression();\n      this.expect(11);\n      node.body = this.withSmartMixTopicForbiddingContext(function () {\n        return _this63.parseStatement();\n      });\n      this.scope.exit();\n      this.state.labels.pop();\n      return this.finishNode(node, \"ForStatement\");\n    }\n  }, {\n    key: \"parseForIn\",\n    value: function parseForIn(node, init, awaitAt) {\n      var _this64 = this;\n      var isForIn = this.match(58);\n      this.next();\n      if (isForIn) {\n        if (awaitAt !== null) this.unexpected(awaitAt);\n      } else {\n        node.await = awaitAt !== null;\n      }\n      if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || !this.options.annexB || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n        this.raise(Errors.ForInOfLoopInitializer, {\n          at: init,\n          type: isForIn ? \"ForInStatement\" : \"ForOfStatement\"\n        });\n      }\n      if (init.type === \"AssignmentPattern\") {\n        this.raise(Errors.InvalidLhs, {\n          at: init,\n          ancestor: {\n            type: \"ForStatement\"\n          }\n        });\n      }\n      node.left = init;\n      node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n      this.expect(11);\n      node.body = this.withSmartMixTopicForbiddingContext(function () {\n        return _this64.parseStatement();\n      });\n      this.scope.exit();\n      this.state.labels.pop();\n      return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n    }\n  }, {\n    key: \"parseVar\",\n    value: function parseVar(node, isFor, kind) {\n      var allowMissingInitializer = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var declarations = node.declarations = [];\n      node.kind = kind;\n      for (;;) {\n        var decl = this.startNode();\n        this.parseVarId(decl, kind);\n        decl.init = !this.eat(29) ? null : isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n        if (decl.init === null && !allowMissingInitializer) {\n          if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(58) || this.isContextual(101)))) {\n            this.raise(Errors.DeclarationMissingInitializer, {\n              at: this.state.lastTokEndLoc,\n              kind: \"destructuring\"\n            });\n          } else if (kind === \"const\" && !(this.match(58) || this.isContextual(101))) {\n            this.raise(Errors.DeclarationMissingInitializer, {\n              at: this.state.lastTokEndLoc,\n              kind: \"const\"\n            });\n          }\n        }\n        declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n        if (!this.eat(12)) break;\n      }\n      return node;\n    }\n  }, {\n    key: \"parseVarId\",\n    value: function parseVarId(decl, kind) {\n      var id = this.parseBindingAtom();\n      this.checkLVal(id, {\n        in: {\n          type: \"VariableDeclarator\"\n        },\n        binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL\n      });\n      decl.id = id;\n    }\n  }, {\n    key: \"parseAsyncFunctionExpression\",\n    value: function parseAsyncFunctionExpression(node) {\n      return this.parseFunction(node, 8);\n    }\n  }, {\n    key: \"parseFunction\",\n    value: function parseFunction(node) {\n      var _this65 = this;\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var hangingDeclaration = flags & 2;\n      var isDeclaration = !!(flags & 1);\n      var requireId = isDeclaration && !(flags & 4);\n      var isAsync = !!(flags & 8);\n      this.initFunction(node, isAsync);\n      if (this.match(55)) {\n        if (hangingDeclaration) {\n          this.raise(Errors.GeneratorInSingleStatementContext, {\n            at: this.state.startLoc\n          });\n        }\n        this.next();\n        node.generator = true;\n      }\n      if (isDeclaration) {\n        node.id = this.parseFunctionId(requireId);\n      }\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = false;\n      this.scope.enter(SCOPE_FUNCTION);\n      this.prodParam.enter(functionFlags(isAsync, node.generator));\n      if (!isDeclaration) {\n        node.id = this.parseFunctionId();\n      }\n      this.parseFunctionParams(node, false);\n      this.withSmartMixTopicForbiddingContext(function () {\n        _this65.parseFunctionBodyAndFinish(node, isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\");\n      });\n      this.prodParam.exit();\n      this.scope.exit();\n      if (isDeclaration && !hangingDeclaration) {\n        this.registerFunctionStatementId(node);\n      }\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      return node;\n    }\n  }, {\n    key: \"parseFunctionId\",\n    value: function parseFunctionId(requireId) {\n      return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;\n    }\n  }, {\n    key: \"parseFunctionParams\",\n    value: function parseFunctionParams(node, isConstructor) {\n      this.expect(10);\n      this.expressionScope.enter(newParameterDeclarationScope());\n      node.params = this.parseBindingList(11, 41, 2 | (isConstructor ? 4 : 0));\n      this.expressionScope.exit();\n    }\n  }, {\n    key: \"registerFunctionStatementId\",\n    value: function registerFunctionStatementId(node) {\n      if (!node.id) return;\n      this.scope.declareName(node.id.name, !this.options.annexB || this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.loc.start);\n    }\n  }, {\n    key: \"parseClass\",\n    value: function parseClass(node, isStatement, optionalId) {\n      this.next();\n      var oldStrict = this.state.strict;\n      this.state.strict = true;\n      this.parseClassId(node, isStatement, optionalId);\n      this.parseClassSuper(node);\n      node.body = this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n    }\n  }, {\n    key: \"isClassProperty\",\n    value: function isClassProperty() {\n      return this.match(29) || this.match(13) || this.match(8);\n    }\n  }, {\n    key: \"isClassMethod\",\n    value: function isClassMethod() {\n      return this.match(10);\n    }\n  }, {\n    key: \"isNonstaticConstructor\",\n    value: function isNonstaticConstructor(method) {\n      return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n    }\n  }, {\n    key: \"parseClassBody\",\n    value: function parseClassBody(hadSuperClass, oldStrict) {\n      var _this66 = this;\n      this.classScope.enter();\n      var state = {\n        hadConstructor: false,\n        hadSuperClass: hadSuperClass\n      };\n      var decorators = [];\n      var classBody = this.startNode();\n      classBody.body = [];\n      this.expect(5);\n      this.withSmartMixTopicForbiddingContext(function () {\n        while (!_this66.match(8)) {\n          if (_this66.eat(13)) {\n            if (decorators.length > 0) {\n              throw _this66.raise(Errors.DecoratorSemicolon, {\n                at: _this66.state.lastTokEndLoc\n              });\n            }\n            continue;\n          }\n          if (_this66.match(26)) {\n            decorators.push(_this66.parseDecorator());\n            continue;\n          }\n          var member = _this66.startNode();\n          if (decorators.length) {\n            member.decorators = decorators;\n            _this66.resetStartLocationFromNode(member, decorators[0]);\n            decorators = [];\n          }\n          _this66.parseClassMember(classBody, member, state);\n          if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n            _this66.raise(Errors.DecoratorConstructor, {\n              at: member\n            });\n          }\n        }\n      });\n      this.state.strict = oldStrict;\n      this.next();\n      if (decorators.length) {\n        throw this.raise(Errors.TrailingDecorator, {\n          at: this.state.startLoc\n        });\n      }\n      this.classScope.exit();\n      return this.finishNode(classBody, \"ClassBody\");\n    }\n  }, {\n    key: \"parseClassMemberFromModifier\",\n    value: function parseClassMemberFromModifier(classBody, member) {\n      var key = this.parseIdentifier(true);\n      if (this.isClassMethod()) {\n        var method = member;\n        method.kind = \"method\";\n        method.computed = false;\n        method.key = key;\n        method.static = false;\n        this.pushClassMethod(classBody, method, false, false, false, false);\n        return true;\n      } else if (this.isClassProperty()) {\n        var prop = member;\n        prop.computed = false;\n        prop.key = key;\n        prop.static = false;\n        classBody.body.push(this.parseClassProperty(prop));\n        return true;\n      }\n      this.resetPreviousNodeTrailingComments(key);\n      return false;\n    }\n  }, {\n    key: \"parseClassMember\",\n    value: function parseClassMember(classBody, member, state) {\n      var isStatic = this.isContextual(104);\n      if (isStatic) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          return;\n        }\n        if (this.eat(5)) {\n          this.parseClassStaticBlock(classBody, member);\n          return;\n        }\n      }\n      this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n  }, {\n    key: \"parseClassMemberWithIsStatic\",\n    value: function parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n      var publicMethod = member;\n      var privateMethod = member;\n      var publicProp = member;\n      var privateProp = member;\n      var accessorProp = member;\n      var method = publicMethod;\n      var publicMember = publicMethod;\n      member.static = isStatic;\n      this.parsePropertyNamePrefixOperator(member);\n      if (this.eat(55)) {\n        method.kind = \"method\";\n        var isPrivateName = this.match(136);\n        this.parseClassElementName(method);\n        if (isPrivateName) {\n          this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n          return;\n        }\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsGenerator, {\n            at: publicMethod.key\n          });\n        }\n        this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n        return;\n      }\n      var isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n      var isPrivate = this.match(136);\n      var key = this.parseClassElementName(member);\n      var maybeQuestionTokenStartLoc = this.state.startLoc;\n      this.parsePostMemberNameModifiers(publicMember);\n      if (this.isClassMethod()) {\n        method.kind = \"method\";\n        if (isPrivate) {\n          this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n          return;\n        }\n        var isConstructor = this.isNonstaticConstructor(publicMethod);\n        var allowsDirectSuper = false;\n        if (isConstructor) {\n          publicMethod.kind = \"constructor\";\n          if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n            this.raise(Errors.DuplicateConstructor, {\n              at: key\n            });\n          }\n          if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n            this.raise(Errors.OverrideOnConstructor, {\n              at: key\n            });\n          }\n          state.hadConstructor = true;\n          allowsDirectSuper = state.hadSuperClass;\n        }\n        this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n      } else if (this.isClassProperty()) {\n        if (isPrivate) {\n          this.pushClassPrivateProperty(classBody, privateProp);\n        } else {\n          this.pushClassProperty(classBody, publicProp);\n        }\n      } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n        this.resetPreviousNodeTrailingComments(key);\n        var isGenerator = this.eat(55);\n        if (publicMember.optional) {\n          this.unexpected(maybeQuestionTokenStartLoc);\n        }\n        method.kind = \"method\";\n        var _isPrivate = this.match(136);\n        this.parseClassElementName(method);\n        this.parsePostMemberNameModifiers(publicMember);\n        if (_isPrivate) {\n          this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n        } else {\n          if (this.isNonstaticConstructor(publicMethod)) {\n            this.raise(Errors.ConstructorIsAsync, {\n              at: publicMethod.key\n            });\n          }\n          this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n        }\n      } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(55) && this.isLineTerminator())) {\n        this.resetPreviousNodeTrailingComments(key);\n        method.kind = key.name;\n        var _isPrivate2 = this.match(136);\n        this.parseClassElementName(publicMethod);\n        if (_isPrivate2) {\n          this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        } else {\n          if (this.isNonstaticConstructor(publicMethod)) {\n            this.raise(Errors.ConstructorIsAccessor, {\n              at: publicMethod.key\n            });\n          }\n          this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n        }\n        this.checkGetterSetterParams(publicMethod);\n      } else if (isContextual && key.name === \"accessor\" && !this.isLineTerminator()) {\n        this.expectPlugin(\"decoratorAutoAccessors\");\n        this.resetPreviousNodeTrailingComments(key);\n        var _isPrivate3 = this.match(136);\n        this.parseClassElementName(publicProp);\n        this.pushClassAccessorProperty(classBody, accessorProp, _isPrivate3);\n      } else if (this.isLineTerminator()) {\n        if (isPrivate) {\n          this.pushClassPrivateProperty(classBody, privateProp);\n        } else {\n          this.pushClassProperty(classBody, publicProp);\n        }\n      } else {\n        this.unexpected();\n      }\n    }\n  }, {\n    key: \"parseClassElementName\",\n    value: function parseClassElementName(member) {\n      var _this$state6 = this.state,\n        type = _this$state6.type,\n        value = _this$state6.value;\n      if ((type === 130 || type === 131) && member.static && value === \"prototype\") {\n        this.raise(Errors.StaticPrototype, {\n          at: this.state.startLoc\n        });\n      }\n      if (type === 136) {\n        if (value === \"constructor\") {\n          this.raise(Errors.ConstructorClassPrivateField, {\n            at: this.state.startLoc\n          });\n        }\n        var key = this.parsePrivateName();\n        member.key = key;\n        return key;\n      }\n      return this.parsePropertyName(member);\n    }\n  }, {\n    key: \"parseClassStaticBlock\",\n    value: function parseClassStaticBlock(classBody, member) {\n      var _member$decorators;\n      this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n      var oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(PARAM);\n      var body = member.body = [];\n      this.parseBlockOrModuleBlockBody(body, undefined, false, 8);\n      this.prodParam.exit();\n      this.scope.exit();\n      this.state.labels = oldLabels;\n      classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n      if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n        this.raise(Errors.DecoratorStaticBlock, {\n          at: member\n        });\n      }\n    }\n  }, {\n    key: \"pushClassProperty\",\n    value: function pushClassProperty(classBody, prop) {\n      if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n        this.raise(Errors.ConstructorClassField, {\n          at: prop.key\n        });\n      }\n      classBody.body.push(this.parseClassProperty(prop));\n    }\n  }, {\n    key: \"pushClassPrivateProperty\",\n    value: function pushClassPrivateProperty(classBody, prop) {\n      var node = this.parseClassPrivateProperty(prop);\n      classBody.body.push(node);\n      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);\n    }\n  }, {\n    key: \"pushClassAccessorProperty\",\n    value: function pushClassAccessorProperty(classBody, prop, isPrivate) {\n      if (!isPrivate && !prop.computed) {\n        var key = prop.key;\n        if (key.name === \"constructor\" || key.value === \"constructor\") {\n          this.raise(Errors.ConstructorClassField, {\n            at: key\n          });\n        }\n      }\n      var node = this.parseClassAccessorProperty(prop);\n      classBody.body.push(node);\n      if (isPrivate) {\n        this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);\n      }\n    }\n  }, {\n    key: \"pushClassMethod\",\n    value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n      classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n    }\n  }, {\n    key: \"pushClassPrivateMethod\",\n    value: function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n      var node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n      classBody.body.push(node);\n      var kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n      this.declareClassPrivateMethodInScope(node, kind);\n    }\n  }, {\n    key: \"declareClassPrivateMethodInScope\",\n    value: function declareClassPrivateMethodInScope(node, kind) {\n      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);\n    }\n  }, {\n    key: \"parsePostMemberNameModifiers\",\n    value: function parsePostMemberNameModifiers(methodOrProp) {}\n  }, {\n    key: \"parseClassPrivateProperty\",\n    value: function parseClassPrivateProperty(node) {\n      this.parseInitializer(node);\n      this.semicolon();\n      return this.finishNode(node, \"ClassPrivateProperty\");\n    }\n  }, {\n    key: \"parseClassProperty\",\n    value: function parseClassProperty(node) {\n      this.parseInitializer(node);\n      this.semicolon();\n      return this.finishNode(node, \"ClassProperty\");\n    }\n  }, {\n    key: \"parseClassAccessorProperty\",\n    value: function parseClassAccessorProperty(node) {\n      this.parseInitializer(node);\n      this.semicolon();\n      return this.finishNode(node, \"ClassAccessorProperty\");\n    }\n  }, {\n    key: \"parseInitializer\",\n    value: function parseInitializer(node) {\n      this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n      this.expressionScope.enter(newExpressionScope());\n      this.prodParam.enter(PARAM);\n      node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;\n      this.expressionScope.exit();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n  }, {\n    key: \"parseClassId\",\n    value: function parseClassId(node, isStatement, optionalId) {\n      var bindingType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BIND_CLASS;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        if (isStatement) {\n          this.declareNameFromIdentifier(node.id, bindingType);\n        }\n      } else {\n        if (optionalId || !isStatement) {\n          node.id = null;\n        } else {\n          throw this.raise(Errors.MissingClassName, {\n            at: this.state.startLoc\n          });\n        }\n      }\n    }\n  }, {\n    key: \"parseClassSuper\",\n    value: function parseClassSuper(node) {\n      node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;\n    }\n  }, {\n    key: \"parseExport\",\n    value: function parseExport(node, decorators) {\n      var maybeDefaultIdentifier = this.parseMaybeImportPhase(node, true);\n      var hasDefault = this.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);\n      var parseAfterDefault = !hasDefault || this.eat(12);\n      var hasStar = parseAfterDefault && this.eatExportStar(node);\n      var hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n      var parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));\n      var isFromRequired = hasDefault || hasStar;\n      if (hasStar && !hasNamespace) {\n        if (hasDefault) this.unexpected();\n        if (decorators) {\n          throw this.raise(Errors.UnsupportedDecoratorExport, {\n            at: node\n          });\n        }\n        this.parseExportFrom(node, true);\n        return this.finishNode(node, \"ExportAllDeclaration\");\n      }\n      var hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n      if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n        this.unexpected(null, 5);\n      }\n      if (hasNamespace && parseAfterNamespace) {\n        this.unexpected(null, 97);\n      }\n      var hasDeclaration;\n      if (isFromRequired || hasSpecifiers) {\n        hasDeclaration = false;\n        if (decorators) {\n          throw this.raise(Errors.UnsupportedDecoratorExport, {\n            at: node\n          });\n        }\n        this.parseExportFrom(node, isFromRequired);\n      } else {\n        hasDeclaration = this.maybeParseExportDeclaration(node);\n      }\n      if (isFromRequired || hasSpecifiers || hasDeclaration) {\n        var _node2$declaration;\n        var node2 = node;\n        this.checkExport(node2, true, false, !!node2.source);\n        if (((_node2$declaration = node2.declaration) == null ? void 0 : _node2$declaration.type) === \"ClassDeclaration\") {\n          this.maybeTakeDecorators(decorators, node2.declaration, node2);\n        } else if (decorators) {\n          throw this.raise(Errors.UnsupportedDecoratorExport, {\n            at: node\n          });\n        }\n        return this.finishNode(node2, \"ExportNamedDeclaration\");\n      }\n      if (this.eat(65)) {\n        var _node12 = node;\n        var decl = this.parseExportDefaultExpression();\n        _node12.declaration = decl;\n        if (decl.type === \"ClassDeclaration\") {\n          this.maybeTakeDecorators(decorators, decl, _node12);\n        } else if (decorators) {\n          throw this.raise(Errors.UnsupportedDecoratorExport, {\n            at: node\n          });\n        }\n        this.checkExport(_node12, true, true);\n        return this.finishNode(_node12, \"ExportDefaultDeclaration\");\n      }\n      this.unexpected(null, 5);\n    }\n  }, {\n    key: \"eatExportStar\",\n    value: function eatExportStar(node) {\n      return this.eat(55);\n    }\n  }, {\n    key: \"maybeParseExportDefaultSpecifier\",\n    value: function maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {\n      if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {\n        this.expectPlugin(\"exportDefaultFrom\", maybeDefaultIdentifier == null ? void 0 : maybeDefaultIdentifier.loc.start);\n        var id = maybeDefaultIdentifier || this.parseIdentifier(true);\n        var specifier = this.startNodeAtNode(id);\n        specifier.exported = id;\n        node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"maybeParseExportNamespaceSpecifier\",\n    value: function maybeParseExportNamespaceSpecifier(node) {\n      if (this.isContextual(93)) {\n        if (!node.specifiers) node.specifiers = [];\n        var specifier = this.startNodeAt(this.state.lastTokStartLoc);\n        this.next();\n        specifier.exported = this.parseModuleExportName();\n        node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"maybeParseExportNamedSpecifiers\",\n    value: function maybeParseExportNamedSpecifiers(node) {\n      if (this.match(5)) {\n        var _node$specifiers2;\n        if (!node.specifiers) node.specifiers = [];\n        var isTypeExport = node.exportKind === \"type\";\n        (_node$specifiers2 = node.specifiers).push.apply(_node$specifiers2, _toConsumableArray(this.parseExportSpecifiers(isTypeExport)));\n        node.source = null;\n        node.declaration = null;\n        if (this.hasPlugin(\"importAssertions\")) {\n          node.assertions = [];\n        }\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"maybeParseExportDeclaration\",\n    value: function maybeParseExportDeclaration(node) {\n      if (this.shouldParseExportDeclaration()) {\n        node.specifiers = [];\n        node.source = null;\n        if (this.hasPlugin(\"importAssertions\")) {\n          node.assertions = [];\n        }\n        node.declaration = this.parseExportDeclaration(node);\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"isAsyncFunction\",\n    value: function isAsyncFunction() {\n      if (!this.isContextual(95)) return false;\n      var next = this.nextTokenInLineStart();\n      return this.isUnparsedContextual(next, \"function\");\n    }\n  }, {\n    key: \"parseExportDefaultExpression\",\n    value: function parseExportDefaultExpression() {\n      var expr = this.startNode();\n      if (this.match(68)) {\n        this.next();\n        return this.parseFunction(expr, 1 | 4);\n      } else if (this.isAsyncFunction()) {\n        this.next();\n        this.next();\n        return this.parseFunction(expr, 1 | 4 | 8);\n      }\n      if (this.match(80)) {\n        return this.parseClass(expr, true, true);\n      }\n      if (this.match(26)) {\n        if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true) {\n          this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc\n          });\n        }\n        return this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);\n      }\n      if (this.match(75) || this.match(74) || this.isLet()) {\n        throw this.raise(Errors.UnsupportedDefaultExport, {\n          at: this.state.startLoc\n        });\n      }\n      var res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }, {\n    key: \"parseExportDeclaration\",\n    value: function parseExportDeclaration(node) {\n      if (this.match(80)) {\n        var _node13 = this.parseClass(this.startNode(), true, false);\n        return _node13;\n      }\n      return this.parseStatementListItem();\n    }\n  }, {\n    key: \"isExportDefaultSpecifier\",\n    value: function isExportDefaultSpecifier() {\n      var type = this.state.type;\n      if (tokenIsIdentifier(type)) {\n        if (type === 95 && !this.state.containsEsc || type === 99) {\n          return false;\n        }\n        if ((type === 128 || type === 127) && !this.state.containsEsc) {\n          var _this$lookahead2 = this.lookahead(),\n            nextType = _this$lookahead2.type;\n          if (tokenIsIdentifier(nextType) && nextType !== 97 || nextType === 5) {\n            this.expectOnePlugin([\"flow\", \"typescript\"]);\n            return false;\n          }\n        }\n      } else if (!this.match(65)) {\n        return false;\n      }\n      var next = this.nextTokenStart();\n      var hasFrom = this.isUnparsedContextual(next, \"from\");\n      if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {\n        return true;\n      }\n      if (this.match(65) && hasFrom) {\n        var nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n        return nextAfterFrom === 34 || nextAfterFrom === 39;\n      }\n      return false;\n    }\n  }, {\n    key: \"parseExportFrom\",\n    value: function parseExportFrom(node, expect) {\n      if (this.eatContextual(97)) {\n        node.source = this.parseImportSource();\n        this.checkExport(node);\n        this.maybeParseImportAttributes(node);\n        this.checkJSONModuleImport(node);\n      } else if (expect) {\n        this.unexpected();\n      }\n      this.semicolon();\n    }\n  }, {\n    key: \"shouldParseExportDeclaration\",\n    value: function shouldParseExportDeclaration() {\n      var type = this.state.type;\n      if (type === 26) {\n        this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n        if (this.hasPlugin(\"decorators\")) {\n          if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true) {\n            this.raise(Errors.DecoratorBeforeExport, {\n              at: this.state.startLoc\n            });\n          }\n          return true;\n        }\n      }\n      return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();\n    }\n  }, {\n    key: \"checkExport\",\n    value: function checkExport(node, checkNames, isDefault, isFrom) {\n      if (checkNames) {\n        if (isDefault) {\n          this.checkDuplicateExports(node, \"default\");\n          if (this.hasPlugin(\"exportDefaultFrom\")) {\n            var _declaration$extra;\n            var declaration = node.declaration;\n            if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n              this.raise(Errors.ExportDefaultFromAsIdentifier, {\n                at: declaration\n              });\n            }\n          }\n        } else if (node.specifiers && node.specifiers.length) {\n          var _iterator14 = _createForOfIteratorHelper(node.specifiers),\n            _step14;\n          try {\n            for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n              var specifier = _step14.value;\n              var exported = specifier.exported;\n              var exportName = exported.type === \"Identifier\" ? exported.name : exported.value;\n              this.checkDuplicateExports(specifier, exportName);\n              if (!isFrom && specifier.local) {\n                var local = specifier.local;\n                if (local.type !== \"Identifier\") {\n                  this.raise(Errors.ExportBindingIsString, {\n                    at: specifier,\n                    localName: local.value,\n                    exportName: exportName\n                  });\n                } else {\n                  this.checkReservedWord(local.name, local.loc.start, true, false);\n                  this.scope.checkLocalExport(local);\n                }\n              }\n            }\n          } catch (err) {\n            _iterator14.e(err);\n          } finally {\n            _iterator14.f();\n          }\n        } else if (node.declaration) {\n          if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n            var id = node.declaration.id;\n            if (!id) throw new Error(\"Assertion failure\");\n            this.checkDuplicateExports(node, id.name);\n          } else if (node.declaration.type === \"VariableDeclaration\") {\n            var _iterator15 = _createForOfIteratorHelper(node.declaration.declarations),\n              _step15;\n            try {\n              for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n                var _declaration = _step15.value;\n                this.checkDeclaration(_declaration.id);\n              }\n            } catch (err) {\n              _iterator15.e(err);\n            } finally {\n              _iterator15.f();\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"checkDeclaration\",\n    value: function checkDeclaration(node) {\n      if (node.type === \"Identifier\") {\n        this.checkDuplicateExports(node, node.name);\n      } else if (node.type === \"ObjectPattern\") {\n        var _iterator16 = _createForOfIteratorHelper(node.properties),\n          _step16;\n        try {\n          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n            var prop = _step16.value;\n            this.checkDeclaration(prop);\n          }\n        } catch (err) {\n          _iterator16.e(err);\n        } finally {\n          _iterator16.f();\n        }\n      } else if (node.type === \"ArrayPattern\") {\n        var _iterator17 = _createForOfIteratorHelper(node.elements),\n          _step17;\n        try {\n          for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n            var elem = _step17.value;\n            if (elem) {\n              this.checkDeclaration(elem);\n            }\n          }\n        } catch (err) {\n          _iterator17.e(err);\n        } finally {\n          _iterator17.f();\n        }\n      } else if (node.type === \"ObjectProperty\") {\n        this.checkDeclaration(node.value);\n      } else if (node.type === \"RestElement\") {\n        this.checkDeclaration(node.argument);\n      } else if (node.type === \"AssignmentPattern\") {\n        this.checkDeclaration(node.left);\n      }\n    }\n  }, {\n    key: \"checkDuplicateExports\",\n    value: function checkDuplicateExports(node, exportName) {\n      if (this.exportedIdentifiers.has(exportName)) {\n        if (exportName === \"default\") {\n          this.raise(Errors.DuplicateDefaultExport, {\n            at: node\n          });\n        } else {\n          this.raise(Errors.DuplicateExport, {\n            at: node,\n            exportName: exportName\n          });\n        }\n      }\n      this.exportedIdentifiers.add(exportName);\n    }\n  }, {\n    key: \"parseExportSpecifiers\",\n    value: function parseExportSpecifiers(isInTypeExport) {\n      var nodes = [];\n      var first = true;\n      this.expect(5);\n      while (!this.eat(8)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(12);\n          if (this.eat(8)) break;\n        }\n        var isMaybeTypeOnly = this.isContextual(128);\n        var isString = this.match(131);\n        var node = this.startNode();\n        node.local = this.parseModuleExportName();\n        nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));\n      }\n      return nodes;\n    }\n  }, {\n    key: \"parseExportSpecifier\",\n    value: function parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n      if (this.eatContextual(93)) {\n        node.exported = this.parseModuleExportName();\n      } else if (isString) {\n        node.exported = cloneStringLiteral(node.local);\n      } else if (!node.exported) {\n        node.exported = cloneIdentifier(node.local);\n      }\n      return this.finishNode(node, \"ExportSpecifier\");\n    }\n  }, {\n    key: \"parseModuleExportName\",\n    value: function parseModuleExportName() {\n      if (this.match(131)) {\n        var result = this.parseStringLiteral(this.state.value);\n        var surrogate = result.value.match(loneSurrogate);\n        if (surrogate) {\n          this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n            at: result,\n            surrogateCharCode: surrogate[0].charCodeAt(0)\n          });\n        }\n        return result;\n      }\n      return this.parseIdentifier(true);\n    }\n  }, {\n    key: \"isJSONModuleImport\",\n    value: function isJSONModuleImport(node) {\n      if (node.assertions != null) {\n        return node.assertions.some(function (_ref98) {\n          var key = _ref98.key,\n            value = _ref98.value;\n          return value.value === \"json\" && (key.type === \"Identifier\" ? key.name === \"type\" : key.value === \"type\");\n        });\n      }\n      return false;\n    }\n  }, {\n    key: \"checkImportReflection\",\n    value: function checkImportReflection(node) {\n      if (node.module) {\n        var _node$assertions;\n        if (node.specifiers.length !== 1 || node.specifiers[0].type !== \"ImportDefaultSpecifier\") {\n          this.raise(Errors.ImportReflectionNotBinding, {\n            at: node.specifiers[0].loc.start\n          });\n        }\n        if (((_node$assertions = node.assertions) == null ? void 0 : _node$assertions.length) > 0) {\n          this.raise(Errors.ImportReflectionHasAssertion, {\n            at: node.specifiers[0].loc.start\n          });\n        }\n      }\n    }\n  }, {\n    key: \"checkJSONModuleImport\",\n    value: function checkJSONModuleImport(node) {\n      if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n        var specifiers = node.specifiers;\n        if (specifiers != null) {\n          var nonDefaultNamedSpecifier = specifiers.find(function (specifier) {\n            var imported;\n            if (specifier.type === \"ExportSpecifier\") {\n              imported = specifier.local;\n            } else if (specifier.type === \"ImportSpecifier\") {\n              imported = specifier.imported;\n            }\n            if (imported !== undefined) {\n              return imported.type === \"Identifier\" ? imported.name !== \"default\" : imported.value !== \"default\";\n            }\n          });\n          if (nonDefaultNamedSpecifier !== undefined) {\n            this.raise(Errors.ImportJSONBindingNotDefault, {\n              at: nonDefaultNamedSpecifier.loc.start\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"isPotentialImportPhase\",\n    value: function isPotentialImportPhase(isExport) {\n      return !isExport && this.isContextual(125);\n    }\n  }, {\n    key: \"applyImportPhase\",\n    value: function applyImportPhase(node, isExport, phase, loc) {\n      if (isExport) {\n        return;\n      }\n      if (phase === \"module\") {\n        this.expectPlugin(\"importReflection\", loc);\n        node.module = true;\n      } else if (this.hasPlugin(\"importReflection\")) {\n        node.module = false;\n      }\n    }\n  }, {\n    key: \"parseMaybeImportPhase\",\n    value: function parseMaybeImportPhase(node, isExport) {\n      if (!this.isPotentialImportPhase(isExport)) {\n        this.applyImportPhase(node, isExport, null);\n        return null;\n      }\n      var phaseIdentifier = this.parseIdentifier(true);\n      var type = this.state.type;\n      var isImportPhase = tokenIsKeywordOrIdentifier(type) ? type !== 97 || this.lookaheadCharCode() === 102 : type !== 12;\n      if (isImportPhase) {\n        this.resetPreviousIdentifierLeadingComments(phaseIdentifier);\n        this.applyImportPhase(node, isExport, phaseIdentifier.name, phaseIdentifier.loc.start);\n        return null;\n      } else {\n        this.applyImportPhase(node, isExport, null);\n        return phaseIdentifier;\n      }\n    }\n  }, {\n    key: \"isPrecedingIdImportPhase\",\n    value: function isPrecedingIdImportPhase(phase) {\n      var type = this.state.type;\n      return tokenIsIdentifier(type) ? type !== 97 || this.lookaheadCharCode() === 102 : type !== 12;\n    }\n  }, {\n    key: \"parseImport\",\n    value: function parseImport(node) {\n      if (this.match(131)) {\n        return this.parseImportSourceAndAttributes(node);\n      }\n      return this.parseImportSpecifiersAndAfter(node, this.parseMaybeImportPhase(node, false));\n    }\n  }, {\n    key: \"parseImportSpecifiersAndAfter\",\n    value: function parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier) {\n      node.specifiers = [];\n      var hasDefault = this.maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier);\n      var parseNext = !hasDefault || this.eat(12);\n      var hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(97);\n      return this.parseImportSourceAndAttributes(node);\n    }\n  }, {\n    key: \"parseImportSourceAndAttributes\",\n    value: function parseImportSourceAndAttributes(node) {\n      var _node$specifiers;\n      (_node$specifiers = node.specifiers) != null ? _node$specifiers : node.specifiers = [];\n      node.source = this.parseImportSource();\n      this.maybeParseImportAttributes(node);\n      this.checkImportReflection(node);\n      this.checkJSONModuleImport(node);\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n  }, {\n    key: \"parseImportSource\",\n    value: function parseImportSource() {\n      if (!this.match(131)) this.unexpected();\n      return this.parseExprAtom();\n    }\n  }, {\n    key: \"parseImportSpecifierLocal\",\n    value: function parseImportSpecifierLocal(node, specifier, type) {\n      specifier.local = this.parseIdentifier();\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n  }, {\n    key: \"finishImportSpecifier\",\n    value: function finishImportSpecifier(specifier, type) {\n      var bindingType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BIND_LEXICAL;\n      this.checkLVal(specifier.local, {\n        in: {\n          type: type\n        },\n        binding: bindingType\n      });\n      return this.finishNode(specifier, type);\n    }\n  }, {\n    key: \"parseImportAttributes\",\n    value: function parseImportAttributes() {\n      this.expect(5);\n      var attrs = [];\n      var attrNames = new Set();\n      do {\n        if (this.match(8)) {\n          break;\n        }\n        var node = this.startNode();\n        var keyName = this.state.value;\n        if (attrNames.has(keyName)) {\n          this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n            at: this.state.startLoc,\n            key: keyName\n          });\n        }\n        attrNames.add(keyName);\n        if (this.match(131)) {\n          node.key = this.parseStringLiteral(keyName);\n        } else {\n          node.key = this.parseIdentifier(true);\n        }\n        this.expect(14);\n        if (!this.match(131)) {\n          throw this.raise(Errors.ModuleAttributeInvalidValue, {\n            at: this.state.startLoc\n          });\n        }\n        node.value = this.parseStringLiteral(this.state.value);\n        attrs.push(this.finishNode(node, \"ImportAttribute\"));\n      } while (this.eat(12));\n      this.expect(8);\n      return attrs;\n    }\n  }, {\n    key: \"parseModuleAttributes\",\n    value: function parseModuleAttributes() {\n      var attrs = [];\n      var attributes = new Set();\n      do {\n        var node = this.startNode();\n        node.key = this.parseIdentifier(true);\n        if (node.key.name !== \"type\") {\n          this.raise(Errors.ModuleAttributeDifferentFromType, {\n            at: node.key\n          });\n        }\n        if (attributes.has(node.key.name)) {\n          this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n            at: node.key,\n            key: node.key.name\n          });\n        }\n        attributes.add(node.key.name);\n        this.expect(14);\n        if (!this.match(131)) {\n          throw this.raise(Errors.ModuleAttributeInvalidValue, {\n            at: this.state.startLoc\n          });\n        }\n        node.value = this.parseStringLiteral(this.state.value);\n        attrs.push(this.finishNode(node, \"ImportAttribute\"));\n      } while (this.eat(12));\n      return attrs;\n    }\n  }, {\n    key: \"maybeParseImportAttributes\",\n    value: function maybeParseImportAttributes(node) {\n      var attributes;\n      var useWith = false;\n      if (this.match(76)) {\n        if (this.hasPrecedingLineBreak() && this.lookaheadCharCode() === 40) {\n          return;\n        }\n        this.next();\n        {\n          if (this.hasPlugin(\"moduleAttributes\")) {\n            attributes = this.parseModuleAttributes();\n          } else {\n            this.expectImportAttributesPlugin();\n            attributes = this.parseImportAttributes();\n          }\n        }\n        useWith = true;\n      } else if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {\n        if (this.hasPlugin(\"importAttributes\")) {\n          if (this.getPluginOption(\"importAttributes\", \"deprecatedAssertSyntax\") !== true) {\n            this.raise(Errors.ImportAttributesUseAssert, {\n              at: this.state.startLoc\n            });\n          }\n          this.addExtra(node, \"deprecatedAssertSyntax\", true);\n        } else {\n          this.expectOnePlugin([\"importAttributes\", \"importAssertions\"]);\n        }\n        this.next();\n        attributes = this.parseImportAttributes();\n      } else if (this.hasPlugin(\"importAttributes\") || this.hasPlugin(\"importAssertions\")) {\n        attributes = [];\n      } else {\n        if (this.hasPlugin(\"moduleAttributes\")) {\n          attributes = [];\n        } else return;\n      }\n      if (!useWith && this.hasPlugin(\"importAssertions\")) {\n        node.assertions = attributes;\n      } else {\n        node.attributes = attributes;\n      }\n    }\n  }, {\n    key: \"maybeParseDefaultImportSpecifier\",\n    value: function maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) {\n      if (maybeDefaultIdentifier) {\n        var specifier = this.startNodeAtNode(maybeDefaultIdentifier);\n        specifier.local = maybeDefaultIdentifier;\n        node.specifiers.push(this.finishImportSpecifier(specifier, \"ImportDefaultSpecifier\"));\n        return true;\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\");\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"maybeParseStarImportSpecifier\",\n    value: function maybeParseStarImportSpecifier(node) {\n      if (this.match(55)) {\n        var specifier = this.startNode();\n        this.next();\n        this.expectContextual(93);\n        this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\");\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"parseNamedImportSpecifiers\",\n    value: function parseNamedImportSpecifiers(node) {\n      var first = true;\n      this.expect(5);\n      while (!this.eat(8)) {\n        if (first) {\n          first = false;\n        } else {\n          if (this.eat(14)) {\n            throw this.raise(Errors.DestructureNamedImport, {\n              at: this.state.startLoc\n            });\n          }\n          this.expect(12);\n          if (this.eat(8)) break;\n        }\n        var specifier = this.startNode();\n        var importedIsString = this.match(131);\n        var isMaybeTypeOnly = this.isContextual(128);\n        specifier.imported = this.parseModuleExportName();\n        var importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === \"type\" || node.importKind === \"typeof\", isMaybeTypeOnly, undefined);\n        node.specifiers.push(importSpecifier);\n      }\n    }\n  }, {\n    key: \"parseImportSpecifier\",\n    value: function parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {\n      if (this.eatContextual(93)) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        var imported = specifier.imported;\n        if (importedIsString) {\n          throw this.raise(Errors.ImportBindingIsString, {\n            at: specifier,\n            importName: imported.value\n          });\n        }\n        this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n        if (!specifier.local) {\n          specifier.local = cloneIdentifier(imported);\n        }\n      }\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\", bindingType);\n    }\n  }, {\n    key: \"isThisParam\",\n    value: function isThisParam(param) {\n      return param.type === \"Identifier\" && param.name === \"this\";\n    }\n  }]);\n  return StatementParser;\n}(ExpressionParser);\nvar Parser = /*#__PURE__*/function (_StatementParser) {\n  _inherits(Parser, _StatementParser);\n  var _super19 = _createSuper(Parser);\n  function Parser(options, input) {\n    var _this67;\n    _classCallCheck(this, Parser);\n    options = getOptions(options);\n    _this67 = _super19.call(this, options, input);\n    _this67.options = options;\n    _this67.initializeScopes();\n    _this67.plugins = pluginsMap(_this67.options.plugins);\n    _this67.filename = options.sourceFilename;\n    return _this67;\n  }\n  _createClass(Parser, [{\n    key: \"getScopeHandler\",\n    value: function getScopeHandler() {\n      return ScopeHandler;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      this.enterInitialScopes();\n      var file = this.startNode();\n      var program = this.startNode();\n      this.nextToken();\n      file.errors = null;\n      this.parseTopLevel(file, program);\n      file.errors = this.state.errors;\n      return file;\n    }\n  }]);\n  return Parser;\n}(StatementParser);\nfunction pluginsMap(plugins) {\n  var pluginMap = new Map();\n  var _iterator18 = _createForOfIteratorHelper(plugins),\n    _step18;\n  try {\n    for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n      var plugin = _step18.value;\n      var _ref99 = Array.isArray(plugin) ? plugin : [plugin, {}],\n        _ref100 = _slicedToArray(_ref99, 2),\n        name = _ref100[0],\n        options = _ref100[1];\n      if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n    }\n  } catch (err) {\n    _iterator18.e(err);\n  } finally {\n    _iterator18.f();\n  }\n  return pluginMap;\n}\nfunction parse(input, options) {\n  var _options;\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n    try {\n      options.sourceType = \"module\";\n      var parser = getParser(options, input);\n      var ast = parser.parse();\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  var parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  var tokenTypes = {};\n  for (var _i7 = 0, _Object$keys4 = Object.keys(internalTokenTypes); _i7 < _Object$keys4.length; _i7++) {\n    var typeName = _Object$keys4[_i7];\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\nvar tokTypes = generateExportedTokenTypes(tt);\nfunction getParser(options, input) {\n  var cls = Parser;\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n  return new cls(options, input);\n}\nvar parserClassCache = {};\nfunction getParserClass(pluginsFromOptions) {\n  var pluginList = mixinPluginNames.filter(function (name) {\n    return hasPlugin(pluginsFromOptions, name);\n  });\n  var key = pluginList.join(\"/\");\n  var cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    var _iterator19 = _createForOfIteratorHelper(pluginList),\n      _step19;\n    try {\n      for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n        var plugin = _step19.value;\n        cls = mixinPlugins[plugin](cls);\n      }\n    } catch (err) {\n      _iterator19.e(err);\n    } finally {\n      _iterator19.f();\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = tokTypes;","map":{"version":3,"names":["Position","_createClass","line","col","index","_classCallCheck","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","ParseErrorCode","SyntaxError","SourceTypeModuleError","reflect","keys","last","arguments","length","undefined","get","reduce","object","key","set","value","item","i","instantiate","constructor","properties","descriptors","Object","map","filter","_ref3","_ref4","_slicedToArray","descriptor","_ref5","_ref6","enumerable","assign","split","instance","_ref7","_ref8","defineProperty","configurable","ModuleErrors","ImportMetaOutsideModule","message","code","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","CatchClause","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","_ref9","type","prefix","String","StandardErrors","AccessorIsGenerator","_ref10","kind","concat","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitUsingNotInAsyncContext","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","_ref11","DecoratorArgumentsOutsideParentheses","DecoratorBeforeExport","DecoratorsBeforeAfterExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","_ref12","exportName","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","_ref13","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","_ref14","ForInUsing","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","_ref15","IllegalLanguageModeDirective","IllegalReturn","ImportAttributesUseAssert","ImportBindingIsString","_ref16","importName","ImportCallArgumentTrailingComma","ImportCallArity","_ref17","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportJSONBindingNotDefault","ImportReflectionHasAssertion","ImportReflectionNotBinding","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","_ref18","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","_ref19","reservedWord","InvalidIdentifier","_ref20","InvalidLhs","_ref21","ancestor","InvalidLhsBinding","_ref22","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","_ref23","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","_ref24","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","_ref25","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","_ref26","missingPlugin","name","JSON","stringify","join","MissingOneOfPlugins","_ref27","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","_ref28","ModuleExportNameHasLoneSurrogate","_ref29","surrogateCharCode","toString","ModuleExportUndefined","_ref30","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","_ref31","PrivateNameRedeclaration","_ref32","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","SloppyFunctionAnnexB","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","_ref33","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","_ref34","UnexpectedSuper","UnexpectedToken","_ref35","expected","UnexpectedTokenUnaryExponentiation","UnexpectedUsingDeclaration","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","_ref36","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","UsingDeclarationHasBindingPattern","VarRedeclaration","_ref37","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictModeErrors","StrictDelete","StrictEvalArguments","_ref38","referenceName","StrictEvalArgumentsBinding","_ref39","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipelineOperatorErrors","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","_ref40","token","PipeTopicUnused","PipeUnparenthesizedBody","_ref41","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","toParseErrorConstructor","_ref","toMessage","_objectWithoutPropertiesLoose","_excluded$1","_ref42","loc","details","clone","overrides","pos","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","parseErrorTemplates","ParseErrorConstructors","_loop","reasonCode","_Object$keys","_i","template","_ref2","rest","_excluded2$1","Errors","_templateObject","_taggedTemplateLiteral","toUnenumerable","toESTreeLocation","node","estree","superClass","_superClass","_inherits","ESTreeParserMixin","_super","_createSuper","apply","parse","file","_get","_getPrototypeOf","prototype","call","options","tokens","parseRegExpLiteral","_ref43","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","_unused","bigint","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","expression","raw","extra","expressionValue","stmt","rawValue","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","_stmt$expression$extr","parenthesized","parseBlockBody","allowDirectives","topLevel","afterBlockParse","_this2","directiveStatements","directives","d","body","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","id","isPrivateName","getPrivateNameSV","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","parseClassProperty","_get2","_len","args","_key","propertyNode","parseClassPrivateProperty","_get3","_len2","_key2","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startLoc","refExpressionErrors","isValidLVal","isUnparenthesizedInAssign","binding","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","isLast","raise","at","finishCallExpression","unfinished","optional","callee","source","hasPlugin","_node$arguments$","attributes","toReferencedArguments","parseExport","decorators","exportStartLoc","state","lastTokStartLoc","exported","specifiers","_declaration$decorato","declaration","resetStartLocation","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isObjectMethod","finishNodeAt","endLoc","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords$1","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","_options$binop","_options$beforeExpr","_options$startsExpr","_options$prefix","createKeywordLike","_options$binop2","_options$beforeExpr2","_options$startsExpr2","_options$prefix2","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_let","_meta","_of","_sent","_set","_static","_using","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_satisfies","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","keywords","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_FLAGS_TS_IMPORT","BIND_FLAGS_NO_LET_IN_LEXICAL","BIND_CLASS","BIND_LEXICAL","BIND_CATCH_PARAM","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_TS_TYPE_IMPORT","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","parser","scopeStack","undefinedExports","currentScope","currentVarScopeFlags","currentThisScopeFlags","treatFunctionsAsVarInScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","_Scope","_super2","_this3","_len3","_key3","declareFunctions","FlowScopeHandler","_ScopeHandler","_super3","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","pluginConfig","plugins","_pluginConfig","pluginName","pluginOptions","actualOptions","_i2","_Object$keys2","plugin","_this$plugins$get","setTrailingComments","comments","trailingComments","_node$trailingComment","unshift","_toConsumableArray","setLeadingComments","leadingComments","_node$leadingComments","setInnerComments","innerComments","_node$innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","_BaseParser","_super4","addComment","comment","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","finalizeRemainingComments","resetPreviousNodeTrailingComments","resetPreviousIdentifierLeadingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","lastTokStart","canStartJSXElement","containsEsc","firstInvalidTemplateEscapePos","strictErrors","tokensLength","init","_ref44","strictMode","sourceType","startLine","startColumn","curPosition","skipArrays","val","slice","isDigit","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","readStringContents","initialPos","initialLineStart","initialCurLine","out","firstInvalidLoc","chunkStart","unterminated","isStringEnd","res","readEscapedChar","str","containsInvalid","inTemplate","throwOnInvalid","_readHexChar","readHexChar","_readCodePoint","readCodePoint","fromCodePoint","strictNumericEscape","startPos","match","octalStr","octal","parseInt","len","forceLen","n","_readInt","readInt","invalidEscapeSequence","allowNumSeparator","bailOnError","forbiddenSiblings","isAllowedSibling","invalid","total","Infinity","prev","numericSeparatorInEscapeSequence","Number","isNaN","unexpectedNumericSeparator","_isDigit","invalidDigit","_readHexChar2","indexOf","invalidCodePoint","_readHexChar3","buildPosition","VALID_REGEX_FLAGS","Token","Tokenizer","_CommentsParser","_super5","_this4","isLookahead","errorHandlers_readInt","errorRecovery","errorBuilder","errorHandlers_readCodePoint","errorHandlers_readStringContents_string","recordStrictModeErrors","errorHandlers_readStringContents_template","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","nextTokenInLineStart","nextTokenInLineStartSince","lookaheadInLineCharCode","codePointAtPos","cp","trail","setStrict","_this5","forEach","_ref45","_ref46","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","skipLineComment","startSkip","spaceStart","loop","attachComment","annexB","commentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","readRegexp","escaped","inClass","content","mods","char","includes","_readInt3","isBigInt","replace","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","parseFloat","_readCodePoint3","quote","_readStringContents","readTemplateContinuation","opening","_readStringContents2","_ref47","firstCode","escStart","identifierCheck","esc","raiseProperties","_excluded","error","raiseOverwrite","_excluded2","expectOnePlugin","pluginNames","_this6","some","_this7","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","_i3","_Array$from","from","_Array$from$_i","declarePrivateName","elementType","_this$current","redefined","accessor","oldStatic","newStatic","oldKind","newKind","_iterator","_createForOfIteratorHelper","_step","s","done","err","f","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","_ExpressionScope","_super6","_this8","declarationErrors","recordDeclarationError","ParsingErrorClass","_ref48","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","_ref49","origin","recordArrowParameterBindingError","_ref50","recordAsyncArrowParametersError","_ref51","validateAsPattern","_this9","_ref52","_ref53","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","functionFlags","UtilParser","_Tokenizer","_super7","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","_this10","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","_UtilParser","_super8","startNodeAt","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","_templateObject2","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","_ref54","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","_ref55","memberName","enumName","EnumDuplicateMemberName","_ref56","EnumInconsistentMemberValues","_ref57","EnumInvalidExplicitType","_ref58","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","_ref59","EnumInvalidMemberInitializerPrimaryType","_ref60","explicitType","EnumInvalidMemberInitializerSymbolType","_ref61","EnumInvalidMemberInitializerUnknownType","_ref62","EnumInvalidMemberName","_ref63","suggestion","EnumNumberMemberNotInitialized","_ref64","EnumStringMemberInconsistentlyInitailized","_ref65","GetterMayNotHaveThisParam","ImportReflectionHasImportType","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","_ref66","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","_ref67","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","hasTypeImportKind","importKind","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","_superClass2","FlowParserMixin","_super9","_this11","_len4","_key4","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","_this$flowParseTypeAn","_this$flowParseTypeAn2","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","_this12","bodyNode","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","finished","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","flowParseInterfaceExtends","implements","mixins","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","_ref68","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","_startLoc","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","_this13","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","_this$flowParseTypeAn3","_this$flowParseTypeAn4","parseStatementLike","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","_this14","setOptionalParametersError","originalNoArrowAt","_this$tryParseConditi","tryParseConditionalConsequent","consequent","failed","_this$getArrowLikeExp","getArrowLikeExpressions","_this$getArrowLikeExp2","valid","_this$tryParseConditi2","_this$getArrowLikeExp3","_this$getArrowLikeExp4","_this$tryParseConditi3","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","_this15","arrows","finishArrowValidation","every","_node$extra","toAssignableList","trailingCommaLoc","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","parseExportDeclaration","declarationNode","parseExportSpecifiers","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","isIterator","readIterator","fullWord","left","exprList","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","isParenthesized","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","checkImportReflection","module","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","isPotentialImportPhase","isExport","applyImportPhase","phase","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","parseVarId","decl","parseAsyncArrowFromCallExpression","shouldParseAsyncArrow","afterLeftParse","_this16","_jsx","jsx","currentContext","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","_this17","_this17$flowParseType","_this17$flowParseType2","shouldParseArrow","setArrowFunctionParameters","checkParams","allowDuplicates","isArrowFunction","strictModeChanged","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","_this18","parseAsyncArrowWithTypeParameters","subscriptState","_this19","isLookaheadToken_lt","typeArguments","parseCallExpressionArguments","parseNewCallee","_this20","targs","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","commentSkip","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","_ref69","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","_ref70","flowEnumErrorStringMemberInconsistentlyInitailized","_ref71","flowEnumMemberInit","_this21","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","_ref72","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","_this$flowEnumMemberR","toUpperCase","flowEnumStringMembers","initializedMembers","_ref73","_iterator2","_step2","_iterator3","_step3","flowEnumParseExplicitType","_ref74","flowEnumBody","_this22","nameLoc","_this$flowEnumMembers","empty","boolsLen","numsLen","strsLen","defaultedLen","_iterator4","_step4","_iterator5","_step5","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","_templateObject3","AttributeIsEmpty","MissingClosingTagElement","_ref75","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","_ref76","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","_superClass3","JSXParserMixin","_super10","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","parseExprAtom","jsxParseEmptyExpression","jsxParseSpreadChild","parseExpression","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","_this$state","TypeScriptScope","_Scope2","_super11","_this23","_len5","_key5","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","_ScopeHandler2","_super12","_this24","_len6","_key6","importsStack","hasImport","allowShadow","isConst","wasConst","getOwn$1","getOwn","hasOwnProperty","unwrapParenthesizedExpression","LValParser","_NodeUtils","_super13","_node$extra3","_node$extra2","operator","arg","checkToRestConversion","elt","_this25","element","toReferencedListDeep","_iterator6","_step6","parseSpread","parseRestBinding","parseBindingList","parseObjectLike","closeCharCode","allowEmpty","elts","checkCommaAfterRest","parseDecorator","parseAssignableListItem","parseBindingRestProperty","parseBindingProperty","_this$state2","parsePropertyName","_left","ObjectProperty","checkLVal","_ref77","in","_ref77$binding","_ref77$checkClashes","checkClashes","_ref77$strictModeChan","_ref77$hasParenthesiz","hasParenthesizedAncestor","_expression$extra","checkIdentifier","validity","ParseErrorClass","_ref78","_ref79","isParenthesizedExpression","nextAncestor","_iterator7","_step7","child","declareNameFromIdentifier","identifier","allowPattern","nonNull","x","assert","TSErrors","_templateObject4","AbstractMethodHasImplementation","_ref80","methodName","AbstractPropertyHasInitializer","_ref81","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","AccessorCannotBeOptional","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","_ref82","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","_ref83","modifier","DuplicateModifier","_ref84","EmptyHeritageClauseType","_ref85","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","_ref86","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","_ref87","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","_ref88","InvalidModifierOnTypeParameter","_ref89","InvalidModifierOnTypeParameterPositions","_ref90","InvalidModifiersOrder","_ref91","orderedModifiers","InvalidPropertyAccessAfterInstantiationExpression","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","_ref92","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","_ref93","typeParameterName","StaticBlockCannotHaveModifier","TupleOptionalAfterType","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","_ref94","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","typescript","_superClass4","TypeScriptParserMixin","_super14","_this26","_len7","_key7","tsParseInOutModifiers","tsParseModifiers","bind","_assertThisInitialized","allowedModifiers","disallowedModifiers","errorTemplate","tsParseConstModifier","tsParseInOutConstModifiers","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","_ref95","modified","_this27","_ref95$errorTemplate","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","_iterator8","_step8","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","createIdentifier","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","_this28","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","_labeledElements","_elementNode","checkType","isLabeled","labeled","isWord","chAfterWord","wordName","typeOrLabel","tsParseNonArrayType","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","_this29","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","_this30","tsParseConstraintForInferType","_this31","tsInDisallowConditionalTypesContext","_this32","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","_unused2","_this33","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","_this34","eatColon","_this35","tsParseNonConditionalType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","_this36","tsParseHeritageClause","_this37","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","_this38","tsInNoContext","cb","oldContext","oldInDisallowConditionalTypesContext","tsNextThenParseType","_this39","_this40","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","maybeDefaultIdentifier","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","tsTryParseAndCatch","tsTryParseDeclare","nany","_this41","startType","tsInAmbientContext","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","_this42","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","_this43","reScan_lt_gt","tsIsDeclarationStart","override","pp","parameter","isSimpleParameter","tsDisallowOptionalPattern","_iterator9","_step9","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","_this44","isInParens","_this45","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","tokenType","_callee$extra","parseExprOp","leftStartLoc","minPrec","_this46","isSatisfies","checkKeywords","checkDuplicateExports","parseImport","importNode","parseMaybeImportPhase","isAbstractClass","cls","allowMissingInitializer","_iterator10","declarations","_step10","_step10$value","isValidAmbientConstInitializer","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","_this47","callParseClassMemberWithIsStatic","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","_this48","_this49","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","parseClassAccessorProperty","_method$declare","declareClassPrivateMethodInScope","_this50","_typeCast","_typeCast2","typeCast","_typeParameters","reportReservedArrowTypeParam","trailingComma","sawUnary","_this51","toAssignableParenthesizedExpression","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSSatisfiesExpression","TSTypeAssertion","parseMaybeDecoratorArguments","_this52","canHaveLeadingDecorator","_this53","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","maybeTakeDecorators","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isPossiblyLiteralEnum","expressions","isUncomputedMemberExpressionChain","isNumber","isNegativeNumber","PlaceholderErrors","_templateObject5","ClassNameIsRequired","UnexpectedSpace","placeholders","_superClass5","PlaceholdersParserMixin","_super15","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","chStartsBindingIdentifier","verifyBreakContinue","isBreak","parseBlock","createNewLexicalScope","parseFunctionId","requireId","oldStrict","startsWith","maybeParseExportDefaultSpecifier","_specifiers","checkExport","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","_superClass6","V8IntrinsicMixin","_super16","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","expectedConfig","_ref96","_ref97","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","_p","_i4","_expectedKeys","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","allowCallParenthesized","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVersionPluginOption","missingPlugins","mixinPlugins","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowNewTargetOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","_i5","_Object$keys3","ExpressionParser","_LValParser","_super17","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","_this54","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","_this55","_this56","resultError","_resultError$loc","hasYield","parseYield","ownExpressionErrors","parseMaybeConditional","startIndex","parseExprOps","parseMaybeUnaryOrPrivate","hasIn","op","prec","checkPipelineAtInfixOperator","logical","coalesce","hasAwait","parseExprOpRightExpr","finishedNode","nextOp","_this57","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","_body$extra","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","updateExpressionNode","parseExprSubscripts","maybeAsyncArrow","parseBind","parseTaggedTemplateExpression","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","parseTemplate","expectImportAttributesPlugin","_iterator11","_step11","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","_call$extra","parseArrowExpression","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseAsyncFunctionExpression","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","allowSuper","meta","parseMetaProperty","parseFunction","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","inNonArrowFunction","parseNew","parseExprList","parseTemplateElement","isTagged","_this$state3","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","_params","finishedProp","_this$state4","generator","_this58","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","_iterator12","_step12","_this$state5","reservedTest","inStaticBlock","inClassAndNotInNonArrowFunction","inFunction","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","_ExpressionParser","_super18","interpreter","parseInterpreterDirective","_i6","_Array$from2","_Array$from2$_i","finishedProgram","stmtToDirective","directiveLiteral","hasFollowingBindingAtom","endCh","chStartsBindingPattern","hasInLineFollowingBindingIdentifier","startsUsingForOf","_this$lookahead","startsAwaitUsing","parseModuleItem","parseStatementListItem","parseStatementOrSloppyAnnexBFunctionDeclaration","allowLabeledFunction","parseStatement","starttype","allowDeclaration","allowFunctionDeclaration","parseBreakContinueStatement","parseDebuggerStatement","parseDoWhileStatement","parseForStatement","parseFunctionStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","inTopLevel","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","decoratorsEnabledBeforeExport","maybeDecorators","classNode","exportNode","_classNode$decorators","allowExport","paramsStartLoc","lab","parseHeaderExpression","_this59","awaitAt","parseFor","startsWithLet","startsWithAwaitUsing","starsWithUsingDeclaration","isLetOrUsing","initNode","parseVar","isForIn","parseForIn","startsWithAsync","isForOf","isHangingDeclaration","hasReturn","discriminant","cases","cur","sawDefault","isCase","_this60","block","handler","clause","finalizer","_this61","_this62","_iterator13","_step13","statementStart","parseBlockOrModuleBlockBody","parsedNonDirective","_this63","_this64","await","isFor","_this65","hangingDeclaration","isDeclaration","treatFunctionsAsVar","parseClassBody","_this66","hadConstructor","parseClassMemberFromModifier","parseClassStaticBlock","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","_this$state6","_member$decorators","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","parseExportFrom","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","_node2$declaration","_node$specifiers2","isTypeExport","assertions","_this$lookahead2","nextType","hasFrom","nextAfterFrom","maybeParseImportAttributes","checkJSONModuleImport","checkNames","isDefault","isFrom","_declaration$extra","_iterator14","_step14","_iterator15","_step15","_iterator16","_step16","_iterator17","_step17","nodes","surrogate","isJSONModuleImport","_ref98","_node$assertions","nonDefaultNamedSpecifier","phaseIdentifier","isImportPhase","isPrecedingIdImportPhase","parseImportSourceAndAttributes","parseImportSpecifiersAndAfter","maybeParseDefaultImportSpecifier","parseNext","_node$specifiers","parseImportAttributes","attrs","attrNames","parseModuleAttributes","useWith","importSpecifier","Parser","_StatementParser","_super19","_this67","pluginsMap","pluginMap","_iterator18","_step18","_ref99","_ref100","_options","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","_i7","_Object$keys4","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList","_iterator19","_step19"],"sources":["../src/util/location.ts","../src/parse-error/credentials.ts","../src/parse-error/module-errors.ts","../src/parse-error/to-node-description.ts","../src/parse-error/standard-errors.ts","../src/parse-error/strict-mode-errors.ts","../src/parse-error/pipeline-operator-errors.ts","../src/parse-error.ts","../src/plugins/estree.ts","../src/tokenizer/context.ts","../src/tokenizer/types.ts","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.ts","../src/util/scopeflags.ts","../src/util/scope.ts","../src/plugins/flow/scope.ts","../src/parser/base.ts","../src/parser/comments.ts","../src/util/whitespace.ts","../src/tokenizer/state.ts","../../babel-helper-string-parser/src/index.ts","../src/tokenizer/index.ts","../src/util/class-scope.ts","../src/util/expression-scope.ts","../src/util/production-parameter.ts","../src/parser/util.ts","../src/parser/node.ts","../src/plugins/flow/index.ts","../src/plugins/jsx/xhtml.ts","../src/plugins/jsx/index.ts","../src/plugins/typescript/scope.ts","../src/parser/lval.ts","../src/plugins/typescript/index.ts","../src/plugins/placeholders.ts","../src/plugins/v8intrinsic.ts","../src/plugin-utils.ts","../src/options.ts","../src/parser/expression.ts","../src/parser/statement.ts","../src/parser/index.ts","../src/index.ts"],"sourcesContent":["export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","export const enum ParseErrorCode {\n  SyntaxError = \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n}\n\nexport type SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\nexport type ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\nexport type ParseErrorCredentials<ErrorDetails> = {\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nconst reflect = (keys: string[], last = keys.length - 1) => ({\n  get(this: unknown): unknown {\n    return keys.reduce(\n      (object, key) =>\n        // @ts-expect-error key should index object\n        object[key],\n      this,\n    );\n  },\n  set(this: unknown, value: unknown) {\n    keys.reduce(\n      // @ts-expect-error key should index item\n      (item, key, i) => (i === last ? (item[key] = value) : item[key]),\n      this,\n    );\n  },\n});\n\nconst instantiate = <T>(\n  constructor: new () => T,\n  properties: any,\n  descriptors: any,\n) =>\n  Object.keys(descriptors)\n    .map(key => [key, descriptors[key]])\n    .filter(([, descriptor]) => !!descriptor)\n    .map(([key, descriptor]) => [\n      key,\n      typeof descriptor === \"function\"\n        ? { value: descriptor, enumerable: false }\n        : typeof descriptor.reflect === \"string\"\n        ? { ...descriptor, ...reflect(descriptor.reflect.split(\".\")) }\n        : descriptor,\n    ])\n    .reduce(\n      (instance, [key, descriptor]) =>\n        Object.defineProperty(instance, key, {\n          configurable: true,\n          ...descriptor,\n        }),\n      Object.assign(new constructor(), properties),\n    );\n\nexport { instantiate };\n","import { ParseErrorCode } from \"../parse-error\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n};\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\n// @ts-expect-error prefix is specified only when type is UpdateExpression\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix) as \"true\" | \"false\"]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n","import toNodeDescription from \"./to-node-description\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ParenthesizedExpression\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitUsingNotInAsyncContext:\n    \"'await using' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"const\" | \"destructuring\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport:\n    \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportAttributesUseAssert:\n    \"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedAssertSyntax: true` option in the import attributes plugin to suppress this error.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: ({ maxArgumentCount }: { maxArgumentCount: 1 | 2 }) =>\n    `\\`import()\\` requires exactly ${\n      maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n    }.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n};\n","export default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n};\n","import toNodeDescription from \"./to-node-description\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> = T extends Set<infer M>\n  ? M\n  : unknown;\n\ntype UnparenthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparenthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n};\n","import { Position } from \"./util/location\";\nimport {\n  instantiate,\n  ParseErrorCode,\n  type ParseErrorCredentials,\n  type ToMessage,\n  type SyntaxPlugin,\n} from \"./parse-error/credentials\";\nimport type { Undone } from \"./parser/node\";\nimport type { Node } from \"./types\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (a: {\n  loc: Position;\n  details: ErrorDetails;\n}) => ParseError<ErrorDetails>;\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  type ConstructorArgument = {\n    loc: Position;\n    details: ErrorDetails;\n  };\n\n  return function constructor({ loc, details }: ConstructorArgument) {\n    return instantiate(\n      SyntaxError,\n      { ...properties, loc },\n      {\n        clone(\n          overrides: {\n            loc?: Position;\n            details?: ErrorDetails;\n          } = {},\n        ) {\n          const loc = (overrides.loc || {}) as Partial<Position>;\n          return constructor({\n            loc: new Position(\n              \"line\" in loc ? loc.line : this.loc.line,\n              \"column\" in loc ? loc.column : this.loc.column,\n              \"index\" in loc ? loc.index : this.loc.index,\n            ),\n            details: { ...this.details, ...overrides.details },\n          });\n        },\n        details: { value: details, enumerable: false },\n        message: {\n          get(this: ConstructorArgument): string {\n            return `${toMessage(this.details)} (${this.loc.line}:${\n              this.loc.column\n            })`;\n          },\n          set(value: string) {\n            Object.defineProperty(this, \"message\", { value });\n          },\n        },\n        pos: { reflect: \"loc.index\", enumerable: true },\n        missingPlugin: \"missingPlugin\" in details && {\n          reflect: \"details.missingPlugin\",\n          enumerable: true,\n        },\n      },\n    ) as ParseError<ErrorDetails>;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any> };\n\ntype ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: ParseErrorCode.SourceTypeModuleError,\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n        ? { message: template }\n        : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: ParseErrorCode.SyntaxError,\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nexport type RaiseProperties<ErrorDetails> = {\n  at: Position | Undone<Node>;\n} & ErrorDetails;\n\nimport ModuleErrors from \"./parse-error/module-errors\";\nimport StandardErrors from \"./parse-error/standard-errors\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors\";\n\nexport * from \"./parse-error/credentials\";\n","import type { TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { BindingTypes } from \"../util/scopeflags\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: BigInt | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.Node>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      expression.type = \"Literal\";\n      // @ts-expect-error N.EstreeLiteral.raw is not defined.\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = directive as any as N.ExpressionStatement;\n      stmt.type = \"ExpressionStatement\";\n      stmt.expression = expression;\n      // @ts-expect-error N.ExpressionStatement.directive is not defined\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as any as N.EstreeProperty | N.EstreeMethodDefinition)\n        .value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // @ts-expect-error mutate AST types\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error mutate AST types\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { at: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { at: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node.arguments[0];\n        if (\n          this.hasPlugin(\"importAttributes\") ||\n          this.hasPlugin(\"importAssertions\")\n        ) {\n          (node as N.Node as N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            // @ts-expect-error mutating AST types\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(base, startLoc, noCalls, state);\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    // @ts-expect-error override interfaces\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","import { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,3104,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_STATIC_BLOCK | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b0000000_0000_01,\n             BIND_KIND_TYPE             = 0b0000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b0000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b0000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b0000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b0000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b00000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b00000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b00000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b00001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b00010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b00100000_0000_00,\n             BIND_FLAGS_TS_IMPORT       = 0b01000000_0000_00,\n             // Whether \"let\" should be allowed in bound names in sloppy mode\n             BIND_FLAGS_NO_LET_IN_LEXICAL = 0b10000000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS|BIND_FLAGS_NO_LET_IN_LEXICAL,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | BIND_FLAGS_NO_LET_IN_LEXICAL,\n             BIND_CATCH_PARAM   = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM|BIND_FLAGS_NO_LET_IN_LEXICAL,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE          ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE          ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM    | BIND_FLAGS_TS_CONST_ENUM                                        ,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0                   | BIND_FLAGS_TS_EXPORT_ONLY,\n             BIND_TS_TYPE_IMPORT= 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_TS_IMPORT     ,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","import {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport type * as N from \"../types\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & SCOPE_PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlags) {\n    /*:: +createScope: (flags: ScopeFlags) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlags {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        // Annex B.3.4\n        // https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","import type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n","/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node, Identifier } from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node\";\n\n/**\n * A whitespace token containing comments\n */\nexport type CommentWhitespace = {\n  /**\n   * the start of the whitespace token.\n   */\n  start: number;\n  /**\n   * the end of the whitespace token.\n   */\n  end: number;\n  /**\n   * the containing comments\n   */\n  comments: Array<Comment>;\n  /**\n   * the immediately preceding AST node of the whitespace token\n   */\n  leadingNode: Node | null;\n  /**\n   * the immediately following AST node of the whitespace token\n   */\n  trailingNode: Node | null;\n  /**\n   * the innermost AST node containing the whitespace with minimal size (|end - start|)\n   */\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * async /* 1 *​/ function f() {}\n   * ```\n   * the comment whitespace `/* 1 *​/` has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark `/* 1 *​/` as\n   * inner comments. So `/* 1 *​/` should be detached from the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node leading comments, assuming that `node` is a\n   * single-token node. Used in import phase modifiers parsing. We parse\n   * `module` in `import module foo from ...` as an identifier but may\n   * reinterpret it into a phase modifier later. In this case the identifier is\n   * not part of the AST and we should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * import /* 1 *​/ module a from \"a\";\n   * ```\n   * the comment whitespace `/* 1 *​/` has trailing node Identifier(module). When\n   * we see that `module` is not a default import binding, we mark `/* 1 *​/` as\n   * inner comments of the ImportDeclaration. So `/* 1 *​/` should be detached from\n   * the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousIdentifierLeadingComments(node: Identifier) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n\n    if (commentStack[length - 1].trailingNode === node) {\n      commentStack[length - 1].trailingNode = null;\n    } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {\n      commentStack[length - 2].trailingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport type { Errors } from \"../parse-error\";\nimport type { ParseError } from \"../parse-error\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n  inDisallowConditionalTypesContext: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: \"loop\" | \"switch\" | undefined | null;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this) as (keyof State)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // @ts-expect-error val must conform to S[key]\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: () => Position;\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n","import * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return process.env.BABEL_8_BREAKING\n    ? { pos, str: out, firstInvalidLoc, lineStart, curLine }\n    : {\n        pos,\n        str: out,\n        firstInvalidLoc,\n        lineStart,\n        curLine,\n        containsInvalid: !!firstInvalidLoc,\n      };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/)!;\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n      ? isAllowedNumericSeparatorSibling.dec\n      : radix === 8\n      ? isAllowedNumericSeparatorSibling.oct\n      : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n","/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments\";\nimport type * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport type { TokContext } from \"./context\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n  type RaiseProperties,\n} from \"../parse-error\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n  skipWhiteSpaceInLine,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState, DeferredStrictError } from \"./state\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  /**\n   * Similar to nextToken, but it will stop at line break when it is seen before the next token\n   *\n   * @returns {number} position of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  nextTokenInLineStart(): number {\n    return this.nextTokenInLineStartSince(this.state.pos);\n  }\n\n  nextTokenInLineStartSince(pos: number): number {\n    skipWhiteSpaceInLine.lastIndex = pos;\n    return skipWhiteSpaceInLine.test(this.input)\n      ? skipWhiteSpaceInLine.lastIndex\n      : pos;\n  }\n\n  /**\n   * Similar to lookaheadCharCode, but it will return the char code of line break if it is\n   * seen before the next token\n   *\n   * @returns {number} char code of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  lookaheadInLineCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenInLineStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, { at }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related properties.\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + commentEnd.length,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (\n            ch === charCodes.dash &&\n            !this.inModule &&\n            this.options.annexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (\n            ch === charCodes.lessThan &&\n            !this.inModule &&\n            this.options.annexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code),\n    });\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        // Numeric literals can't have newlines, so this is safe to do.\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix,\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc });\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        firstInvalidLoc.pos,\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(\n    toParseError: DeferredStrictError,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, { at });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    // @ts-expect-error: refine details typing\n    const error = toParseError({ loc, details });\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> | never {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        // @ts-expect-error: refine details typing\n        return (errors[i] = toParseError({ loc, details }));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc,\n    });\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName],\n    });\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<{}>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!this.options.errorRecovery) return false;\n\n      this.raise(Errors.InvalidDigit, {\n        at: buildPosition(pos, lineStart, curLine),\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedString, {\n        // Report the error at the string quote\n        at: buildPosition(pos - 1, lineStart, curLine),\n      });\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedTemplate, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n  };\n}\n","import {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n}\n","import { Errors, type ParseErrorConstructor } from \"../parse-error\";\nimport type { Position } from \"./location\";\nimport type { Node } from \"../types\";\nimport type Tokenizer from \"../tokenizer\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n  e.g. we don't know if `async({ x })` is a call expression or an async arrow\n  function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<{}>, Position]> =\n    new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<{}>,\n    {\n      at,\n    }: {\n      at: Position;\n    },\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const origin = { at: node.loc.start };\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   */\n  recordArrowParameterBindingError(\n    error: ParseErrorConstructor<{}>,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = { at: node.loc.start };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   */\n  recordAsyncArrowParametersError({ at }: { at: Position }): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at });\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","export const // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind = number;\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<number> = [];\n  enter(flags: number) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): number {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","import type { Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport type State from \"../tokenizer/state\";\nimport type { EstreePropertyDefinition, Node, ObjectProperty } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error\";\nimport type Parser from \".\";\n\nimport type ScopeHandler from \"../util/scope\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): { new (...args: any): ScopeHandler };\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, { at: this.state.startLoc });\n      }\n      this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /**\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /**\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /**\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional parameter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n","import type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType>(): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T extends NodeType>(loc: Position): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, loc.index, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType>(type: Undone<NodeType>): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    // @ts-expect-error migrate to Babel types AST typings\n    node.type = type;\n    // @ts-expect-error migrate to Babel types AST typings\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node as T);\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport type { ParseStatementFlag } from \"../../parser/statement\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitailized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: typeof Parser) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): {\n      new (...args: any): FlowScopeHandler;\n    } {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              at: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n            at: this.state.startLoc,\n            unsupportedExportKind: label,\n            suggestion: exportSuggestions[label],\n          });\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.Node;\n        }\n      }\n\n      this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(node: Undone<N.FlowDeclare>, isClass: boolean): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (isClass) {\n        node.implements = [];\n        node.mixins = [];\n\n        if (this.eatContextual(tt._mixins)) {\n          do {\n            node.mixins.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n\n        if (this.eatContextual(tt._implements)) {\n          do {\n            node.implements.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        {\n          at: startLoc,\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { at: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { at: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { at: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { at: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { at: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowTypeAnnotation>,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n          this.unexpected();\n          return;\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode<N.FlowTypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n        return;\n      }\n\n      super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            // @ts-expect-error: refine typings\n            this.finishArrowValidation(node);\n          } else {\n            // @ts-expect-error: refine typings\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            at: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, {\n          at: this.state.curPosition(),\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          this.finishOp(tt.questionDot, 2);\n        } else {\n          // allow double nullable types in Flow: ??string\n          this.finishOp(tt.question, 1);\n        }\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        this.readIterator();\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left);\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: ReadonlyArray<N.Expression | undefined | null>,\n      isParenthesizedExpr?: boolean,\n    ): ReadonlyArray<N.Expression | undefined | null> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            at: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectMethod | N.ObjectProperty {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { at: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { at: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(FlowErrors.ImportReflectionHasImportType, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        if (!isExport) return true;\n        const ch = this.lookaheadCharCode();\n        return ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        if (!phase && this.match(tt._default)) {\n          // TODO: Align with our TS AST and always add .exportKind\n          return;\n        }\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? phase : \"value\";\n      } else {\n        if (phase === \"type\" && this.match(tt.star)) this.unexpected();\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, {\n              at: specifier,\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          at: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      isConstructor: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        // @ts-expect-error refine typings\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          // @ts-expect-error: refine tryParse typings\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { at: typeParameters },\n              );\n            }\n            // @ts-expect-error: refine tryParse typings\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          at: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Pattern[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });\n        }\n      }\n\n      super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startLoc.index) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node, false);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n        at: loc,\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        {\n          at: loc,\n          ...enumContext,\n        },\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n        at: loc,\n        enumName,\n        memberName,\n      });\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n        at: node,\n        enumName,\n      });\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Node;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Array<N.Node>;\n        numberMembers: Array<N.Node>;\n        stringMembers: Array<N.Node>;\n        defaultedMembers: Array<N.Node>;\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, {\n            at: id,\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, {\n            at: id,\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n          at: this.state.startLoc,\n          enumName,\n        });\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, {\n          at: this.state.startLoc,\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.Node>, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: Undone<N.Node>): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n","import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport type { TokContext } from \"../../tokenizer/context\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport type { Undone } from \"../../parser/node\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXElement | null): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                this.finishToken(tt.jsxTagStart);\n              } else {\n                super.getTokenFromCode(ch);\n              }\n              return;\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            this.finishToken(tt.jsxText, out);\n            return;\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, {\n                at: this.state.curPosition(),\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      this.finishToken(tt.jsxName, this.input.slice(start, this.state.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { at: node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              at: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(startLoc: Position): N.JSXOpeningElement {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        // @ts-expect-error migrate to Babel types\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(startLoc: Position): N.JSXClosingElement {\n      const node = this.startNodeAt(startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            at: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        this.jsxReadToken();\n        return;\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          this.jsxReadWord();\n          return;\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          this.finishToken(tt.jsxTagEnd);\n          return;\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          this.jsxReadString(code);\n          return;\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        this.finishToken(tt.jsxTagStart);\n        return;\n      }\n\n      super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n  BIND_FLAGS_TS_IMPORT,\n  SCOPE_TS_MODULE,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\nimport { Errors } from \"../../parse-error\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: number): void {\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    if (bindingType & BIND_FLAGS_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.types.has(name) || scope.exportOnlyBindings.has(name)) return;\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n","import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayExpression,\n  ArrayPattern,\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils, type Undone } from \"./node\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_FLAGS_NO_LET_IN_LEXICAL,\n} from \"../util/scopeflags\";\nimport type { ExpressionErrors } from \"./util\";\nimport { Errors, type LValAncestor } from \"../parse-error\";\nimport type Parser from \"./index\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport const enum ParseBindingListFlags {\n  ALLOW_EMPTY = 1 << 0,\n  IS_FUNCTION_PARAMS = 1 << 1,\n  IS_CONSTRUCTOR_PARAMS = 1 << 2,\n}\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): Expression | Identifier;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n   *\n   * - Parenthesized Destructuring patterns\n   * - RestElement is not the last element\n   * - Missing `=` in assignment pattern\n   *\n   * NOTE: There is a corresponding \"isAssignable\" method.\n   * When this one is updated, please check if also that one needs to be updated.\n   *\n   * @param node The expression atom\n   * @param isLHS Whether we are parsing a LeftHandSideExpression.\n   *              If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *              If isLHS is `false`, we are in an arrow function parameters list.\n   */\n  toAssignable(node: Node, isLHS: boolean = false): void {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParameterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            { at: node },\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { at: prop.key },\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, { at: prop });\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, { at: elt });\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return (node.properties as ObjectExpression[\"properties\"]).every(\n          (prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type !== \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          },\n        );\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return (node as ArrayExpression).elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ): ReadonlyArray<Expression | undefined | null> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          ParseBindingListFlags.ALLOW_EMPTY,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: (typeof charCodes)[keyof typeof charCodes],\n    flags: ParseBindingListFlags,\n  ): Array<Pattern | TSParameterProperty> {\n    const allowEmpty = flags & ParseBindingListFlags.ALLOW_EMPTY;\n\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(\n          this.parseAssignableListItemTypes(this.parseRestBinding(), flags),\n        );\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(flags, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): ObjectMember | RestElement {\n    const prop = this.startNode<ObjectMember | RestElement>();\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop as Undone<RestElement>);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      (prop as Undone<ObjectMember>).key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop as Undone<ObjectMember>);\n    }\n    (prop as Undone<ObjectMember>).method = false;\n    return this.parseObjPropValue(\n      prop as Undone<ObjectMember>,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  parseAssignableListItem(\n    this: Parser,\n    flags: ParseBindingListFlags,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left, flags);\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(\n    param: Pattern,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    flags: ParseBindingListFlags,\n  ): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus its descendants must be subsequently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param type A Node `type` string\n   * @param isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingTypes,\n  ): string | boolean {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      // @ts-expect-error refine string to enum\n      type,\n    );\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param expression The expression in question to check.\n   * @param options A set of options described below.\n   * @param options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param options.binding\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BIND_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param options.checkClashes\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param options.strictModeChanged\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param options.hasParenthesizedAncestor\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor;\n      binding?: BindingTypes;\n      checkClashes?: Set<string> | false;\n      strictModeChanged?: boolean;\n      hasParenthesizedAncestor?: boolean;\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, { at: expression });\n      }\n      return;\n    }\n\n    if (type === \"Identifier\") {\n      this.checkIdentifier(\n        expression as Identifier,\n        binding,\n        strictModeChanged,\n      );\n\n      const { name } = expression as Identifier;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, { at: expression });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, { at: expression, ancestor });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      type === \"ArrayPattern\" ||\n      type === \"ObjectPattern\" ||\n      type === \"ParenthesizedExpression\"\n        ? ({ type } as const)\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingTypes,\n    strictModeChanged: boolean = false,\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (bindingType & BIND_FLAGS_NO_LET_IN_LEXICAL && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, { at });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingTypes) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, { at: node });\n    }\n  }\n\n  checkCommaAfterRest(\n    close: (typeof charCodes)[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { createPositionWithColumnOffset } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_TS_TYPE_IMPORT,\n  BIND_CLASS,\n  BIND_NONE,\n  BIND_FLAGS_TS_IMPORT,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport type { ParseStatementFlag } from \"../../parser/statement\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\nimport type { Pattern } from \"../../types\";\nimport type { Expression } from \"../../types\";\nimport type { IJSXParserMixin } from \"../jsx\";\nimport { ParseBindingListFlags } from \"../../parser/lval\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | \"const\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccesorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  AccessorCannotBeOptional:\n    \"An 'accessor' property cannot be declared optional.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements:\n    \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  // TODO: Accesor -> Accessor\n  SetAccesorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TupleOptionalAfterType:\n    \"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(value: string): N.TsKeywordTypeType | undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\ntype ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): {\n      new (...args: any): TypeScriptScopeHandler;\n    } {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (\n        !tokenIsIdentifier(this.state.type) &&\n        this.state.type !== tt._in &&\n        this.state.type !== tt._const\n      ) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers<N extends ModifierBase>(\n      {\n        allowedModifiers,\n        disallowedModifiers,\n        stopOnStartOfClassStaticBlock,\n        errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n      }: {\n        allowedModifiers: readonly TsModifier[];\n        disallowedModifiers?: TsModifier[];\n        stopOnStartOfClassStaticBlock?: boolean;\n        errorTemplate?: typeof TSErrors.InvalidModifierOnTypeMember;\n      },\n      modified: N,\n    ): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, {\n            at: loc,\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, {\n            at: loc,\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, {\n            at: startLoc,\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined | null,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined | null {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\n        \"const\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"const\"],\n      // for better error recovery\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n    });\n\n    tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\", \"const\"],\n      disallowedModifiers: [\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseTypeParameter(\n      parseModifiers: (node: Undone<N.TsTypeParameter>) => void,\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers: (node: N.TsTypeParameter) => void,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(parseModifiers: (node: N.TsTypeParameter) => void) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        // @ts-expect-error refine typings\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { at: node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      const list = super.parseBindingList(\n        tt.parenR,\n        charCodes.rightParenthesis,\n        ParseBindingListFlags.IS_FUNCTION_PARAMS,\n      );\n      for (const pattern of list) {\n        const { type } = pattern;\n        if (type === \"AssignmentPattern\" || type === \"TSParameterProperty\") {\n          this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n            at: pattern,\n            type,\n          });\n        }\n      }\n      return list as Exclude<\n        (typeof list)[0],\n        N.AssignmentPattern | N.TSParameterProperty\n      >[];\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              at: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\"readonly\"],\n          disallowedModifiers: [\n            \"declare\",\n            \"abstract\",\n            \"private\",\n            \"protected\",\n            \"public\",\n            \"static\",\n            \"override\",\n          ],\n        },\n        node,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements: boolean | null = null;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            at: elementNode,\n          });\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        let checkType = type;\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          checkType = elementNode.type;\n        }\n\n        const isLabeled = checkType === \"TSNamedTupleMember\";\n        labeledElements ??= isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            at: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsNamedTupleMember | N.TsType {\n      // parses `...TsType[]`\n\n      const { startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n\n      let labeled: boolean;\n      let label: N.Identifier;\n      let optional: boolean;\n      let type: N.TsNamedTupleMember | N.TsType;\n\n      const isWord = tokenIsKeywordOrIdentifier(this.state.type);\n      const chAfterWord = isWord ? this.lookaheadCharCode() : null;\n      if (chAfterWord === charCodes.colon) {\n        labeled = true;\n        optional = false;\n        label = this.parseIdentifier(true);\n        this.expect(tt.colon);\n        type = this.tsParseType();\n      } else if (chAfterWord === charCodes.questionMark) {\n        optional = true;\n        const startLoc = this.state.startLoc;\n        const wordName = this.state.value;\n        const typeOrLabel = this.tsParseNonArrayType();\n\n        if (this.lookaheadCharCode() === charCodes.colon) {\n          labeled = true;\n          label = this.createIdentifier(\n            this.startNodeAt<N.Identifier>(startLoc),\n            wordName,\n          );\n          this.expect(tt.question);\n          this.expect(tt.colon);\n          type = this.tsParseType();\n        } else {\n          labeled = false;\n          type = typeOrLabel;\n          this.expect(tt.question);\n        }\n      } else {\n        type = this.tsParseType();\n        optional = this.eat(tt.question);\n        // In this case (labeled === true) could be only in invalid label.\n        // E.g. [x.y:type]\n        // An error is raised while processing node.\n        labeled = this.eat(tt.colon);\n      }\n\n      if (labeled) {\n        let labeledNode: Undone<N.TsNamedTupleMember>;\n        if (label) {\n          labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(label);\n          labeledNode.optional = optional;\n          labeledNode.label = label;\n          labeledNode.elementType = type;\n\n          if (this.eat(tt.question)) {\n            labeledNode.optional = true;\n            this.raise(TSErrors.TupleOptionalAfterType, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n        } else {\n          labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(type);\n          labeledNode.optional = optional;\n          this.raise(TSErrors.InvalidTupleMemberLabel, { at: type });\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n          labeledNode.elementType = this.tsParseType();\n        }\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAtNode<N.TsOptionalType>(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      switch (this.state.type) {\n        case tt.num:\n        case tt.bigint:\n        case tt.string:\n        case tt._true:\n        case tt._false:\n          // For compatibility to estree we cannot call parseLiteral directly here\n          // @ts-expect-error refine typings\n          node.literal = super.parseExprAtom();\n          break;\n        default:\n          this.unexpected();\n      }\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node = this.startNode<N.TsLiteralType>();\n      node.literal = super.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Node {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAtNode<N.TsArrayType>(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAtNode<N.TsIndexedAccessType>(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(\n          // @ts-expect-error todo(flow->ts)\n          node,\n        );\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { at: node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsInAllowConditionalTypesContext(() =>\n            this.tsParseArrayTypeOrHigher(),\n          );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            ParseBindingListFlags.ALLOW_EMPTY,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            thisTypePredicate.asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeAnnotation();\n      }\n    }\n\n    tsTryParseType(): N.TsType | undefined {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.lastTokStartLoc,\n          reservedWord: \"asserts\",\n        });\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node = this.startNode<N.TsExpressionWithTypeArguments>();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, {\n          at: originalStartLoc,\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers,\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | undefined {\n      if (this.match(token)) {\n        return this.tsNextThenParseType();\n      }\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsInType(() => {\n        this.expect(token);\n        return this.tsParseType();\n      });\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsInType(() => {\n        this.next();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      maybeDefaultIdentifier?: N.Identifier | null,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = maybeDefaultIdentifier || this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_FLAGS_TS_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          at: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      }\n      this.state = state;\n    }\n\n    tsTryParseDeclare(nany: any): N.Declaration | undefined {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let startType = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        startType = tt._var;\n        kind = \"let\";\n      }\n\n      // @ts-expect-error refine typings\n      return this.tsInAmbientContext(() => {\n        switch (startType) {\n          case tt._function:\n            nany.declare = true;\n            return super.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* isHangingDeclaration */ false,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to know how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._enum:\n            return this.tsParseEnumDeclaration(nany, { declare: true });\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          case tt._const:\n          case tt._var:\n            if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n              nany.declare = true;\n              return this.parseVarStatement(\n                nany,\n                kind || this.state.value,\n                true,\n              );\n            }\n\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            return this.tsParseEnumDeclaration(nany, {\n              const: true,\n              declare: true,\n            });\n          case tt._interface: {\n            const result = this.tsParseInterfaceDeclaration(nany, {\n              declare: true,\n            });\n            if (result) return result;\n          }\n          // fallthrough\n          default:\n            if (tokenIsIdentifier(startType)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n                /* decorators */ null,\n              );\n            }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n          }\n          return declaration;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined {\n      if (!this.match(tt.lt)) return;\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters(\n            this.tsParseConstModifier,\n          );\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) return;\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { at: node });\n      } else if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      flags: ParseBindingListFlags,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include modifiers in range\n      const startLoc = this.state.startLoc;\n\n      const modified: ModifierBase = {};\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        },\n        modified,\n      );\n      const accessibility = modified.accessibility;\n      const override = modified.override;\n      const readonly = modified.readonly;\n      if (\n        !(flags & ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS) &&\n        (accessibility || readonly || override)\n      ) {\n        this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left, flags);\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp });\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    tsDisallowOptionalPattern(node: Undone<N.Function>) {\n      for (const param of node.params) {\n        if (\n          param.type !== \"Identifier\" &&\n          (param as any).optional &&\n          !this.state.isAmbientContext\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { at: param });\n        }\n      }\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params: N.Expression[],\n      trailingCommaLoc?: Position | null,\n    ): void {\n      super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n      this.tsDisallowOptionalPattern(node);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node });\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n      this.tsDisallowOptionalPattern(node);\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodiless function, we need to do it here.\n        this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | undefined | null>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            at: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              { at: this.state.startLoc },\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, {\n                at: this.state.startLoc,\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(TSErrors.ImportReflectionHasImportType, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        const ch = this.lookaheadCharCode();\n        return isExport\n          ? ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk\n          : ch !== charCodes.equalsTo;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? \"type\" : \"value\";\n      } else {\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      if (this.match(tt.string)) {\n        node.importKind = \"value\";\n        return super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      let importNode;\n      if (\n        tokenIsIdentifier(this.state.type) &&\n        this.lookaheadCharCode() === charCodes.equalsTo\n      ) {\n        node.importKind = \"value\";\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n        );\n      } else if (this.isContextual(tt._type)) {\n        const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n          node as Undone<N.ImportDeclaration>,\n          /* isExport */ false,\n        );\n        if (this.lookaheadCharCode() === charCodes.equalsTo) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        } else {\n          importNode = super.parseImportSpecifiersAndAfter(\n            node as Undone<N.ImportDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        }\n      } else {\n        importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          at: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<N.Node>,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        let maybeDefaultIdentifier: N.Identifier | null = null;\n        if (\n          this.isContextual(tt._type) &&\n          // We pass false here, because we are parsing an `import ... =`\n          this.isPotentialImportPhase(/* isExport */ false)\n        ) {\n          maybeDefaultIdentifier = this.parseMaybeImportPhase(\n            node as Undone<N.TsImportEqualsDeclaration>,\n            /* isExport */ false,\n          );\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n          maybeDefaultIdentifier,\n          /* isExport */ true,\n        );\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        this.sawUnambiguousESM = true;\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n            at: init,\n          });\n        } else if (\n          !isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            { at: init },\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers(\n        {\n          allowedModifiers: modifiers,\n          disallowedModifiers: [\"in\", \"out\"],\n          stopOnStartOfClassStaticBlock: true,\n          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n        },\n        member,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          super.parseClassStaticBlock(classBody, member as N.StaticBlock);\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { at: member });\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, {\n            at: member,\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { at: member });\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { at: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          at: member,\n        });\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { at: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp });\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingTypes,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n    ): void {\n      if (!node.optional) {\n        if (this.eat(tt.bang)) {\n          node.definite = true;\n        } else if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(TSErrors.AbstractPropertyHasInitializer, {\n          at: this.state.startLoc,\n          propertyName:\n            key.type === \"Identifier\" && !node.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n        });\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // @ts-expect-error abstract may not index node\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { at: node });\n      }\n\n      // @ts-expect-error accessibility may not index node\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, {\n          at: node,\n          // @ts-expect-error refine typings\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    parseClassAccessorProperty(\n      node: N.ClassAccessorProperty,\n    ): N.ClassAccessorProperty {\n      this.parseClassPropertyAnnotation(node);\n      if (node.optional) {\n        this.raise(TSErrors.AccessorCannotBeOptional, { at: node });\n      }\n      return super.parseClassAccessorProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          at: typeParameters,\n        });\n      }\n\n      // @ts-expect-error declare does not exist in ClassMethod\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { at: method, kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        // @ts-expect-error refine typings\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ) {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, isConstructor: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters.params[0];\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(TSErrors.SingleTypeParameterWithoutTrailingComma, {\n                at: createPositionWithColumnOffset(parameter.loc.end, 1),\n                typeParameterName: parameter.name.name,\n              });\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.params[0].constraint &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { at: node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      }\n      return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(\n      param: N.Pattern,\n      flags: ParseBindingListFlags,\n    ) {\n      if (!(flags & ParseBindingListFlags.IS_FUNCTION_PARAMS)) return param;\n\n      if (this.eat(tt.question)) {\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParameterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              { at: node },\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, { at: node });\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left);\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    // @ts-expect-error plugin overrides interfaces\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSSatisfiesExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSTypeAssertion: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n          },\n          type,\n        ) || super.isValidLVal(type, isUnparenthesizedInAssign, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      if (this.state.type === tt._this) {\n        return this.parseIdentifier(/* liberal */ true);\n      }\n      return super.parseBindingAtom();\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(\n      close: (typeof charCodes)[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      }\n      return super.checkCommaAfterRest(close);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          this.finishOp(tt.gt, 1);\n          return;\n        }\n        if (code === charCodes.lessThan) {\n          this.finishOp(tt.lt, 1);\n          return;\n        }\n      }\n      super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(\n      exprList: Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(\n            expr as N.TsTypeCastExpression,\n          );\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          // @ts-expect-error: refine typings\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        // @ts-expect-error: refine typings\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            at: node,\n          });\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? // @ts-expect-error estree typings\n            !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, {\n            at: method,\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n        );\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\n// If a const declaration has no type annotation and is initialized to\n// a string literal, numeric literal, or enum reference, then it is\n// allowed. In an ideal world, we'd check whether init was *actually* an\n// enum reference, but we allow anything that \"could be\" a literal enum\n// in `isPossiblyLiteralEnum` since we don't have all the information\n// that the typescript compiler has.\nfunction isValidAmbientConstInitializer(\n  expression: N.Expression,\n  estree: boolean,\n): boolean {\n  const { type } = expression;\n  if (expression.extra?.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const { value } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isNumber(expression: N.Expression, estree: boolean): boolean {\n  if (estree) {\n    return (\n      expression.type === \"Literal\" &&\n      (typeof expression.value === \"number\" || \"bigint\" in expression)\n    );\n  }\n  return (\n    expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\"\n  );\n}\n\nfunction isNegativeNumber(expression: N.Expression, estree: boolean): boolean {\n  if (expression.type === \"UnaryExpression\") {\n    const { operator, argument } = expression as N.UnaryExpression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\" || expression.computed) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type * as N from \"../types\";\nimport { ParseErrorEnum } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type { BindingTypes } from \"../util/scopeflags\";\nimport type { Position } from \"../util/location\";\n\ntype PossiblePlaceholders = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholders;\n\ntype NodeOf<T extends keyof PossiblePlaceholders> = PossiblePlaceholders[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\n/* eslint-disable sort-keys */\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined | null {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        // @ts-expect-error placeholder typings\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      // @ts-expect-error todo(flow->ts)\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        this.finishOp(tt.placeholder, 2);\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node, decorators: N.Decorator[] | null): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      maybeDefaultIdentifier: N.Identifier | null,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      if ((node as N.ExportNamedDeclaration).specifiers?.length) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(\n        node,\n        maybeDefaultIdentifier,\n      );\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, {\n          at: this.state.lastTokEndLoc,\n        });\n      }\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport type { ExpressionErrors } from \"../parser/util\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n","import type Parser from \"./parser\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"./typings\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = PluginConfig[];\n\nexport type MixinPlugin = (superClass: { new (...args: any): Parser }) => {\n  new (...args: any): Parser;\n};\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        // @ts-expect-error key may not exist in plugin options\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption<\n  PluginName extends ParserPluginWithOptions[0],\n  OptionName extends keyof PluginOptions<PluginName>,\n>(plugins: PluginList, name: PluginName, option: OptionName) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin) && plugin.length > 1) {\n    return (plugin[1] as PluginOptions<PluginName>)[option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\n        \"'decoratorsBeforeExport' must be a boolean, if specified.\",\n      );\n    }\n\n    const allowCallParenthesized = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"allowCallParenthesized\",\n    );\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAttributes` parser plugin, or `@babel/plugin-syntax-import-attributes`.\",\n      );\n    } else {\n      if (\n        hasPlugin(plugins, \"importAssertions\") ||\n        hasPlugin(plugins, \"importAttributes\")\n      ) {\n        throw new Error(\n          \"Cannot combine importAssertions, importAttributes and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n  if (\n    hasPlugin(plugins, \"importAssertions\") &&\n    hasPlugin(plugins, \"importAttributes\")\n  ) {\n    throw new Error(\n      \"Cannot combine importAssertions and importAttributes plugins.\",\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") != null &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n","import type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType;\n  sourceFilename?: string;\n  startColumn: number;\n  startLine: number;\n  allowAwaitOutsideFunction: boolean;\n  allowReturnOutsideFunction: boolean;\n  allowNewTargetOutsideFunction: boolean;\n  allowImportExportEverywhere: boolean;\n  allowSuperOutsideMethod: boolean;\n  allowUndeclaredExports: boolean;\n  plugins: PluginList;\n  strictMode: boolean | undefined | null;\n  ranges: boolean;\n  tokens: boolean;\n  createParenthesizedExpressions: boolean;\n  errorRecovery: boolean;\n  attachComment: boolean;\n  annexB: boolean;\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, new.target outside a function or class is not\n  // considered an error.\n  allowNewTargetOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n  // When enabled, the parser will support Annex B syntax.\n  // https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers\n  annexB: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): Options {\n  if (opts && opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    // @ts-expect-error key may not exist in opts\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, type ParseError } from \"../parse-error\";\nimport { UnparenthesizedPipeBodyDescriptions } from \"../parse-error/pipeline-operator-errors\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \".\";\n\nimport type { SourceType } from \"../options\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(node: N.Function, isConstructor?: boolean): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    protoRef: {\n      used: boolean;\n    },\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // @ts-expect-error prop must be an ObjectProperty\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { at: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { at: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    // @ts-expect-error fixme: refine types\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc,\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        // @ts-expect-error TS2322: Type 'string' is not assignable to type '\"AssignmentExpression\" | \"ArrowFunctionExpression\" | \"ConditionalExpression\" | \"YieldExpression\"'.\n        type: body.type,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { at: node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { at: node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc });\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      // @ts-expect-error Type 'Node' is missing the following properties from type 'Undone<UpdateExpression>': prefix, operator, argument\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(updateExpressionNode.argument, {\n        in: this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, {\n          at: this.state.startLoc,\n        });\n        if (this.lookaheadCharCode() === charCodes.leftParenthesis) {\n          // stop at `?.` when parsing `new a?.()`\n          state.stop = true;\n          return base;\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        // @ts-expect-error todo(flow->ts)\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  expectImportAttributesPlugin() {\n    if (!this.hasPlugin(\"importAssertions\")) {\n      this.expectPlugin(\"importAttributes\");\n    }\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectImportAttributesPlugin();\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectImportAttributesPlugin();\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount:\n            this.hasPlugin(\"importAttributes\") ||\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { at: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: N.Node | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression | undefined | null> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAttributes\") &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(decorators, this.startNode()),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { at: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: this.state.startLoc,\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        }\n        this.unexpected();\n        break;\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n        } else {\n          this.unexpected();\n        }\n        break;\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadInLineCharCode() === charCodes.leftCurlyBrace\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: Undone<N.Node>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { at: node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { at: node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { at: node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: Undone<N.MetaProperty>): N.MetaProperty {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, { at: id });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: N.Expression[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (\n        !this.scope.inNonArrowFunction &&\n        !this.scope.inClass &&\n        !this.options.allowNewTargetOutsideFunction\n      ) {\n        this.raise(Errors.UnexpectedNewTarget, { at: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { at: node.callee });\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: Adding 1 is probably wrong.\n          at: createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(\n            // @ts-expect-error todo(flow->ts) improve node types\n            node,\n          );\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { at: prop });\n      }\n\n      // @ts-expect-error shorthand may not index prop\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: Undone<N.ObjectProperty>): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { at: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { at: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    this: Parser,\n    prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMethod | N.ObjectProperty {\n    const node =\n      this.parseObjectMethod(\n        prop as Undone<N.ObjectMethod>,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[] | undefined | null,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[],\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(Errors.IllegalLanguageModeDirective, {\n              at:\n                // @ts-expect-error kind may not index node\n                (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                  ? // @ts-expect-error node.key has been guarded\n                    node.key.loc.end\n                  : node,\n            });\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word,\n      });\n      return;\n    } else if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { at: node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser): N.YieldExpression {\n    const node = this.startNode<N.YieldExpression>();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    this.next();\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n","import type * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"../parse-error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n  BIND_CATCH_PARAM,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport type { Position } from \"../util/location\";\nimport { createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \"./index\";\nimport { ParseBindingListFlags } from \"./lval\";\n\nconst loopLabel = { kind: \"loop\" } as const,\n  switchLabel = { kind: \"switch\" } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n */\nfunction babel7CompatTokens(tokens: (Token | N.Comment)[], input: string) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(this: Parser, file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at, localName });\n      }\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identifier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration in the same line so that it should be interpreted as\n   * a keyword.\n   */\n  hasInLineFollowingBindingIdentifier(): boolean {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingIdentifier(nextCh, next);\n  }\n\n  startsUsingForOf(): boolean {\n    const { type, containsEsc } = this.lookahead();\n    if (type === tt._of && !containsEsc) {\n      // `using of` must start a for-lhs-of statement\n      return false;\n    } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n\n  startsAwaitUsing(): boolean {\n    let next = this.nextTokenInLineStart();\n    if (this.isUnparsedContextual(next, \"using\")) {\n      next = this.nextTokenInLineStartSince(next + 5);\n      const nextCh = this.codePointAtPos(next);\n      if (this.chStartsBindingIdentifier(nextCh, next)) {\n        this.expectPlugin(\"explicitResourceManagement\");\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        // This function is actually also used to parse StatementItems,\n        // which with Annex B enabled allows labeled functions.\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        (!this.options.annexB || this.state.strict\n          ? 0\n          : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  parseStatementOrSloppyAnnexBFunctionDeclaration(\n    this: Parser,\n    allowLabeledFunction: boolean = false,\n  ) {\n    let flags: ParseStatementFlag = ParseStatementFlag.StatementOnly;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= ParseStatementFlag.AllowFunctionDeclaration;\n      if (allowLabeledFunction) {\n        flags |= ParseStatementFlag.AllowLabeledFunction;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const starttype = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(\n            this.state.strict\n              ? Errors.StrictFunction\n              : this.options.annexB\n              ? Errors.SloppyFunctionAnnexB\n              : Errors.SloppyFunction,\n            { at: this.state.startLoc },\n          );\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._await:\n        // [+Await] await [no LineTerminator here] using [no LineTerminator here] BindingList[+Using]\n        if (!this.state.containsEsc && this.startsAwaitUsing()) {\n          if (!this.isAwaitAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, { at: node });\n          } else if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, {\n              at: node,\n            });\n          }\n          this.next(); // eat 'await'\n          return this.parseVarStatement(\n            node as Undone<N.VariableDeclaration>,\n            \"await using\",\n          );\n        }\n        break;\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (\n          this.state.containsEsc ||\n          !this.hasInLineFollowingBindingIdentifier()\n        ) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, {\n            at: this.state.startLoc,\n          });\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportDefaultDeclaration\n            >,\n            decorators,\n          );\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        // @ts-expect-error migrate to Babel types\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, { at: node });\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      if (classNode.decorators && classNode.decorators.length > 0) {\n        // Note: decorators attachment is only attempred multiple times\n        // when the class is part of an export declaration.\n        if (\n          typeof this.getPluginOption(\n            \"decorators\",\n            \"decoratorsBeforeExport\",\n          ) !== \"boolean\"\n        ) {\n          // If `decoratorsBeforeExport` was set to `true` or `false`, we\n          // already threw an error about decorators not being in a valid\n          // position.\n          this.raise(Errors.DecoratorsBeforeAfterExport, {\n            at: classNode.decorators[0],\n          });\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(Errors.DecoratorArgumentsOutsideParentheses, {\n            at: paramsStartLoc,\n          });\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(this: Parser, expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, { at: node, type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    {\n      const startsWithAwaitUsing =\n        this.isContextual(tt._await) && this.startsAwaitUsing();\n      const starsWithUsingDeclaration =\n        startsWithAwaitUsing ||\n        (this.isContextual(tt._using) && this.startsUsingForOf());\n      const isLetOrUsing =\n        (startsWithLet && this.hasFollowingBindingAtom()) ||\n        starsWithUsingDeclaration;\n\n      if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n        const initNode = this.startNode<N.VariableDeclaration>();\n        let kind;\n        if (startsWithAwaitUsing) {\n          kind = \"await using\";\n          if (!this.isAwaitAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next(); // eat 'await'\n        } else {\n          kind = this.state.value;\n        }\n        this.next();\n        this.parseVar(initNode, true, kind);\n        const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n        const isForIn = this.match(tt._in);\n        if (isForIn && starsWithUsingDeclaration) {\n          this.raise(Errors.ForInUsing, { at: init });\n        }\n        if (\n          (isForIn || this.isContextual(tt._of)) &&\n          init.declarations.length === 1\n        ) {\n          return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n        }\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n        return this.parseFor(node as Undone<N.ForStatement>, init);\n      }\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { at: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { at: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrSloppyAnnexBFunctionDeclaration()\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    this.scope.enter(\n      this.options.annexB && param.type === \"Identifier\"\n        ? SCOPE_SIMPLE_CATCH\n        : 0,\n    );\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BIND_CATCH_PARAM,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { at: node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    afterBlockParse?.call(this, hasStrictModeDirective);\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        !this.options.annexB ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n        ? this.parseMaybeAssignDisallowIn()\n        : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\",\n          });\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\",\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    this.checkLVal(id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n    });\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(Errors.GeneratorInSingleStatementContext, {\n          at: this.state.startLoc,\n        });\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* isConstructor */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    isConstructor?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      ParseBindingListFlags.IS_FUNCTION_PARAMS |\n        (isConstructor ? ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS : 0),\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      !this.options.annexB || this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { at: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { at: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { at: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body: N.Node[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { at: member });\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { at: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = prop.key as N.Expression;\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { at: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<\n      N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod\n    >,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n      node,\n      /* isExport */ true,\n    );\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar =\n      parseAfterDefault &&\n      this.eatExportStar(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const hasNamespace =\n      hasStar &&\n      this.maybeParseExportNamespaceSpecifier(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      this.parseExportFrom(node as Undone<N.ExportNamedDeclaration>, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      this.unexpected(null, tt.braceL);\n    }\n\n    if (hasNamespace && parseAfterNamespace) {\n      this.unexpected(null, tt._from);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n\n      this.checkExport(node2, true, true);\n\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\", maybeDefaultIdentifier?.loc.start);\n      const id = maybeDefaultIdentifier || this.parseIdentifier(true);\n      const specifier = this.startNodeAtNode<N.ExportDefaultSpecifier>(id);\n      specifier.exported = id;\n      (node as Undone<N.ExportNamedDeclaration>).specifiers = [\n        this.finishNode(specifier, \"ExportDefaultSpecifier\"),\n      ];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(this.state.lastTokStartLoc);\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenInLineStart();\n    return this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression(this: Parser): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      this.maybeParseImportAttributes(node);\n      this.checkJSONModuleImport(node);\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (\n          this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n        ) {\n          this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<N.ExportNamedDeclaration | N.ExportDefaultDeclaration>,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration,\n            });\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, { at: node });\n      } else {\n        this.raise(Errors.DuplicateExport, { at: node, exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    if (node.module) {\n      if (\n        node.specifiers.length !== 1 ||\n        node.specifiers[0].type !== \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(Errors.ImportReflectionNotBinding, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(Errors.ImportReflectionHasAssertion, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(Errors.ImportJSONBindingNotDefault, {\n            at: nonDefaultNamedSpecifier.loc.start,\n          });\n        }\n      }\n    }\n  }\n\n  isPotentialImportPhase(isExport: boolean): boolean {\n    return !isExport && this.isContextual(tt._module);\n  }\n\n  applyImportPhase(\n    node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n    isExport: boolean,\n    phase: string | null,\n    loc?: Position,\n  ): void {\n    if (isExport) {\n      if (!process.env.IS_PUBLISH) {\n        if (phase === \"module\") {\n          throw new Error(\n            \"Assertion failure: export declarations do not support the 'module' phase.\",\n          );\n        }\n      }\n      return;\n    }\n    if (phase === \"module\") {\n      this.expectPlugin(\"importReflection\", loc);\n      (node as N.ImportDeclaration).module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      (node as N.ImportDeclaration).module = false;\n    }\n  }\n\n  /*\n   * Parse `module` in `import module x fro \"x\"`, disambiguating\n   * `import module from \"x\"` and `import module from from \"x\"`.\n   *\n   * This function might return an identifier representing the `module`\n   * if it eats `module` and then discovers that it was the default import\n   * binding and not the import reflection.\n   *\n   * This function is also used to parse `import type` and `import typeof`\n   * in the TS and Flow plugins.\n   *\n   * Note: the proposal has been updated to use `source` instead of `module`,\n   * but it has not been implemented yet.\n   */\n  parseMaybeImportPhase(\n    node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    isExport: boolean,\n  ): N.Identifier | null {\n    if (!this.isPotentialImportPhase(isExport)) {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      return null;\n    }\n\n    const phaseIdentifier = this.parseIdentifier(true);\n\n    const { type } = this.state;\n    const isImportPhase = tokenIsKeywordOrIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n\n    if (isImportPhase) {\n      this.resetPreviousIdentifierLeadingComments(phaseIdentifier);\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        phaseIdentifier.name,\n        phaseIdentifier.loc.start,\n      );\n      return null;\n    } else {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      // `<phase>` is a default binding, return it to the main import declaration parser\n      return phaseIdentifier;\n    }\n  }\n\n  isPrecedingIdImportPhase(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    phase: string,\n  ) {\n    const { type } = this.state;\n    return tokenIsIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    if (this.match(tt.string)) {\n      // import '...'\n      return this.parseImportSourceAndAttributes(node);\n    }\n\n    return this.parseImportSpecifiersAndAfter(\n      node,\n      this.parseMaybeImportPhase(node, /* isExport */ false),\n    );\n  }\n\n  parseImportSpecifiersAndAfter(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): N.AnyImport {\n    node.specifiers = [];\n\n    // check if we have a default import like\n    // import React from \"react\";\n    const hasDefault = this.maybeParseDefaultImportSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    /* we are checking if we do not have a default import, then it is obvious that we need named imports\n     * import { get } from \"axios\";\n     * but if we do have a default import\n     * we need to check if we have a comma after that and\n     * that is where this `|| this.eat` condition comes into play\n     */\n    const parseNext = !hasDefault || this.eat(tt.comma);\n    // if we do have to parse the next set of specifiers, we first check for star imports\n    // import React, * from \"react\";\n    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n    // now we check if we need to parse the next imports\n    // but only if they are not importing * (everything)\n    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n    this.expectContextual(tt._from);\n\n    return this.parseImportSourceAndAttributes(node);\n  }\n\n  parseImportSourceAndAttributes(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n  ): N.AnyImport {\n    node.specifiers ??= [];\n    node.source = this.parseImportSource();\n    this.maybeParseImportAttributes(node);\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(specifier: Undone<T>, type: T[\"type\"], bindingType = BIND_LEXICAL) {\n    this.checkLVal(specifier.local, {\n      in: { type },\n      binding: bindingType,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-attributes/#prod-WithEntries WithEntries}\n   */\n  parseImportAttributes(): N.ImportAttribute[] {\n    this.expect(tt.braceL);\n\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName,\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    this.expect(tt.braceR);\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   */\n  parseModuleAttributes() {\n    const attrs: N.ImportAttribute[] = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode<N.ImportAttribute>();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key,\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAttributes(\n    node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n  ) {\n    let attributes: N.ImportAttribute[];\n    let useWith = false;\n\n    // https://tc39.es/proposal-import-attributes/#prod-WithClause\n    if (this.match(tt._with)) {\n      if (\n        this.hasPrecedingLineBreak() &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      ) {\n        // This will be parsed as a with statement, and we will throw a\n        // better error about it not being supported in strict mode.\n        return;\n      }\n\n      this.next(); // eat `with`\n\n      if (!process.env.BABEL_8_BREAKING) {\n        if (this.hasPlugin(\"moduleAttributes\")) {\n          attributes = this.parseModuleAttributes();\n        } else {\n          this.expectImportAttributesPlugin();\n          attributes = this.parseImportAttributes();\n        }\n      } else {\n        this.expectImportAttributesPlugin();\n        attributes = this.parseImportAttributes();\n      }\n      useWith = true;\n    } else if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      if (this.hasPlugin(\"importAttributes\")) {\n        if (\n          this.getPluginOption(\"importAttributes\", \"deprecatedAssertSyntax\") !==\n          true\n        ) {\n          this.raise(Errors.ImportAttributesUseAssert, {\n            at: this.state.startLoc,\n          });\n        }\n        this.addExtra(node, \"deprecatedAssertSyntax\", true);\n      } else {\n        this.expectOnePlugin([\"importAttributes\", \"importAssertions\"]);\n      }\n      this.next(); // eat `assert`\n      attributes = this.parseImportAttributes();\n    } else if (\n      this.hasPlugin(\"importAttributes\") ||\n      this.hasPlugin(\"importAssertions\")\n    ) {\n      attributes = [];\n    } else if (!process.env.BABEL_8_BREAKING) {\n      if (this.hasPlugin(\"moduleAttributes\")) {\n        attributes = [];\n      } else return;\n    } else return;\n\n    if (!useWith && this.hasPlugin(\"importAssertions\")) {\n      node.assertions = attributes;\n    } else {\n      node.attributes = attributes;\n    }\n  }\n\n  maybeParseDefaultImportSpecifier(\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): boolean {\n    // import defaultObj, { x, y as z } from '...'\n    if (maybeDefaultIdentifier) {\n      const specifier = this.startNodeAtNode<N.ImportDefaultSpecifier>(\n        maybeDefaultIdentifier,\n      );\n      specifier.local = maybeDefaultIdentifier;\n      node.specifiers.push(\n        this.finishImportSpecifier(specifier, \"ImportDefaultSpecifier\"),\n      );\n      return true;\n    } else if (\n      // We allow keywords, and parseImportSpecifierLocal will report a recoverable error\n      tokenIsKeywordOrIdentifier(this.state.type)\n    ) {\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingTypes | undefined,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(options: Options | undefined | null, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): {\n    new (...args: any): ScopeHandler;\n  } {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode() as N.File;\n    const program = this.startNode() as N.Program;\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","import type { Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport type {\n  PluginConfig as ParserPlugin,\n  FlowPluginOptions,\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"./typings\";\nimport Parser from \"./parser\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: { new (...args: any): Parser } } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): {\n  new (...args: any): Parser;\n} {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n\nexport type {\n  FlowPluginOptions,\n  ParserPlugin,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n};\nexport type ParserOptions = Partial<Options>;\n"],"mappings":"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AG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,IAAI,EAAC,EAAE,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,IAAI,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,CAAC;AAEj+C,IAAMC,qBAAqB,GAAG,CAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CA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"},"metadata":{},"sourceType":"script"}