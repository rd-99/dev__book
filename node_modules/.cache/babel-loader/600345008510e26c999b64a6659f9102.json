{"ast":null,"code":"!function (e) {\n  function n(e) {\n    return RegExp(\"(\\\\()\" + e + \"(?=[\\\\s\\\\)])\");\n  }\n  function a(e) {\n    return RegExp(\"([\\\\s([])\" + e + \"(?=[\\\\s)])\");\n  }\n  var t = \"[-+*/_~!@$%^=<>{}\\\\w]+\",\n    r = \"(\\\\()\",\n    s = \"(?=\\\\))\",\n    i = \"(?=\\\\s)\",\n    o = {\n      heading: {\n        pattern: /;;;.*/,\n        alias: [\"comment\", \"title\"]\n      },\n      comment: /;.*/,\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: !0,\n        inside: {\n          argument: /[-A-Z]+(?=[.,\\s])/,\n          symbol: RegExp(\"`\" + t + \"'\")\n        }\n      },\n      \"quoted-symbol\": {\n        pattern: RegExp(\"#?'\" + t),\n        alias: [\"variable\", \"symbol\"]\n      },\n      \"lisp-property\": {\n        pattern: RegExp(\":\" + t),\n        alias: \"property\"\n      },\n      splice: {\n        pattern: RegExp(\",@?\" + t),\n        alias: [\"symbol\", \"variable\"]\n      },\n      keyword: [{\n        pattern: RegExp(r + \"(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)\" + i),\n        lookbehind: !0\n      }, {\n        pattern: RegExp(r + \"(?:for|do|collect|return|finally|append|concat|in|by)\" + i),\n        lookbehind: !0\n      }],\n      declare: {\n        pattern: n(\"declare\"),\n        lookbehind: !0,\n        alias: \"keyword\"\n      },\n      interactive: {\n        pattern: n(\"interactive\"),\n        lookbehind: !0,\n        alias: \"keyword\"\n      },\n      boolean: {\n        pattern: a(\"(?:t|nil)\"),\n        lookbehind: !0\n      },\n      number: {\n        pattern: a(\"[-+]?\\\\d+(?:\\\\.\\\\d*)?\"),\n        lookbehind: !0\n      },\n      defvar: {\n        pattern: RegExp(r + \"def(?:var|const|custom|group)\\\\s+\" + t),\n        lookbehind: !0,\n        inside: {\n          keyword: /^def[a-z]+/,\n          variable: RegExp(t)\n        }\n      },\n      defun: {\n        pattern: RegExp(r + \"(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+\" + t + \"\\\\s+\\\\([\\\\s\\\\S]*?\\\\)\"),\n        lookbehind: !0,\n        inside: {\n          keyword: /^(?:cl-)?def\\S+/,\n          arguments: null,\n          function: {\n            pattern: RegExp(\"(^\\\\s)\" + t),\n            lookbehind: !0\n          },\n          punctuation: /[()]/\n        }\n      },\n      lambda: {\n        pattern: RegExp(r + \"lambda\\\\s+\\\\(\\\\s*(?:&?\" + t + \"(?:\\\\s+&?\" + t + \")*\\\\s*)?\\\\)\"),\n        lookbehind: !0,\n        inside: {\n          keyword: /^lambda/,\n          arguments: null,\n          punctuation: /[()]/\n        }\n      },\n      car: {\n        pattern: RegExp(r + t),\n        lookbehind: !0\n      },\n      punctuation: [/(?:['`,]?\\(|[)\\[\\]])/, {\n        pattern: /(\\s)\\.(?=\\s)/,\n        lookbehind: !0\n      }]\n    },\n    l = {\n      \"lisp-marker\": RegExp(\"&[-+*/_~!@$%^=<>{}\\\\w]+\"),\n      rest: {\n        argument: {\n          pattern: RegExp(t),\n          alias: \"variable\"\n        },\n        varform: {\n          pattern: RegExp(r + t + \"\\\\s+\\\\S[\\\\s\\\\S]*\" + s),\n          lookbehind: !0,\n          inside: {\n            string: o.string,\n            boolean: o.boolean,\n            number: o.number,\n            symbol: o.symbol,\n            punctuation: /[()]/\n          }\n        }\n      }\n    },\n    p = \"\\\\S+(?:\\\\s+\\\\S+)*\",\n    d = {\n      pattern: RegExp(r + \"[\\\\s\\\\S]*\" + s),\n      lookbehind: !0,\n      inside: {\n        \"rest-vars\": {\n          pattern: RegExp(\"&(?:rest|body)\\\\s+\" + p),\n          inside: l\n        },\n        \"other-marker-vars\": {\n          pattern: RegExp(\"&(?:optional|aux)\\\\s+\" + p),\n          inside: l\n        },\n        keys: {\n          pattern: RegExp(\"&key\\\\s+\" + p + \"(?:\\\\s+&allow-other-keys)?\"),\n          inside: l\n        },\n        argument: {\n          pattern: RegExp(t),\n          alias: \"variable\"\n        },\n        punctuation: /[()]/\n      }\n    };\n  o.lambda.inside.arguments = d, o.defun.inside.arguments = e.util.clone(d), o.defun.inside.arguments.inside.sublist = d, e.languages.lisp = o, e.languages.elisp = o, e.languages.emacs = o, e.languages[\"emacs-lisp\"] = o;\n}(Prism);","map":{"version":3,"names":["e","n","RegExp","a","t","r","s","i","o","heading","pattern","alias","comment","string","greedy","inside","argument","symbol","splice","keyword","lookbehind","declare","interactive","boolean","number","defvar","variable","defun","arguments","function","punctuation","lambda","car","l","rest","varform","p","d","keys","util","clone","sublist","languages","lisp","elisp","emacs","Prism"],"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-lisp.min.js"],"sourcesContent":["!function(e){function n(e){return RegExp(\"(\\\\()\"+e+\"(?=[\\\\s\\\\)])\")}function a(e){return RegExp(\"([\\\\s([])\"+e+\"(?=[\\\\s)])\")}var t=\"[-+*/_~!@$%^=<>{}\\\\w]+\",r=\"(\\\\()\",s=\"(?=\\\\))\",i=\"(?=\\\\s)\",o={heading:{pattern:/;;;.*/,alias:[\"comment\",\"title\"]},comment:/;.*/,string:{pattern:/\"(?:[^\"\\\\]|\\\\.)*\"/,greedy:!0,inside:{argument:/[-A-Z]+(?=[.,\\s])/,symbol:RegExp(\"`\"+t+\"'\")}},\"quoted-symbol\":{pattern:RegExp(\"#?'\"+t),alias:[\"variable\",\"symbol\"]},\"lisp-property\":{pattern:RegExp(\":\"+t),alias:\"property\"},splice:{pattern:RegExp(\",@?\"+t),alias:[\"symbol\",\"variable\"]},keyword:[{pattern:RegExp(r+\"(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)\"+i),lookbehind:!0},{pattern:RegExp(r+\"(?:for|do|collect|return|finally|append|concat|in|by)\"+i),lookbehind:!0}],declare:{pattern:n(\"declare\"),lookbehind:!0,alias:\"keyword\"},interactive:{pattern:n(\"interactive\"),lookbehind:!0,alias:\"keyword\"},boolean:{pattern:a(\"(?:t|nil)\"),lookbehind:!0},number:{pattern:a(\"[-+]?\\\\d+(?:\\\\.\\\\d*)?\"),lookbehind:!0},defvar:{pattern:RegExp(r+\"def(?:var|const|custom|group)\\\\s+\"+t),lookbehind:!0,inside:{keyword:/^def[a-z]+/,variable:RegExp(t)}},defun:{pattern:RegExp(r+\"(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+\"+t+\"\\\\s+\\\\([\\\\s\\\\S]*?\\\\)\"),lookbehind:!0,inside:{keyword:/^(?:cl-)?def\\S+/,arguments:null,function:{pattern:RegExp(\"(^\\\\s)\"+t),lookbehind:!0},punctuation:/[()]/}},lambda:{pattern:RegExp(r+\"lambda\\\\s+\\\\(\\\\s*(?:&?\"+t+\"(?:\\\\s+&?\"+t+\")*\\\\s*)?\\\\)\"),lookbehind:!0,inside:{keyword:/^lambda/,arguments:null,punctuation:/[()]/}},car:{pattern:RegExp(r+t),lookbehind:!0},punctuation:[/(?:['`,]?\\(|[)\\[\\]])/,{pattern:/(\\s)\\.(?=\\s)/,lookbehind:!0}]},l={\"lisp-marker\":RegExp(\"&[-+*/_~!@$%^=<>{}\\\\w]+\"),rest:{argument:{pattern:RegExp(t),alias:\"variable\"},varform:{pattern:RegExp(r+t+\"\\\\s+\\\\S[\\\\s\\\\S]*\"+s),lookbehind:!0,inside:{string:o.string,boolean:o.boolean,number:o.number,symbol:o.symbol,punctuation:/[()]/}}}},p=\"\\\\S+(?:\\\\s+\\\\S+)*\",d={pattern:RegExp(r+\"[\\\\s\\\\S]*\"+s),lookbehind:!0,inside:{\"rest-vars\":{pattern:RegExp(\"&(?:rest|body)\\\\s+\"+p),inside:l},\"other-marker-vars\":{pattern:RegExp(\"&(?:optional|aux)\\\\s+\"+p),inside:l},keys:{pattern:RegExp(\"&key\\\\s+\"+p+\"(?:\\\\s+&allow-other-keys)?\"),inside:l},argument:{pattern:RegExp(t),alias:\"variable\"},punctuation:/[()]/}};o.lambda.inside.arguments=d,o.defun.inside.arguments=e.util.clone(d),o.defun.inside.arguments.inside.sublist=d,e.languages.lisp=o,e.languages.elisp=o,e.languages.emacs=o,e.languages[\"emacs-lisp\"]=o}(Prism);"],"mappings":"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"},"metadata":{},"sourceType":"script"}