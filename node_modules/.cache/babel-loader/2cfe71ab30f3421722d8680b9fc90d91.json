{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport classnames from 'classnames';\nimport MarkdownPreview from '@uiw/react-markdown-preview';\nimport TextArea from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, TextAreaCommandOrchestrator } from './commands';\nimport \"./index.css\";\nfunction setGroupPopFalse(data) {\n  Object.keys(data).forEach(function (keyname) {\n    data[keyname] = false;\n  });\n  return data;\n}\nvar InternalMDEditor = function InternalMDEditor(props, ref) {\n  var _classnames;\n  var _ref = props || {},\n    _ref$prefixCls = _ref.prefixCls,\n    prefixCls = _ref$prefixCls === void 0 ? 'w-md-editor' : _ref$prefixCls,\n    className = _ref.className,\n    propsValue = _ref.value,\n    _ref$commands = _ref.commands,\n    commands = _ref$commands === void 0 ? getCommands() : _ref$commands,\n    _ref$height = _ref.height,\n    heightWarp = _ref$height === void 0 ? 200 : _ref$height,\n    _ref$visiableDragbar = _ref.visiableDragbar,\n    visiableDragbar = _ref$visiableDragbar === void 0 ? true : _ref$visiableDragbar,\n    _ref$preview = _ref.preview,\n    previewType = _ref$preview === void 0 ? 'live' : _ref$preview,\n    isfullscreen = _ref.fullscreen,\n    previewOptions = _ref.previewOptions,\n    textareaProps = _ref.textareaProps,\n    _ref$maxHeight = _ref.maxHeight,\n    maxHeight = _ref$maxHeight === void 0 ? 1200 : _ref$maxHeight,\n    _ref$minHeight = _ref.minHeight,\n    minHeight = _ref$minHeight === void 0 ? 100 : _ref$minHeight,\n    autoFocus = _ref.autoFocus,\n    _ref$tabSize = _ref.tabSize,\n    tabSize = _ref$tabSize === void 0 ? 2 : _ref$tabSize,\n    onChange = _ref.onChange,\n    hideToolbar = _ref.hideToolbar,\n    other = _objectWithoutProperties(_ref, [\"prefixCls\", \"className\", \"value\", \"commands\", \"height\", \"visiableDragbar\", \"preview\", \"fullscreen\", \"previewOptions\", \"textareaProps\", \"maxHeight\", \"minHeight\", \"autoFocus\", \"tabSize\", \"onChange\", \"hideToolbar\"]);\n  var _useState = useState(propsValue || ''),\n    _useState2 = _slicedToArray(_useState, 2),\n    value = _useState2[0],\n    setValue = _useState2[1];\n  var _useState3 = useState(previewType),\n    _useState4 = _slicedToArray(_useState3, 2),\n    preview = _useState4[0],\n    setPreview = _useState4[1];\n  var _useState5 = useState(isfullscreen || false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isFullscreen = _useState6[0],\n    setIsFullscreen = _useState6[1];\n  var _useState7 = useState({}),\n    _useState8 = _slicedToArray(_useState7, 2),\n    groupPop = _useState8[0],\n    setGroupPop = _useState8[1];\n  var leftScroll = useRef(false);\n  var previewRef = /*#__PURE__*/React.createRef();\n  var _useState9 = useState(heightWarp),\n    _useState10 = _slicedToArray(_useState9, 2),\n    height = _useState10[0],\n    setHeight = _useState10[1];\n  var textarea = /*#__PURE__*/React.createRef();\n  var commandOrchestrator = useRef();\n  var cls = classnames(className, prefixCls, (_classnames = {}, _defineProperty(_classnames, \"\".concat(prefixCls, \"-show-\").concat(preview), preview), _defineProperty(_classnames, \"\".concat(prefixCls, \"-fullscreen\"), isFullscreen), _classnames));\n  useEffect(function () {\n    commandOrchestrator.current = new TextAreaCommandOrchestrator(textarea.current.text.current || null);\n  }, []);\n  useMemo(function () {\n    return preview !== props.preview && props.preview && setPreview(props.preview);\n  }, [props.preview]);\n  useMemo(function () {\n    return value !== props.value && setValue(props.value);\n  }, [props.value]);\n  useMemo(function () {\n    return height !== props.height && setHeight(heightWarp);\n  }, [heightWarp]);\n  function handleChange(mdStr) {\n    setValue(mdStr);\n    onChange && onChange(mdStr || '');\n  }\n  function handleCommand(command, groupName) {\n    if (command.keyCommand === 'preview') {\n      setPreview(command.value);\n    }\n    if (command.keyCommand === 'fullscreen') {\n      setIsFullscreen(!isFullscreen);\n      document.body.style.overflow = isFullscreen ? 'initial' : 'hidden';\n    }\n    if (command.keyCommand === 'group') {\n      setGroupPop(_objectSpread(_objectSpread({}, setGroupPopFalse(groupPop)), {}, _defineProperty({}, \"\".concat(groupName), true)));\n    }\n    if (groupName && command.keyCommand !== 'group') {\n      setGroupPop(_objectSpread(_objectSpread({}, groupPop), {}, _defineProperty({}, \"\".concat(groupName), false)));\n    }\n    commandOrchestrator.current.executeCommand(command);\n  }\n  function handleScroll(e) {\n    if (!textarea.current || !previewRef.current || !previewRef.current.mdp.current || !textarea.current.warp) {\n      return;\n    }\n    var previewDom = previewRef.current.mdp.current;\n    var textareaDom = textarea.current.warp.current;\n    if (textareaDom && previewDom) {\n      var scale = (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);\n      if (e.target === textareaDom && leftScroll.current) {\n        previewDom.scrollTop = textareaDom.scrollTop / scale;\n      }\n      if (e.target === previewDom && !leftScroll.current) {\n        textareaDom.scrollTop = previewDom.scrollTop * scale;\n      }\n    }\n  }\n  var chestratorObj = useMemo(function () {\n    return commandOrchestrator.current;\n  }, [commandOrchestrator.current]);\n  var mdProps = _objectSpread(_objectSpread({}, previewOptions), {}, {\n    ref: previewRef,\n    onScroll: handleScroll,\n    source: value\n  });\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: cls,\n    onClick: function onClick() {\n      return setGroupPop(_objectSpread({}, setGroupPopFalse(groupPop)));\n    },\n    style: {\n      height: isFullscreen ? '100%' : hideToolbar ? Number(height) - 29 : height\n    }\n  }, other), !hideToolbar && /*#__PURE__*/React.createElement(Toolbar, {\n    active: _objectSpread({\n      fullscreen: isFullscreen,\n      preview: preview\n    }, groupPop),\n    prefixCls: prefixCls,\n    commands: commands,\n    commandHelp: _objectSpread({\n      getState: commandOrchestrator.current && commandOrchestrator.current.getState,\n      textApi: commandOrchestrator.current && commandOrchestrator.current.textApi\n    }, chestratorObj),\n    onCommand: handleCommand\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-content\"),\n    style: {\n      height: isFullscreen ? 'calc(100% - 29px)' : Number(height) - 29\n    }\n  }, /(edit|live)/.test(preview) && /*#__PURE__*/React.createElement(TextArea, _extends({\n    ref: textarea,\n    tabSize: tabSize,\n    className: \"\".concat(prefixCls, \"-input\"),\n    prefixCls: prefixCls,\n    value: value,\n    autoFocus: autoFocus\n  }, textareaProps, {\n    onScroll: handleScroll,\n    onMouseOver: function onMouseOver() {\n      return leftScroll.current = true;\n    },\n    onMouseLeave: function onMouseLeave() {\n      return leftScroll.current = false;\n    },\n    onChange: handleChange\n  })), /(live|preview)/.test(preview) && /*#__PURE__*/React.createElement(MarkdownPreview, _extends({}, mdProps, {\n    className: \"\".concat(prefixCls, \"-preview\")\n  })), visiableDragbar && !isFullscreen && /*#__PURE__*/React.createElement(DragBar, {\n    prefixCls: prefixCls,\n    height: height,\n    maxHeight: maxHeight,\n    minHeight: minHeight,\n    onChange: function onChange(newHeight) {\n      setHeight(newHeight);\n    }\n  })));\n};\nvar MDEditor = /*#__PURE__*/React.forwardRef(InternalMDEditor);\nMDEditor.Markdown = MarkdownPreview;\nexport default MDEditor;","map":{"version":3,"names":["React","useEffect","useMemo","useRef","useState","classnames","MarkdownPreview","TextArea","Toolbar","DragBar","getCommands","TextAreaCommandOrchestrator","setGroupPopFalse","data","Object","keys","forEach","keyname","InternalMDEditor","props","ref","_classnames","_ref","_ref$prefixCls","prefixCls","className","propsValue","value","_ref$commands","commands","_ref$height","height","heightWarp","_ref$visiableDragbar","visiableDragbar","_ref$preview","preview","previewType","isfullscreen","fullscreen","previewOptions","textareaProps","_ref$maxHeight","maxHeight","_ref$minHeight","minHeight","autoFocus","_ref$tabSize","tabSize","onChange","hideToolbar","other","_objectWithoutProperties","_useState","_useState2","_slicedToArray","setValue","_useState3","_useState4","setPreview","_useState5","_useState6","isFullscreen","setIsFullscreen","_useState7","_useState8","groupPop","setGroupPop","leftScroll","previewRef","createRef","_useState9","_useState10","setHeight","textarea","commandOrchestrator","cls","_defineProperty","concat","current","text","handleChange","mdStr","handleCommand","command","groupName","keyCommand","document","body","style","overflow","_objectSpread","executeCommand","handleScroll","e","mdp","warp","previewDom","textareaDom","scale","scrollHeight","offsetHeight","target","scrollTop","chestratorObj","mdProps","onScroll","source","createElement","_extends","onClick","Number","active","commandHelp","getState","textApi","onCommand","test","onMouseOver","onMouseLeave","newHeight","MDEditor","forwardRef","Markdown"],"sources":["../../src/Editor.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport classnames from 'classnames';\nimport MarkdownPreview, { MarkdownPreviewProps, MarkdownPreviewRef } from '@uiw/react-markdown-preview';\nimport { IProps } from './utils';\nimport TextArea, { ITextAreaProps } from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, TextAreaCommandOrchestrator, ICommand } from './commands';\nimport './index.less';\n\nexport type PreviewType = 'live' | 'edit' | 'preview';\n\nexport interface MDEditorProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange'>, IProps {\n  /**\n   * The Markdown value.\n   */\n  value?: string;\n  /**\n   * Event handler for the `onChange` event.\n   */\n  onChange?: (value?: string) => void;\n  /**\n   * Can be used to make `Markdown Editor` focus itself on initialization. Defaults to on.\n   * it will be set to true when either the source `textarea` is focused,\n   * or it has an `autofocus` attribute and no other element is focused.\n   */\n  autoFocus?: ITextAreaProps['autoFocus'];\n  /**\n   * The height of the editor.\n   */\n  height?: React.CSSProperties['height'];\n  /**\n   * Show drag and drop tool. Set the height of the editor.\n   */\n  visiableDragbar?: boolean;\n  /**\n   * Show markdown preview.\n   */\n  preview?: PreviewType;\n  fullscreen?: boolean;\n  /**\n   * Maximum drag height. `visiableDragbar=true`\n   */\n  maxHeight?: number;\n  /**\n   * Minimum drag height. `visiableDragbar=true`\n   */\n  minHeight?: number;\n  /**\n   * This is reset [react-markdown](https://github.com/rexxars/react-markdown) settings.\n   */\n  previewOptions?: Omit<MarkdownPreviewProps, 'source'>;\n  /**\n   * Set the `textarea` related props.\n   */\n  textareaProps?: ITextAreaProps;\n  /**\n   * The number of characters to insert when pressing tab key.\n   * Default `2` spaces.\n   */\n  tabSize?: number;\n  /**\n   * You can create your own commands or reuse existing commands.\n   */\n  commands?: ICommand[];\n  /**\n   * Hide the tool bar\n   */\n  hideToolbar?: boolean;\n}\n\nfunction setGroupPopFalse(data: Record<string, boolean>) {\n  Object.keys(data).forEach(keyname => {\n    data[keyname] = false;\n  });\n  return data;\n}\n\nconst InternalMDEditor = (props: MDEditorProps, \n  ref?:\n    | ((instance: HTMLDivElement) => void)\n    | React.RefObject<HTMLDivElement | null>\n    | null\n  ) => {\n  const { prefixCls = 'w-md-editor', className, value: propsValue, commands = getCommands(), height: heightWarp = 200, visiableDragbar = true, preview: previewType = 'live', fullscreen: isfullscreen, previewOptions, textareaProps, maxHeight = 1200, minHeight = 100, autoFocus, tabSize = 2, onChange, hideToolbar, ...other } = props || {};\n  const [value, setValue] = useState<string>(propsValue || '')\n  const [preview, setPreview] = useState<PreviewType>(previewType);\n  const [isFullscreen, setIsFullscreen] = useState(isfullscreen || false);\n  const [groupPop, setGroupPop] = useState<Record<string, boolean>>({});\n  \n  const leftScroll = useRef(false);\n  const previewRef = React.createRef<MarkdownPreviewRef>()\n\n  const [height, setHeight] = useState(heightWarp);\n  const textarea = React.createRef<TextArea>();\n  const commandOrchestrator = useRef<TextAreaCommandOrchestrator>()\n\n  const cls = classnames(className, prefixCls, {\n    [`${prefixCls}-show-${preview}`]: preview,\n    [`${prefixCls}-fullscreen`]: isFullscreen,\n  });\n  useEffect(() => {\n    commandOrchestrator.current = new TextAreaCommandOrchestrator((textarea.current!.text.current || null) as HTMLTextAreaElement);\n  }, []);\n\n  useMemo(() => preview !== props.preview && props.preview && setPreview(props.preview!), [props.preview]);\n  useMemo(() => value !== props.value && setValue(props.value!), [props.value]);\n  useMemo(() => height !== props.height && setHeight(heightWarp!), [heightWarp]);\n\n  function handleChange(mdStr?: string) {\n    setValue(mdStr!);\n    onChange && onChange(mdStr || '');\n  }\n  function handleCommand(command: ICommand, groupName?: string) {\n    if (command.keyCommand === 'preview') {\n      setPreview(command.value as PreviewType);\n    }\n    if (command.keyCommand === 'fullscreen') {\n      setIsFullscreen(!isFullscreen);\n      document.body.style.overflow = isFullscreen ? 'initial' : 'hidden';\n    }\n    if (command.keyCommand === 'group') {\n      setGroupPop({ ...setGroupPopFalse(groupPop), [`${groupName}`]: true });\n    }\n    if (groupName && command.keyCommand !== 'group') {\n      setGroupPop({ ...groupPop, [`${groupName}`]: false });\n    }\n    commandOrchestrator.current!.executeCommand(command);\n  }\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    if (!textarea.current || !previewRef.current || !previewRef.current.mdp.current || !textarea.current.warp) {\n      return;\n    }\n    const previewDom = previewRef.current.mdp.current! as HTMLDivElement;\n    const textareaDom = textarea.current.warp.current! as HTMLDivElement;\n    if (textareaDom && previewDom) {\n      const scale = (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);\n      if (e.target === textareaDom && leftScroll.current) {\n        previewDom.scrollTop = textareaDom.scrollTop / scale;\n      }\n      if (e.target === previewDom && !leftScroll.current) {\n        textareaDom.scrollTop = previewDom.scrollTop * scale;\n      }\n    }\n  }\n  const chestratorObj = useMemo(() => commandOrchestrator.current, [commandOrchestrator.current]);\n  const mdProps = {\n    ...previewOptions,\n    ref: previewRef,\n    onScroll: handleScroll,\n    source: value,\n  } as unknown as MarkdownPreviewProps;\n  return (\n    <div className={cls} onClick={() => setGroupPop({...setGroupPopFalse(groupPop)})} style={{ height: isFullscreen ? '100%' : hideToolbar ? Number(height) - 29 : height }} {...other}>\n      {!hideToolbar && (\n        <Toolbar\n          active={{\n            fullscreen: isFullscreen,\n            preview: preview,\n            ...groupPop\n          }}\n          prefixCls={prefixCls}\n          commands={commands}\n          commandHelp={{\n            getState: commandOrchestrator.current && commandOrchestrator.current!.getState,\n            textApi: commandOrchestrator.current && commandOrchestrator.current!.textApi,\n            ...chestratorObj,\n          }}\n          onCommand={handleCommand}\n        />\n      )}\n      <div\n        className={`${prefixCls}-content`}\n        style={{ height: isFullscreen ? 'calc(100% - 29px)' : Number(height) - 29 }}\n      >\n        {/(edit|live)/.test(preview as string) && (\n          <TextArea\n            ref={textarea}\n            tabSize={tabSize}\n            className={`${prefixCls}-input`}\n            prefixCls={prefixCls}\n            value={value}\n            autoFocus={autoFocus}\n            {...textareaProps}\n            onScroll={handleScroll}\n            onMouseOver={() => leftScroll.current = true}\n            onMouseLeave={() => leftScroll.current = false}\n            onChange={handleChange}\n          />\n        )}\n        {/(live|preview)/.test(preview as string) && (\n          <MarkdownPreview {...mdProps} className={`${prefixCls}-preview`}/>\n        )}\n        {visiableDragbar && !isFullscreen && (\n          <DragBar\n            prefixCls={prefixCls}\n            height={height as number}\n            maxHeight={maxHeight!}\n            minHeight={minHeight!}\n            onChange={(newHeight) => {\n              setHeight(newHeight);\n            }}\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst MDEditor = React.forwardRef<HTMLDivElement, MDEditorProps>(InternalMDEditor);\n\ntype MDEditor = typeof MDEditor & {\n  Markdown: typeof MarkdownPreview;\n};\n\n(MDEditor as MDEditor).Markdown = MarkdownPreview;\n\nexport default MDEditor as MDEditor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}