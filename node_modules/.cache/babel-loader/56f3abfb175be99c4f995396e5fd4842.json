{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\dev__book\\\\dev__book\\\\src\\\\components\\\\code-cell.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\n//import bundle from '../bundler';\nimport CodeEditor from './code-editor';\n//import 'bulmaswatch/superhero/bulmaswatch.min.css';\nimport Preview from './preview';\nimport Resizable from './resizable';\nimport './resizeable.css';\nimport { useActions } from '../hooks/use-actions';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\nimport './code-cell.css';\nimport { useCumulativeCode } from '../hooks/use-cumulative-code';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeCell = _ref => {\n  _s();\n  let {\n    cell\n  } = _ref;\n  //const [input, setInput] = useState('');\n  // const [code, setCode] = useState(''); \n  // const [err, setErr] = useState('');\n  const {\n    updateCell,\n    createBundle\n  } = useActions();\n  const bundle = useTypedSelector(state => state.bundles && state.bundles[cell.id]);\n  const cumulativeCode = useCumulativeCode(cell.id);\n  useEffect(() => {\n    if (!bundle) {\n      createBundle(cell.id, cumulativeCode);\n      return;\n    }\n    const timer = setTimeout(async () => {\n      //const output = await bundle(cell.content);\n      // setCode(output.code);\n      // setErr(output.err);      \n      createBundle(cell.id, cumulativeCode);\n    }, 1000);\n    return () => {\n      clearTimeout(timer);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cumulativeCode, cell.id, createBundle]);\n\n  //   const onClick = async () => {\n  //     const output = await bundle(input);\n  //     //console.log(output,input);\n  //     setCode(output);\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 'calc(100% - 10px)',\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initialValue: `//@include` //{cell.content}\n          ,\n          onChange: value => updateCell(cell.id, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-wrapper\",\n        children: !bundle || bundle.loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-cover\",\n          children: /*#__PURE__*/_jsxDEV(\"progress\", {\n            className: \"progress is-small is-primary\",\n            max: \"100\",\n            children: \"Loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 18\n        }, this) : /*#__PURE__*/_jsxDEV(Preview, {\n          code: bundle.code,\n          err: bundle.err\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeCell, \"YdvzI4JhxthmaOjy94Z5IgkoJ60=\", false, function () {\n  return [useActions, useTypedSelector, useCumulativeCode];\n});\n_c = CodeCell;\nexport default CodeCell;\nvar _c;\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"names":["useEffect","CodeEditor","Preview","Resizable","useActions","useTypedSelector","useCumulativeCode","jsxDEV","_jsxDEV","CodeCell","_ref","_s","cell","updateCell","createBundle","bundle","state","bundles","id","cumulativeCode","timer","setTimeout","clearTimeout","direction","children","style","height","display","flexDirection","initialValue","onChange","value","fileName","_jsxFileName","lineNumber","columnNumber","className","loading","max","code","err","_c","$RefreshReg$"],"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/src/components/code-cell.tsx"],"sourcesContent":["import { useEffect,} from 'react';\r\n//import bundle from '../bundler';\r\nimport CodeEditor from './code-editor';\r\n//import 'bulmaswatch/superhero/bulmaswatch.min.css';\r\nimport Preview from './preview';\r\nimport Resizable from './resizable';\r\nimport './resizeable.css';\r\nimport { Cell } from '../state';\r\nimport { useActions } from '../hooks/use-actions';\r\nimport { useTypedSelector } from '../hooks/use-typed-selector';\r\nimport './code-cell.css';\r\nimport { useCumulativeCode } from '../hooks/use-cumulative-code';\r\n\r\ninterface CodeCellProps{\r\n  cell: Cell\r\n}\r\nconst CodeCell:React.FC<CodeCellProps> = ({ cell }) => { \r\n  //const [input, setInput] = useState('');\r\n  // const [code, setCode] = useState(''); \r\n  // const [err, setErr] = useState('');\r\n  const { updateCell, createBundle } = useActions();\r\n  const bundle = useTypedSelector((state) => state.bundles && state.bundles[cell.id]);\r\n  const cumulativeCode = useCumulativeCode(cell.id);\r\n\r\n  useEffect(() => {\r\n          if(!bundle){\r\n            createBundle(cell.id , cumulativeCode);\r\n          return ;\r\n          }\r\n\r\n\r\n    const timer = setTimeout(async () => {\r\n        //const output = await bundle(cell.content);\r\n        // setCode(output.code);\r\n        // setErr(output.err);      \r\n        createBundle(cell.id, cumulativeCode)\r\n    },1000);\r\n    \r\n    return () => {\r\n        clearTimeout(timer);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [cumulativeCode , cell.id , createBundle]);\r\n\r\n//   const onClick = async () => {\r\n//     const output = await bundle(input);\r\n//     //console.log(output,input);\r\n//     setCode(output);\r\n//   };\r\n\r\n  return (\r\n    <Resizable direction = 'vertical'>\r\n        <div style={{height:'calc(100% - 10px)',\r\n                     display: 'flex',\r\n                      flexDirection: 'row' }}>\r\n                        \r\n            <Resizable direction = 'horizontal'>\r\n                <CodeEditor \r\n                initialValue= {`//@include`} //{cell.content}\r\n                onChange={(value) => updateCell(cell.id, value)}\r\n                />      \r\n      {/* <div><button onClick={onClick}>Submit</button></div> */}\r\n            </Resizable>\r\n            <div className='progress-wrapper'>\r\n            {\r\n              !bundle || bundle.loading\r\n              ? (<div className='progress-cover'>\r\n                <progress className= 'progress is-small is-primary' max=\"100\">\r\n                Loading\r\n                </progress>             \r\n              </div>)\r\n              : (<Preview code={bundle.code} err = {bundle.err} />)\r\n            }\r\n            </div>               \r\n        </div>\r\n    </Resizable>\r\n    \r\n  );\r\n};\r\n\r\nexport default CodeCell;"],"mappings":"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"},"metadata":{},"sourceType":"module"}