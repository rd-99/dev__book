{"ast":null,"code":"import { ActionType } from \"../action-types\";\nimport produce from \"immer\";\nconst initialState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {},\n  isOn: true\n};\nconst reducer = produce(function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  ////////////Doubt   \n\n  switch (action.type) {\n    case ActionType.SAVE_CELLS_ERROR:\n      state.error = action.payload;\n      return state;\n    case ActionType.FETCH_CELLS:\n      state.loading = true;\n      state.error = null;\n      return state;\n    case ActionType.FETCH_CELLS_COMPLETE:\n      state.order = action.payload.map(cell => cell.id);\n      state.data = action.payload.reduce((acc, cell) => {\n        acc[cell.id] = cell;\n        return acc;\n      }, {});\n      return state;\n    case ActionType.FETCH_CELLS_ERROR:\n      state.loading = false;\n      state.error = action.payload;\n      return state;\n    case ActionType.UPDATE_CELL:\n      const {\n        id,\n        content\n      } = action.payload;\n      state.data[id].content = content;\n      return state;\n    // return {\n    //     ...state,\n    //     data: {\n    //         ...state.data,\n    //         [action.payload.id]: {\n    //             ...state.data[action.payload.id],\n    //             content: action.payload.content\n    //         }\n    //-----------------------------------------------------------------------------\n    // const { id, content} = action.payload;\n    // return {\n    //     ...state,\n    //     data: {\n    //         ...state.data,\n    //         [id]: {\n    //             ...state.data[id],\n    //             content,\n    //         },\n    //     },                          \n    // };\n\n    case ActionType.DELETE_CELL:\n      delete state.data[action.payload];\n      state.order = state.order.filter(id => id !== action.payload);\n      return state;\n    case ActionType.INCLUDE_CELL_GLOBAL:\n      return state;\n    case ActionType.MOVE_CELL:\n      const {\n        direction\n      } = action.payload;\n      const index = state.order.findIndex(id => id === action.payload.id);\n      const targetindex = direction === 'up' ? index - 1 : index + 1;\n      if (targetindex < 0 || targetindex > state.order.length - 1) {\n        return state;\n      }\n      state.order[index] = state.order[targetindex];\n      state.order[targetindex] = action.payload.id;\n      return state;\n    case ActionType.INSERT_CELL_AFTER:\n      const cell = {\n        content: '',\n        type: action.payload.type,\n        id: randomID()\n      };\n      state.data[cell.id] = cell;\n      const foundIndex = state.order.findIndex(id => id === action.payload.id);\n      if (foundIndex < 0) {\n        state.order.unshift(cell.id);\n      } else {\n        state.order.splice(foundIndex + 1, 0, cell.id);\n      }\n      return state;\n    default:\n      return state;\n  }\n  ;\n}, initialState);\nconst randomID = () => {\n  return Math.random().toString(36).substr(2, 5);\n};\nexport default reducer;","map":{"version":3,"names":["ActionType","produce","initialState","loading","error","order","data","isOn","reducer","state","arguments","length","undefined","action","type","SAVE_CELLS_ERROR","payload","FETCH_CELLS","FETCH_CELLS_COMPLETE","map","cell","id","reduce","acc","FETCH_CELLS_ERROR","UPDATE_CELL","content","DELETE_CELL","filter","INCLUDE_CELL_GLOBAL","MOVE_CELL","direction","index","findIndex","targetindex","INSERT_CELL_AFTER","randomID","foundIndex","unshift","splice","Math","random","toString","substr"],"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/src/state/reducers/cellsReducer.ts"],"sourcesContent":["import { ActionType } from \"../action-types\";\r\nimport { Action } from \"../actions\";\r\nimport { Cell } from \"../cell\";\r\nimport produce from \"immer\";\r\n\r\n\r\ninterface CellsState {\r\n    loading: boolean;\r\n    error: string | null ;\r\n    order: string[];\r\n    data: {\r\n        [key: string] : Cell;\r\n    };\r\n    isOn: boolean\r\n}\r\n\r\nconst initialState: CellsState = {\r\n    loading: false,\r\n    error: null,\r\n    order: [],\r\n    data: {},\r\n    isOn: true\r\n};\r\n\r\nconst reducer = produce(\r\n    (\r\n    state: CellsState = initialState,action: Action\r\n    ): CellsState | void => {    ////////////Doubt   \r\n               \r\n        switch (action.type) {\r\n        \r\n        case ActionType.SAVE_CELLS_ERROR:\r\n            state.error = action.payload;\r\n            return state;\r\n\r\n        case ActionType.FETCH_CELLS:\r\n            state.loading = true;\r\n            state.error = null;\r\n            return state;\r\n\r\n        case ActionType.FETCH_CELLS_COMPLETE:\r\n            state.order = action.payload.map(cell => cell.id);\r\n            state.data = action.payload.reduce((acc, cell) => {\r\n                acc[cell.id] = cell;\r\n                return acc;\r\n            } , {} as CellsState['data'])\r\n            return state;\r\n\r\n        case ActionType.FETCH_CELLS_ERROR:\r\n            state.loading = false;\r\n            state.error = action.payload;\r\n            return state;\r\n\r\n        case ActionType.UPDATE_CELL:\r\n            const { id, content} = action.payload;\r\n            state.data[id].content = content;\r\n            \r\n            return state;\r\n            // return {\r\n            //     ...state,\r\n            //     data: {\r\n            //         ...state.data,\r\n            //         [action.payload.id]: {\r\n            //             ...state.data[action.payload.id],\r\n            //             content: action.payload.content\r\n            //         }\r\n            //-----------------------------------------------------------------------------\r\n            // const { id, content} = action.payload;\r\n            // return {\r\n            //     ...state,\r\n            //     data: {\r\n            //         ...state.data,\r\n            //         [id]: {\r\n            //             ...state.data[id],\r\n            //             content,\r\n            //         },\r\n            //     },                          \r\n            // };\r\n\r\n        case ActionType.DELETE_CELL:\r\n            delete state.data[action.payload];\r\n            state.order = state.order.filter((id) => id !== action.payload)\r\n            return state ;\r\n\r\n        case ActionType.INCLUDE_CELL_GLOBAL:\r\n            \r\n            return state;\r\n\r\n        case ActionType.MOVE_CELL:\r\n            const {direction} = action.payload;\r\n            const index = state.order.findIndex((id) => id === action.payload.id);\r\n            const targetindex = direction === 'up' ? index - 1 : index + 1 ;\r\n            if ( targetindex < 0 || targetindex > state.order.length - 1 ){\r\n                return state;\r\n            } \r\n            state.order[index] = state.order[targetindex];\r\n            state.order[targetindex] = action.payload.id\r\n            return state;\r\n        \r\n        case ActionType.INSERT_CELL_AFTER:\r\n            const cell: Cell = {\r\n                content: '',\r\n                type: action.payload.type,\r\n                id:randomID(),\r\n            };\r\n            state.data[cell.id] = cell;\r\n            const foundIndex = state.order.findIndex(id => id===action.payload.id);\r\n            \r\n\r\n            if(foundIndex < 0){\r\n                state.order.unshift(cell.id);\r\n            }else{\r\n                state.order.splice(foundIndex + 1, 0,cell.id);\r\n            }\r\n\r\n            return state;\r\n            \r\n            default:\r\n            return state; \r\n                 \r\n    };   \r\n}, initialState);\r\n\r\nconst randomID = () => {\r\n    return Math.random().toString(36).substr(2,5);\r\n}\r\n\r\nexport default reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}