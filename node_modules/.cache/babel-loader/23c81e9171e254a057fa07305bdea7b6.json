{"ast":null,"code":"\"use strict\";\n\n;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar es2020_1 = tslib_1.__importDefault(require(\"./es2020\"));\nvar types_1 = tslib_1.__importDefault(require(\"../lib/types\"));\nvar shared_1 = tslib_1.__importDefault(require(\"../lib/shared\"));\nfunction default_1(fork) {\n  fork.use(es2020_1.default);\n  var types = fork.use(types_1.default);\n  var def = types.Type.def;\n  var or = types.Type.or;\n  var defaults = fork.use(shared_1.default).defaults;\n  def(\"JSXAttribute\").bases(\"Node\").build(\"name\", \"value\").field(\"name\", or(def(\"JSXIdentifier\"), def(\"JSXNamespacedName\"))).field(\"value\", or(def(\"Literal\"),\n  // attr=\"value\"\n  def(\"JSXExpressionContainer\"),\n  // attr={value}\n  def(\"JSXElement\"),\n  // attr=<div />\n  def(\"JSXFragment\"),\n  // attr=<></>\n  null // attr= or just attr\n  ), defaults[\"null\"]);\n  def(\"JSXIdentifier\").bases(\"Identifier\").build(\"name\").field(\"name\", String);\n  def(\"JSXNamespacedName\").bases(\"Node\").build(\"namespace\", \"name\").field(\"namespace\", def(\"JSXIdentifier\")).field(\"name\", def(\"JSXIdentifier\"));\n  def(\"JSXMemberExpression\").bases(\"MemberExpression\").build(\"object\", \"property\").field(\"object\", or(def(\"JSXIdentifier\"), def(\"JSXMemberExpression\"))).field(\"property\", def(\"JSXIdentifier\")).field(\"computed\", Boolean, defaults.false);\n  var JSXElementName = or(def(\"JSXIdentifier\"), def(\"JSXNamespacedName\"), def(\"JSXMemberExpression\"));\n  def(\"JSXSpreadAttribute\").bases(\"Node\").build(\"argument\").field(\"argument\", def(\"Expression\"));\n  var JSXAttributes = [or(def(\"JSXAttribute\"), def(\"JSXSpreadAttribute\"))];\n  def(\"JSXExpressionContainer\").bases(\"Expression\").build(\"expression\").field(\"expression\", or(def(\"Expression\"), def(\"JSXEmptyExpression\")));\n  var JSXChildren = [or(def(\"JSXText\"), def(\"JSXExpressionContainer\"), def(\"JSXSpreadChild\"), def(\"JSXElement\"), def(\"JSXFragment\"), def(\"Literal\") // Legacy: Esprima should return JSXText instead.\n  )];\n\n  def(\"JSXElement\").bases(\"Expression\").build(\"openingElement\", \"closingElement\", \"children\").field(\"openingElement\", def(\"JSXOpeningElement\")).field(\"closingElement\", or(def(\"JSXClosingElement\"), null), defaults[\"null\"]).field(\"children\", JSXChildren, defaults.emptyArray).field(\"name\", JSXElementName, function () {\n    // Little-known fact: the `this` object inside a default function\n    // is none other than the partially-built object itself, and any\n    // fields initialized directly from builder function arguments\n    // (like openingElement, closingElement, and children) are\n    // guaranteed to be available.\n    return this.openingElement.name;\n  }, true) // hidden from traversal\n  .field(\"selfClosing\", Boolean, function () {\n    return this.openingElement.selfClosing;\n  }, true) // hidden from traversal\n  .field(\"attributes\", JSXAttributes, function () {\n    return this.openingElement.attributes;\n  }, true); // hidden from traversal\n  def(\"JSXOpeningElement\").bases(\"Node\").build(\"name\", \"attributes\", \"selfClosing\").field(\"name\", JSXElementName).field(\"attributes\", JSXAttributes, defaults.emptyArray).field(\"selfClosing\", Boolean, defaults[\"false\"]);\n  def(\"JSXClosingElement\").bases(\"Node\").build(\"name\").field(\"name\", JSXElementName);\n  def(\"JSXFragment\").bases(\"Expression\").build(\"openingFragment\", \"closingFragment\", \"children\").field(\"openingFragment\", def(\"JSXOpeningFragment\")).field(\"closingFragment\", def(\"JSXClosingFragment\")).field(\"children\", JSXChildren, defaults.emptyArray);\n  def(\"JSXOpeningFragment\").bases(\"Node\").build();\n  def(\"JSXClosingFragment\").bases(\"Node\").build();\n  def(\"JSXText\").bases(\"Literal\").build(\"value\", \"raw\").field(\"value\", String).field(\"raw\", String, function () {\n    return this.value;\n  });\n  def(\"JSXEmptyExpression\").bases(\"Node\").build();\n  def(\"JSXSpreadChild\").bases(\"Node\").build(\"expression\").field(\"expression\", def(\"Expression\"));\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];","map":{"version":3,"names":["Object","defineProperty","exports","value","tslib_1","require","es2020_1","__importDefault","types_1","shared_1","default_1","fork","use","default","types","def","Type","or","defaults","bases","build","field","String","Boolean","false","JSXElementName","JSXAttributes","JSXChildren","emptyArray","openingElement","name","selfClosing","attributes","module"],"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/jscodeshift/node_modules/ast-types/def/jsx.js"],"sourcesContent":["\"use strict\";;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar es2020_1 = tslib_1.__importDefault(require(\"./es2020\"));\nvar types_1 = tslib_1.__importDefault(require(\"../lib/types\"));\nvar shared_1 = tslib_1.__importDefault(require(\"../lib/shared\"));\nfunction default_1(fork) {\n    fork.use(es2020_1.default);\n    var types = fork.use(types_1.default);\n    var def = types.Type.def;\n    var or = types.Type.or;\n    var defaults = fork.use(shared_1.default).defaults;\n    def(\"JSXAttribute\")\n        .bases(\"Node\")\n        .build(\"name\", \"value\")\n        .field(\"name\", or(def(\"JSXIdentifier\"), def(\"JSXNamespacedName\")))\n        .field(\"value\", or(def(\"Literal\"), // attr=\"value\"\n    def(\"JSXExpressionContainer\"), // attr={value}\n    def(\"JSXElement\"), // attr=<div />\n    def(\"JSXFragment\"), // attr=<></>\n    null // attr= or just attr\n    ), defaults[\"null\"]);\n    def(\"JSXIdentifier\")\n        .bases(\"Identifier\")\n        .build(\"name\")\n        .field(\"name\", String);\n    def(\"JSXNamespacedName\")\n        .bases(\"Node\")\n        .build(\"namespace\", \"name\")\n        .field(\"namespace\", def(\"JSXIdentifier\"))\n        .field(\"name\", def(\"JSXIdentifier\"));\n    def(\"JSXMemberExpression\")\n        .bases(\"MemberExpression\")\n        .build(\"object\", \"property\")\n        .field(\"object\", or(def(\"JSXIdentifier\"), def(\"JSXMemberExpression\")))\n        .field(\"property\", def(\"JSXIdentifier\"))\n        .field(\"computed\", Boolean, defaults.false);\n    var JSXElementName = or(def(\"JSXIdentifier\"), def(\"JSXNamespacedName\"), def(\"JSXMemberExpression\"));\n    def(\"JSXSpreadAttribute\")\n        .bases(\"Node\")\n        .build(\"argument\")\n        .field(\"argument\", def(\"Expression\"));\n    var JSXAttributes = [or(def(\"JSXAttribute\"), def(\"JSXSpreadAttribute\"))];\n    def(\"JSXExpressionContainer\")\n        .bases(\"Expression\")\n        .build(\"expression\")\n        .field(\"expression\", or(def(\"Expression\"), def(\"JSXEmptyExpression\")));\n    var JSXChildren = [or(def(\"JSXText\"), def(\"JSXExpressionContainer\"), def(\"JSXSpreadChild\"), def(\"JSXElement\"), def(\"JSXFragment\"), def(\"Literal\") // Legacy: Esprima should return JSXText instead.\n        )];\n    def(\"JSXElement\")\n        .bases(\"Expression\")\n        .build(\"openingElement\", \"closingElement\", \"children\")\n        .field(\"openingElement\", def(\"JSXOpeningElement\"))\n        .field(\"closingElement\", or(def(\"JSXClosingElement\"), null), defaults[\"null\"])\n        .field(\"children\", JSXChildren, defaults.emptyArray)\n        .field(\"name\", JSXElementName, function () {\n        // Little-known fact: the `this` object inside a default function\n        // is none other than the partially-built object itself, and any\n        // fields initialized directly from builder function arguments\n        // (like openingElement, closingElement, and children) are\n        // guaranteed to be available.\n        return this.openingElement.name;\n    }, true) // hidden from traversal\n        .field(\"selfClosing\", Boolean, function () {\n        return this.openingElement.selfClosing;\n    }, true) // hidden from traversal\n        .field(\"attributes\", JSXAttributes, function () {\n        return this.openingElement.attributes;\n    }, true); // hidden from traversal\n    def(\"JSXOpeningElement\")\n        .bases(\"Node\")\n        .build(\"name\", \"attributes\", \"selfClosing\")\n        .field(\"name\", JSXElementName)\n        .field(\"attributes\", JSXAttributes, defaults.emptyArray)\n        .field(\"selfClosing\", Boolean, defaults[\"false\"]);\n    def(\"JSXClosingElement\")\n        .bases(\"Node\")\n        .build(\"name\")\n        .field(\"name\", JSXElementName);\n    def(\"JSXFragment\")\n        .bases(\"Expression\")\n        .build(\"openingFragment\", \"closingFragment\", \"children\")\n        .field(\"openingFragment\", def(\"JSXOpeningFragment\"))\n        .field(\"closingFragment\", def(\"JSXClosingFragment\"))\n        .field(\"children\", JSXChildren, defaults.emptyArray);\n    def(\"JSXOpeningFragment\")\n        .bases(\"Node\")\n        .build();\n    def(\"JSXClosingFragment\")\n        .bases(\"Node\")\n        .build();\n    def(\"JSXText\")\n        .bases(\"Literal\")\n        .build(\"value\", \"raw\")\n        .field(\"value\", String)\n        .field(\"raw\", String, function () {\n        return this.value;\n    });\n    def(\"JSXEmptyExpression\")\n        .bases(\"Node\")\n        .build();\n    def(\"JSXSpreadChild\")\n        .bases(\"Node\")\n        .build(\"expression\")\n        .field(\"expression\", def(\"Expression\"));\n}\nexports.default = default_1;\nmodule.exports = exports[\"default\"];\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}