{"ast":null,"code":"(function (Prism) {\n  var multilineComment = /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source;\n  for (var i = 0; i < 2; i++) {\n    // support 4 levels of nested comments\n    multilineComment = multilineComment.replace(/<self>/g, function () {\n      return multilineComment;\n    });\n  }\n  multilineComment = multilineComment.replace(/<self>/g, function () {\n    return /[^\\s\\S]/.source;\n  });\n  Prism.languages.rust = {\n    'comment': [{\n      pattern: RegExp(/(^|[^\\\\])/.source + multilineComment),\n      lookbehind: true,\n      greedy: true\n    }, {\n      pattern: /(^|[^\\\\:])\\/\\/.*/,\n      lookbehind: true,\n      greedy: true\n    }],\n    'string': {\n      pattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\n      greedy: true\n    },\n    'char': {\n      pattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,\n      greedy: true,\n      alias: 'string'\n    },\n    'attribute': {\n      pattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\n      greedy: true,\n      alias: 'attr-name',\n      inside: {\n        'string': null // see below\n      }\n    },\n\n    // Closure params should not be confused with bitwise OR |\n    'closure-params': {\n      pattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'closure-punctuation': {\n          pattern: /^\\||\\|$/,\n          alias: 'punctuation'\n        },\n        rest: null // see below\n      }\n    },\n\n    'lifetime-annotation': {\n      pattern: /'\\w+/,\n      alias: 'symbol'\n    },\n    'fragment-specifier': {\n      pattern: /(\\$\\w+:)[a-z]+/,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'variable': /\\$\\w+/,\n    'function-definition': {\n      pattern: /(\\bfn\\s+)\\w+/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'type-definition': {\n      pattern: /(\\b(?:enum|struct|union)\\s+)\\w+/,\n      lookbehind: true,\n      alias: 'class-name'\n    },\n    'module-declaration': [{\n      pattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\n      lookbehind: true,\n      alias: 'namespace'\n    }, {\n      pattern: /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\n      lookbehind: true,\n      alias: 'namespace',\n      inside: {\n        'punctuation': /::/\n      }\n    }],\n    'keyword': [\n    // https://github.com/rust-lang/reference/blob/master/src/keywords.md\n    /\\b(?:abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|Self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n    // primitives and str\n    // https://doc.rust-lang.org/stable/rust-by-example/primitives.html\n    /\\b(?:[ui](?:8|16|32|64|128|size)|f(?:32|64)|bool|char|str)\\b/],\n    // functions can technically start with an upper-case letter, but this will introduce a lot of false positives\n    // and Rust's naming conventions recommend snake_case anyway.\n    // https://doc.rust-lang.org/1.0.0/style/style/naming/README.html\n    'function': /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\n    'macro': {\n      pattern: /\\b\\w+!/,\n      alias: 'property'\n    },\n    'constant': /\\b[A-Z_][A-Z_\\d]+\\b/,\n    'class-name': /\\b[A-Z]\\w*\\b/,\n    'namespace': {\n      pattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\n      inside: {\n        'punctuation': /::/\n      }\n    },\n    // Hex, oct, bin, dec numbers with visual separators and type suffix\n    'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64|size)?|f32|f64))?\\b/,\n    'boolean': /\\b(?:false|true)\\b/,\n    'punctuation': /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n    'operator': /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n  };\n  Prism.languages.rust['closure-params'].inside.rest = Prism.languages.rust;\n  Prism.languages.rust['attribute'].inside['string'] = Prism.languages.rust['string'];\n})(Prism);","map":{"version":3,"names":["Prism","multilineComment","source","i","replace","languages","rust","pattern","RegExp","lookbehind","greedy","alias","inside","rest"],"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-rust.js"],"sourcesContent":["(function (Prism) {\n\n\tvar multilineComment = /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source;\n\tfor (var i = 0; i < 2; i++) {\n\t\t// support 4 levels of nested comments\n\t\tmultilineComment = multilineComment.replace(/<self>/g, function () { return multilineComment; });\n\t}\n\tmultilineComment = multilineComment.replace(/<self>/g, function () { return /[^\\s\\S]/.source; });\n\n\n\tPrism.languages.rust = {\n\t\t'comment': [\n\t\t\t{\n\t\t\t\tpattern: RegExp(/(^|[^\\\\])/.source + multilineComment),\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true\n\t\t\t}\n\t\t],\n\t\t'string': {\n\t\t\tpattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\n\t\t\tgreedy: true\n\t\t},\n\t\t'char': {\n\t\t\tpattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string'\n\t\t},\n\t\t'attribute': {\n\t\t\tpattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\n\t\t\tgreedy: true,\n\t\t\talias: 'attr-name',\n\t\t\tinside: {\n\t\t\t\t'string': null // see below\n\t\t\t}\n\t\t},\n\n\t\t// Closure params should not be confused with bitwise OR |\n\t\t'closure-params': {\n\t\t\tpattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'closure-punctuation': {\n\t\t\t\t\tpattern: /^\\||\\|$/,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t},\n\t\t\t\trest: null // see below\n\t\t\t}\n\t\t},\n\n\t\t'lifetime-annotation': {\n\t\t\tpattern: /'\\w+/,\n\t\t\talias: 'symbol'\n\t\t},\n\n\t\t'fragment-specifier': {\n\t\t\tpattern: /(\\$\\w+:)[a-z]+/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'variable': /\\$\\w+/,\n\n\t\t'function-definition': {\n\t\t\tpattern: /(\\bfn\\s+)\\w+/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'function'\n\t\t},\n\t\t'type-definition': {\n\t\t\tpattern: /(\\b(?:enum|struct|union)\\s+)\\w+/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'class-name'\n\t\t},\n\t\t'module-declaration': [\n\t\t\t{\n\t\t\t\tpattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'namespace'\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'namespace',\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /::/\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'keyword': [\n\t\t\t// https://github.com/rust-lang/reference/blob/master/src/keywords.md\n\t\t\t/\\b(?:abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|Self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n\t\t\t// primitives and str\n\t\t\t// https://doc.rust-lang.org/stable/rust-by-example/primitives.html\n\t\t\t/\\b(?:[ui](?:8|16|32|64|128|size)|f(?:32|64)|bool|char|str)\\b/\n\t\t],\n\n\t\t// functions can technically start with an upper-case letter, but this will introduce a lot of false positives\n\t\t// and Rust's naming conventions recommend snake_case anyway.\n\t\t// https://doc.rust-lang.org/1.0.0/style/style/naming/README.html\n\t\t'function': /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\n\t\t'macro': {\n\t\t\tpattern: /\\b\\w+!/,\n\t\t\talias: 'property'\n\t\t},\n\t\t'constant': /\\b[A-Z_][A-Z_\\d]+\\b/,\n\t\t'class-name': /\\b[A-Z]\\w*\\b/,\n\n\t\t'namespace': {\n\t\t\tpattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /::/\n\t\t\t}\n\t\t},\n\n\t\t// Hex, oct, bin, dec numbers with visual separators and type suffix\n\t\t'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64|size)?|f32|f64))?\\b/,\n\t\t'boolean': /\\b(?:false|true)\\b/,\n\t\t'punctuation': /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n\t\t'operator': /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n\t};\n\n\tPrism.languages.rust['closure-params'].inside.rest = Prism.languages.rust;\n\tPrism.languages.rust['attribute'].inside['string'] = Prism.languages.rust['string'];\n\n}(Prism));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}