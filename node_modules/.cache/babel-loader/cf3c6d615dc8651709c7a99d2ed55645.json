{"ast":null,"code":"Prism.languages.concurnas = {\n  comment: [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: !0\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: !0,\n    greedy: !0\n  }],\n  langext: {\n    pattern: /\\b\\w+\\s*\\|\\|[\\s\\S]+?\\|\\|/,\n    greedy: !0,\n    alias: \"string\"\n  },\n  function: {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/,\n    lookbehind: !0\n  },\n  keyword: /\\b(?:abstract|actor|also|annotation|assert|async|await|bool|boolean|break|byte|case|catch|changed|char|class|closed|constant|continue|def|default|del|double|elif|else|enum|every|extends|false|finally|float|for|from|global|gpudef|gpukernel|if|import|in|init|inject|int|lambda|local|long|loop|match|new|nodefault|null|of|onchange|open|out|override|package|parfor|parforsync|post|pre|private|protected|provide|provider|public|return|shared|short|single|size_t|sizeof|super|sync|this|throw|trait|trans|transient|true|try|typedef|unchecked|using|val|var|void|while|with)\\b/,\n  boolean: /\\b(?:false|true)\\b/,\n  number: /\\b0b[01][01_]*L?\\b|\\b0x(?:[\\da-f_]*\\.)?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfls]?/i,\n  punctuation: /[{}[\\];(),.:]/,\n  operator: /<==|>==|=>|->|<-|<>|\\^|&==|&<>|!|\\?:?|\\.\\?|\\+\\+|--|[-+*/=<>]=?|\\b(?:and|as|band|bor|bxor|comp|is|isnot|mod|or)\\b=?/,\n  annotation: {\n    pattern: /@(?:\\w+:)?(?:\\w+|\\[[^\\]]+\\])?/,\n    alias: \"builtin\"\n  }\n}, Prism.languages.insertBefore(\"concurnas\", \"langext\", {\n  string: {\n    pattern: /[rs]?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: !0,\n    inside: {\n      interpolation: {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n        lookbehind: !0,\n        inside: Prism.languages.concurnas\n      },\n      string: /[\\s\\S]+/\n    }\n  }\n}), Prism.languages.conc = Prism.languages.concurnas;","map":{"version":3,"names":["Prism","languages","concurnas","comment","pattern","lookbehind","greedy","langext","alias","function","keyword","boolean","number","punctuation","operator","annotation","insertBefore","string","inside","interpolation","conc"],"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-concurnas.min.js"],"sourcesContent":["Prism.languages.concurnas={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0,greedy:!0}],langext:{pattern:/\\b\\w+\\s*\\|\\|[\\s\\S]+?\\|\\|/,greedy:!0,alias:\"string\"},function:{pattern:/((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/,lookbehind:!0},keyword:/\\b(?:abstract|actor|also|annotation|assert|async|await|bool|boolean|break|byte|case|catch|changed|char|class|closed|constant|continue|def|default|del|double|elif|else|enum|every|extends|false|finally|float|for|from|global|gpudef|gpukernel|if|import|in|init|inject|int|lambda|local|long|loop|match|new|nodefault|null|of|onchange|open|out|override|package|parfor|parforsync|post|pre|private|protected|provide|provider|public|return|shared|short|single|size_t|sizeof|super|sync|this|throw|trait|trans|transient|true|try|typedef|unchecked|using|val|var|void|while|with)\\b/,boolean:/\\b(?:false|true)\\b/,number:/\\b0b[01][01_]*L?\\b|\\b0x(?:[\\da-f_]*\\.)?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfls]?/i,punctuation:/[{}[\\];(),.:]/,operator:/<==|>==|=>|->|<-|<>|\\^|&==|&<>|!|\\?:?|\\.\\?|\\+\\+|--|[-+*/=<>]=?|\\b(?:and|as|band|bor|bxor|comp|is|isnot|mod|or)\\b=?/,annotation:{pattern:/@(?:\\w+:)?(?:\\w+|\\[[^\\]]+\\])?/,alias:\"builtin\"}},Prism.languages.insertBefore(\"concurnas\",\"langext\",{string:{pattern:/[rs]?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0,inside:{interpolation:{pattern:/((?:^|[^\\\\])(?:\\\\{2})*)\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,lookbehind:!0,inside:Prism.languages.concurnas},string:/[\\s\\S]+/}}}),Prism.languages.conc=Prism.languages.concurnas;"],"mappings":"AAAAA,KAAK,CAACC,SAAS,CAACC,SAAS,GAAC;EAACC,OAAO,EAAC,CAAC;IAACC,OAAO,EAAC,iCAAiC;IAACC,UAAU,EAAC,CAAC;EAAC,CAAC,EAAC;IAACD,OAAO,EAAC,kBAAkB;IAACC,UAAU,EAAC,CAAC,CAAC;IAACC,MAAM,EAAC,CAAC;EAAC,CAAC,CAAC;EAACC,OAAO,EAAC;IAACH,OAAO,EAAC,0BAA0B;IAACE,MAAM,EAAC,CAAC,CAAC;IAACE,KAAK,EAAC;EAAQ,CAAC;EAACC,QAAQ,EAAC;IAACL,OAAO,EAAC,0CAA0C;IAACC,UAAU,EAAC,CAAC;EAAC,CAAC;EAACK,OAAO,EAAC,yjBAAyjB;EAACC,OAAO,EAAC,oBAAoB;EAACC,MAAM,EAAC,2HAA2H;EAACC,WAAW,EAAC,eAAe;EAACC,QAAQ,EAAC,oHAAoH;EAACC,UAAU,EAAC;IAACX,OAAO,EAAC,+BAA+B;IAACI,KAAK,EAAC;EAAS;AAAC,CAAC,EAACR,KAAK,CAACC,SAAS,CAACe,YAAY,CAAC,WAAW,EAAC,SAAS,EAAC;EAACC,MAAM,EAAC;IAACb,OAAO,EAAC,sCAAsC;IAACE,MAAM,EAAC,CAAC,CAAC;IAACY,MAAM,EAAC;MAACC,aAAa,EAAC;QAACf,OAAO,EAAC,gEAAgE;QAACC,UAAU,EAAC,CAAC,CAAC;QAACa,MAAM,EAAClB,KAAK,CAACC,SAAS,CAACC;MAAS,CAAC;MAACe,MAAM,EAAC;IAAS;EAAC;AAAC,CAAC,CAAC,EAACjB,KAAK,CAACC,SAAS,CAACmB,IAAI,GAACpB,KAAK,CAACC,SAAS,CAACC,SAAS"},"metadata":{},"sourceType":"script"}