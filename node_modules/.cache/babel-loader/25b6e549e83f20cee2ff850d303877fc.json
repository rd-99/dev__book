{"ast":null,"code":"module.exports = inlineCode;\ninlineCode.peek = inlineCodePeek;\nvar patternCompile = require('../util/pattern-compile');\nfunction inlineCode(node, parent, context) {\n  var value = node.value || '';\n  var sequence = '`';\n  var index = -1;\n  var pattern;\n  var expression;\n  var match;\n  var position;\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`';\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (/[^ \\r\\n]/.test(value) && (/[ \\r\\n`]/.test(value.charAt(0)) || /[ \\r\\n`]/.test(value.charAt(value.length - 1)))) {\n    value = ' ' + value + ' ';\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < context.unsafe.length) {\n    pattern = context.unsafe[index];\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue;\n    expression = patternCompile(pattern);\n    while (match = expression.exec(value)) {\n      position = match.index;\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (value.charCodeAt(position) === 10 /* `\\n` */ && value.charCodeAt(position - 1) === 13 /* `\\r` */) {\n        position--;\n      }\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1);\n    }\n  }\n  return sequence + value + sequence;\n}\nfunction inlineCodePeek() {\n  return '`';\n}","map":{"version":3,"names":["module","exports","inlineCode","peek","inlineCodePeek","patternCompile","require","node","parent","context","value","sequence","index","pattern","expression","match","position","RegExp","test","charAt","length","unsafe","atBreak","exec","charCodeAt","slice"],"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js"],"sourcesContent":["module.exports = inlineCode\ninlineCode.peek = inlineCodePeek\n\nvar patternCompile = require('../util/pattern-compile')\n\nfunction inlineCode(node, parent, context) {\n  var value = node.value || ''\n  var sequence = '`'\n  var index = -1\n  var pattern\n  var expression\n  var match\n  var position\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    (/[ \\r\\n`]/.test(value.charAt(0)) ||\n      /[ \\r\\n`]/.test(value.charAt(value.length - 1)))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < context.unsafe.length) {\n    pattern = context.unsafe[index]\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    expression = patternCompile(pattern)\n\n    while ((match = expression.exec(value))) {\n      position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\nfunction inlineCodePeek() {\n  return '`'\n}\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAGC,UAAU;AAC3BA,UAAU,CAACC,IAAI,GAAGC,cAAc;AAEhC,IAAIC,cAAc,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AAEvD,SAASJ,UAAUA,CAACK,IAAI,EAAEC,MAAM,EAAEC,OAAO,EAAE;EACzC,IAAIC,KAAK,GAAGH,IAAI,CAACG,KAAK,IAAI,EAAE;EAC5B,IAAIC,QAAQ,GAAG,GAAG;EAClB,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd,IAAIC,OAAO;EACX,IAAIC,UAAU;EACd,IAAIC,KAAK;EACT,IAAIC,QAAQ;;EAEZ;EACA;EACA;EACA,OAAO,IAAIC,MAAM,CAAC,UAAU,GAAGN,QAAQ,GAAG,UAAU,CAAC,CAACO,IAAI,CAACR,KAAK,CAAC,EAAE;IACjEC,QAAQ,IAAI,GAAG;EACjB;;EAEA;EACA;EACA,IACE,UAAU,CAACO,IAAI,CAACR,KAAK,CAAC,KACrB,UAAU,CAACQ,IAAI,CAACR,KAAK,CAACS,MAAM,CAAC,CAAC,CAAC,CAAC,IAC/B,UAAU,CAACD,IAAI,CAACR,KAAK,CAACS,MAAM,CAACT,KAAK,CAACU,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,EAClD;IACAV,KAAK,GAAG,GAAG,GAAGA,KAAK,GAAG,GAAG;EAC3B;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,OAAO,EAAEE,KAAK,GAAGH,OAAO,CAACY,MAAM,CAACD,MAAM,EAAE;IACtCP,OAAO,GAAGJ,OAAO,CAACY,MAAM,CAACT,KAAK,CAAC;;IAE/B;IACA;IACA;IACA,IAAI,CAACC,OAAO,CAACS,OAAO,EAAE;IAEtBR,UAAU,GAAGT,cAAc,CAACQ,OAAO,CAAC;IAEpC,OAAQE,KAAK,GAAGD,UAAU,CAACS,IAAI,CAACb,KAAK,CAAC,EAAG;MACvCM,QAAQ,GAAGD,KAAK,CAACH,KAAK;;MAEtB;MACA,IACEF,KAAK,CAACc,UAAU,CAACR,QAAQ,CAAC,KAAK,EAAE,CAAC,cAClCN,KAAK,CAACc,UAAU,CAACR,QAAQ,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,YACtC;QACAA,QAAQ,EAAE;MACZ;MAEAN,KAAK,GAAGA,KAAK,CAACe,KAAK,CAAC,CAAC,EAAET,QAAQ,CAAC,GAAG,GAAG,GAAGN,KAAK,CAACe,KAAK,CAACV,KAAK,CAACH,KAAK,GAAG,CAAC,CAAC;IACvE;EACF;EAEA,OAAOD,QAAQ,GAAGD,KAAK,GAAGC,QAAQ;AACpC;AAEA,SAASP,cAAcA,CAAA,EAAG;EACxB,OAAO,GAAG;AACZ"},"metadata":{},"sourceType":"script"}