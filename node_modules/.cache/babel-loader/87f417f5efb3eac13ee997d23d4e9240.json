{"ast":null,"code":"import { ActionType } from \"../action-types\";\nimport axios from \"axios\";\nimport bundle from \"../../bundler\";\nexport const saveCells = () => {\n  return async (dispatch, getState) => {\n    const {\n      cells: {\n        data,\n        order\n      }\n    } = getState();\n    const cells = order.map(id => data[id]);\n    try {\n      await axios.post('/cells', {\n        cells\n      });\n    } catch (err) {\n      if (err instanceof Error) {\n        dispatch({\n          type: ActionType.SAVE_CELLS_ERROR,\n          payload: err.message\n        });\n      }\n    }\n  };\n};\nexport const updateCell = (id, content) => {\n  return {\n    type: ActionType.UPDATE_CELL,\n    payload: {\n      id,\n      content\n    }\n  };\n};\nexport const include_cell_global = (id, isOn) => {\n  return {\n    type: ActionType.INCLUDE_CELL_GLOBAL,\n    payload: {\n      id,\n      isOn\n    }\n  };\n};\nexport const deleteCell = id => {\n  return {\n    type: ActionType.DELETE_CELL,\n    payload: id\n  };\n};\nexport const moveCell = (id, direction) => {\n  return {\n    type: ActionType.MOVE_CELL,\n    payload: {\n      id,\n      direction\n    }\n  };\n};\nexport const insertCellAfter = (id, cellType) => {\n  return {\n    type: ActionType.INSERT_CELL_AFTER,\n    payload: {\n      id,\n      type: cellType\n    }\n  };\n};\nexport const createBundle = (cellId, input) => {\n  return async dispatch => {\n    dispatch({\n      type: ActionType.BUNDLE_START,\n      payload: {\n        cellId,\n        input\n      }\n    });\n    const result = await bundle(input);\n    dispatch({\n      type: ActionType.BUNDLE_COMPLETE,\n      payload: {\n        cellId,\n        bundle: result\n      }\n    });\n  };\n};\nexport const fetchCells = () => {\n  return async dispatch => {\n    dispatch({\n      type: ActionType.FETCH_CELLS\n    });\n    try {\n      const {\n        data\n      } = await axios.get('/cells');\n      dispatch({\n        type: ActionType.FETCH_CELLS_COMPLETE,\n        payload: data\n      });\n    } catch (err) {\n      if (err instanceof Error) {\n        dispatch({\n          type: ActionType.FETCH_CELLS_ERROR,\n          payload: err.message\n        });\n      }\n    }\n  };\n};","map":{"version":3,"names":["ActionType","axios","bundle","saveCells","dispatch","getState","cells","data","order","map","id","post","err","Error","type","SAVE_CELLS_ERROR","payload","message","updateCell","content","UPDATE_CELL","include_cell_global","isOn","INCLUDE_CELL_GLOBAL","deleteCell","DELETE_CELL","moveCell","direction","MOVE_CELL","insertCellAfter","cellType","INSERT_CELL_AFTER","createBundle","cellId","input","BUNDLE_START","result","BUNDLE_COMPLETE","fetchCells","FETCH_CELLS","get","FETCH_CELLS_COMPLETE","FETCH_CELLS_ERROR"],"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/src/state/action-creators/index.ts"],"sourcesContent":["import { Dispatch } from \"redux\";\r\nimport { ActionType } from \"../action-types\";\r\nimport axios from \"axios\";\r\nimport { Action ,\r\n        UpdateCellAction ,\r\n        DeleteCellAction ,\r\n        InsertCellAfterAction ,\r\n        INCLUDE_CELL_GLOBAL,\r\n        MoveCellAction,\r\n         Direction,\r\n        } from \"../actions\";\r\nimport { Cell, CellTypes } from \"../cell\";\r\nimport bundle from \"../../bundler\";\r\nimport { RootState } from \"..\";\r\n\r\nexport const saveCells = () => {\r\n    return async (dispatch: Dispatch<Action> , getState: () => RootState) => {\r\n        const { cells: {data, order }  } = getState();\r\n        const cells : Cell[] = order.map(id => data[id]);\r\n        try {\r\n            await axios.post('/cells' , { cells });\r\n        } catch (err) {\r\n            if(err instanceof Error){\r\n                dispatch({\r\n                type: ActionType.SAVE_CELLS_ERROR,\r\n                payload: err.message,\r\n                }\r\n            );}\r\n        }\r\n    }    \r\n}\r\n\r\nexport const updateCell = (id: string , content : string) : UpdateCellAction => {\r\n    return {\r\n        type: ActionType.UPDATE_CELL,\r\n        payload: {\r\n            id,\r\n            content,\r\n        },\r\n    };\r\n};\r\nexport const include_cell_global = (id: string , isOn : boolean) : INCLUDE_CELL_GLOBAL => {\r\n    return {\r\n        type: ActionType.INCLUDE_CELL_GLOBAL,\r\n        payload: { id , isOn }  \r\n    };\r\n};\r\n\r\nexport const deleteCell = (id:string) : DeleteCellAction => {\r\n    return {\r\n        type: ActionType.DELETE_CELL,\r\n        payload:id\r\n    };\r\n    };\r\n    \r\nexport const moveCell = (id: string , direction: Direction) : MoveCellAction=> {\r\n    return {\r\n        type: ActionType.MOVE_CELL,\r\n        payload: {\r\n            id,\r\n            direction\r\n        }\r\n    };\r\n};\r\nexport const insertCellAfter = (id: string | null, cellType: CellTypes) : InsertCellAfterAction => {\r\n    return {\r\n        type: ActionType.INSERT_CELL_AFTER,\r\n        payload: {\r\n            id,\r\n            type : cellType,\r\n        },\r\n    };\r\n};\r\n\r\nexport const createBundle = (cellId: string , input: string) => {\r\n    return async (dispatch: Dispatch<Action>) => {\r\n        dispatch({\r\n            type:ActionType.BUNDLE_START,\r\n            payload: {\r\n                cellId,      \r\n                input          \r\n            },\r\n        });\r\n\r\n        const result = await bundle(input);\r\n\r\n        dispatch({\r\n            type: ActionType.BUNDLE_COMPLETE,\r\n            payload: {\r\n                cellId,\r\n                bundle: result\r\n            }\r\n        })\r\n    };\r\n};\r\n\r\nexport const fetchCells = () => {\r\n    return async (dispatch : Dispatch<Action>) => {\r\n        dispatch({ type: ActionType.FETCH_CELLS});\r\n\r\n        try {\r\n            const {data} : {data: Cell[]} = await axios.get('/cells');\r\n            dispatch({\r\n                type: ActionType.FETCH_CELLS_COMPLETE,\r\n                payload: data\r\n            });\r\n            \r\n        } catch (err) {\r\n            if(err instanceof Error){dispatch({\r\n                type: ActionType.FETCH_CELLS_ERROR,\r\n                payload: err.message\r\n            });\r\n        }\r\n        }\r\n\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}