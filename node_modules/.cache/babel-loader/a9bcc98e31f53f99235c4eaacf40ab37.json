{"ast":null,"code":"exports.enter = {\n  table: enterTable,\n  tableData: enterCell,\n  tableHeader: enterCell,\n  tableRow: enterRow\n};\nexports.exit = {\n  codeText: exitCodeText,\n  table: exitTable,\n  tableData: exit,\n  tableHeader: exit,\n  tableRow: exit\n};\nfunction enterTable(token) {\n  this.enter({\n    type: 'table',\n    align: token._align,\n    children: []\n  }, token);\n  this.setData('inTable', true);\n}\nfunction exitTable(token) {\n  this.exit(token);\n  this.setData('inTable');\n}\nfunction enterRow(token) {\n  this.enter({\n    type: 'tableRow',\n    children: []\n  }, token);\n}\nfunction exit(token) {\n  this.exit(token);\n}\nfunction enterCell(token) {\n  this.enter({\n    type: 'tableCell',\n    children: []\n  }, token);\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\nfunction exitCodeText(token) {\n  var value = this.resume();\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace);\n  }\n  this.stack[this.stack.length - 1].value = value;\n  this.exit(token);\n}\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0;\n}","map":{"version":3,"names":["exports","enter","table","enterTable","tableData","enterCell","tableHeader","tableRow","enterRow","exit","codeText","exitCodeText","exitTable","token","type","align","_align","children","setData","value","resume","getData","replace","stack","length","$0","$1"],"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/mdast-util-gfm-table/from-markdown.js"],"sourcesContent":["exports.enter = {\n  table: enterTable,\n  tableData: enterCell,\n  tableHeader: enterCell,\n  tableRow: enterRow\n}\nexports.exit = {\n  codeText: exitCodeText,\n  table: exitTable,\n  tableData: exit,\n  tableHeader: exit,\n  tableRow: exit\n}\n\nfunction enterTable(token) {\n  this.enter({type: 'table', align: token._align, children: []}, token)\n  this.setData('inTable', true)\n}\n\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\nfunction exit(token) {\n  this.exit(token)\n}\n\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\nfunction exitCodeText(token) {\n  var value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  this.stack[this.stack.length - 1].value = value\n  this.exit(token)\n}\n\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n"],"mappings":"AAAAA,OAAO,CAACC,KAAK,GAAG;EACdC,KAAK,EAAEC,UAAU;EACjBC,SAAS,EAAEC,SAAS;EACpBC,WAAW,EAAED,SAAS;EACtBE,QAAQ,EAAEC;AACZ,CAAC;AACDR,OAAO,CAACS,IAAI,GAAG;EACbC,QAAQ,EAAEC,YAAY;EACtBT,KAAK,EAAEU,SAAS;EAChBR,SAAS,EAAEK,IAAI;EACfH,WAAW,EAAEG,IAAI;EACjBF,QAAQ,EAAEE;AACZ,CAAC;AAED,SAASN,UAAUA,CAACU,KAAK,EAAE;EACzB,IAAI,CAACZ,KAAK,CAAC;IAACa,IAAI,EAAE,OAAO;IAAEC,KAAK,EAAEF,KAAK,CAACG,MAAM;IAAEC,QAAQ,EAAE;EAAE,CAAC,EAAEJ,KAAK,CAAC;EACrE,IAAI,CAACK,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC;AAC/B;AAEA,SAASN,SAASA,CAACC,KAAK,EAAE;EACxB,IAAI,CAACJ,IAAI,CAACI,KAAK,CAAC;EAChB,IAAI,CAACK,OAAO,CAAC,SAAS,CAAC;AACzB;AAEA,SAASV,QAAQA,CAACK,KAAK,EAAE;EACvB,IAAI,CAACZ,KAAK,CAAC;IAACa,IAAI,EAAE,UAAU;IAAEG,QAAQ,EAAE;EAAE,CAAC,EAAEJ,KAAK,CAAC;AACrD;AAEA,SAASJ,IAAIA,CAACI,KAAK,EAAE;EACnB,IAAI,CAACJ,IAAI,CAACI,KAAK,CAAC;AAClB;AAEA,SAASR,SAASA,CAACQ,KAAK,EAAE;EACxB,IAAI,CAACZ,KAAK,CAAC;IAACa,IAAI,EAAE,WAAW;IAAEG,QAAQ,EAAE;EAAE,CAAC,EAAEJ,KAAK,CAAC;AACtD;;AAEA;AACA;AACA,SAASF,YAAYA,CAACE,KAAK,EAAE;EAC3B,IAAIM,KAAK,GAAG,IAAI,CAACC,MAAM,CAAC,CAAC;EAEzB,IAAI,IAAI,CAACC,OAAO,CAAC,SAAS,CAAC,EAAE;IAC3BF,KAAK,GAAGA,KAAK,CAACG,OAAO,CAAC,YAAY,EAAEA,OAAO,CAAC;EAC9C;EAEA,IAAI,CAACC,KAAK,CAAC,IAAI,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC,CAACL,KAAK,GAAGA,KAAK;EAC/C,IAAI,CAACV,IAAI,CAACI,KAAK,CAAC;AAClB;AAEA,SAASS,OAAOA,CAACG,EAAE,EAAEC,EAAE,EAAE;EACvB;EACA,OAAOA,EAAE,KAAK,GAAG,GAAGA,EAAE,GAAGD,EAAE;AAC7B"},"metadata":{},"sourceType":"script"}