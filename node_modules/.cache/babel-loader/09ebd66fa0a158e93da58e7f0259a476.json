{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.run = exports.prettyPrint = exports.print = exports.types = exports.parse = void 0;\nvar tslib_1 = require(\"tslib\");\nvar fs_1 = tslib_1.__importDefault(require(\"fs\"));\nvar types = tslib_1.__importStar(require(\"ast-types\"));\nexports.types = types;\nvar parser_1 = require(\"./lib/parser\");\nObject.defineProperty(exports, \"parse\", {\n  enumerable: true,\n  get: function get() {\n    return parser_1.parse;\n  }\n});\nvar printer_1 = require(\"./lib/printer\");\n/**\n * Traverse and potentially modify an abstract syntax tree using a\n * convenient visitor syntax:\n *\n *   recast.visit(ast, {\n *     names: [],\n *     visitIdentifier: function(path) {\n *       var node = path.value;\n *       this.visitor.names.push(node.name);\n *       this.traverse(path);\n *     }\n *   });\n */\nvar ast_types_1 = require(\"ast-types\");\nObject.defineProperty(exports, \"visit\", {\n  enumerable: true,\n  get: function get() {\n    return ast_types_1.visit;\n  }\n});\n/**\n * Reprint a modified syntax tree using as much of the original source\n * code as possible.\n */\nfunction print(node, options) {\n  return new printer_1.Printer(options).print(node);\n}\nexports.print = print;\n/**\n * Print without attempting to reuse any original source code.\n */\nfunction prettyPrint(node, options) {\n  return new printer_1.Printer(options).printGenerically(node);\n}\nexports.prettyPrint = prettyPrint;\n/**\n * Convenient command-line interface (see e.g. example/add-braces).\n */\nfunction run(transformer, options) {\n  return runFile(process.argv[2], transformer, options);\n}\nexports.run = run;\nfunction runFile(path, transformer, options) {\n  fs_1.default.readFile(path, \"utf-8\", function (err, code) {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    runString(code, transformer, options);\n  });\n}\nfunction defaultWriteback(output) {\n  process.stdout.write(output);\n}\nfunction runString(code, transformer, options) {\n  var writeback = options && options.writeback || defaultWriteback;\n  transformer(parser_1.parse(code, options), function (node) {\n    writeback(print(node, options).code);\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","run","prettyPrint","print","types","parse","tslib_1","require","fs_1","__importDefault","__importStar","parser_1","enumerable","get","printer_1","ast_types_1","visit","node","options","Printer","printGenerically","transformer","runFile","process","argv","path","default","readFile","err","code","console","error","runString","defaultWriteback","output","stdout","write","writeback"],"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/jscodeshift/node_modules/recast/main.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.run = exports.prettyPrint = exports.print = exports.types = exports.parse = void 0;\nvar tslib_1 = require(\"tslib\");\nvar fs_1 = tslib_1.__importDefault(require(\"fs\"));\nvar types = tslib_1.__importStar(require(\"ast-types\"));\nexports.types = types;\nvar parser_1 = require(\"./lib/parser\");\nObject.defineProperty(exports, \"parse\", { enumerable: true, get: function () { return parser_1.parse; } });\nvar printer_1 = require(\"./lib/printer\");\n/**\n * Traverse and potentially modify an abstract syntax tree using a\n * convenient visitor syntax:\n *\n *   recast.visit(ast, {\n *     names: [],\n *     visitIdentifier: function(path) {\n *       var node = path.value;\n *       this.visitor.names.push(node.name);\n *       this.traverse(path);\n *     }\n *   });\n */\nvar ast_types_1 = require(\"ast-types\");\nObject.defineProperty(exports, \"visit\", { enumerable: true, get: function () { return ast_types_1.visit; } });\n/**\n * Reprint a modified syntax tree using as much of the original source\n * code as possible.\n */\nfunction print(node, options) {\n    return new printer_1.Printer(options).print(node);\n}\nexports.print = print;\n/**\n * Print without attempting to reuse any original source code.\n */\nfunction prettyPrint(node, options) {\n    return new printer_1.Printer(options).printGenerically(node);\n}\nexports.prettyPrint = prettyPrint;\n/**\n * Convenient command-line interface (see e.g. example/add-braces).\n */\nfunction run(transformer, options) {\n    return runFile(process.argv[2], transformer, options);\n}\nexports.run = run;\nfunction runFile(path, transformer, options) {\n    fs_1.default.readFile(path, \"utf-8\", function (err, code) {\n        if (err) {\n            console.error(err);\n            return;\n        }\n        runString(code, transformer, options);\n    });\n}\nfunction defaultWriteback(output) {\n    process.stdout.write(output);\n}\nfunction runString(code, transformer, options) {\n    var writeback = options && options.writeback || defaultWriteback;\n    transformer(parser_1.parse(code, options), function (node) {\n        writeback(print(node, options).code);\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}