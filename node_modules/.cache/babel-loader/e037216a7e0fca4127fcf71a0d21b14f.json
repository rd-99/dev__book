{"ast":null,"code":"Prism.languages.autoit = {\n  'comment': [/;.*/, {\n    // The multi-line comments delimiters can actually be commented out with \";\"\n    pattern: /(^[\\t ]*)#(?:comments-start|cs)[\\s\\S]*?^[ \\t]*#(?:comments-end|ce)/m,\n    lookbehind: true\n  }],\n  'url': {\n    pattern: /(^[\\t ]*#include\\s+)(?:<[^\\r\\n>]+>|\"[^\\r\\n\"]+\")/m,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\1\\1|(?!\\1)[^\\r\\n])*\\1/,\n    greedy: true,\n    inside: {\n      'variable': /([%$@])\\w+\\1/\n    }\n  },\n  'directive': {\n    pattern: /(^[\\t ]*)#\\w+/m,\n    lookbehind: true,\n    alias: 'keyword'\n  },\n  'function': /\\b\\w+(?=\\()/,\n  // Variables and macros\n  'variable': /[$@]\\w+/,\n  'keyword': /\\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\\b/i,\n  'number': /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n  'boolean': /\\b(?:True|False)\\b/i,\n  'operator': /<[=>]?|[-+*\\/=&>]=?|[?^]|\\b(?:And|Or|Not)\\b/i,\n  'punctuation': /[\\[\\]().,:]/\n};","map":{"version":3,"names":["Prism","languages","autoit","pattern","lookbehind","greedy","inside","alias"],"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-autoit.js"],"sourcesContent":["Prism.languages.autoit = {\n\t'comment': [\n\t\t/;.*/,\n\t\t{\n\t\t\t// The multi-line comments delimiters can actually be commented out with \";\"\n\t\t\tpattern: /(^[\\t ]*)#(?:comments-start|cs)[\\s\\S]*?^[ \\t]*#(?:comments-end|ce)/m,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'url': {\n\t\tpattern: /(^[\\t ]*#include\\s+)(?:<[^\\r\\n>]+>|\"[^\\r\\n\"]+\")/m,\n\t\tlookbehind: true\n\t},\n\t'string': {\n\t\tpattern: /([\"'])(?:\\1\\1|(?!\\1)[^\\r\\n])*\\1/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'variable': /([%$@])\\w+\\1/\n\t\t}\n\t},\n\t'directive': {\n\t\tpattern: /(^[\\t ]*)#\\w+/m,\n\t\tlookbehind: true,\n\t\talias: 'keyword'\n\t},\n\t'function': /\\b\\w+(?=\\()/,\n\t// Variables and macros\n\t'variable': /[$@]\\w+/,\n\t'keyword': /\\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\\b/i,\n\t'number': /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n\t'boolean': /\\b(?:True|False)\\b/i,\n\t'operator': /<[=>]?|[-+*\\/=&>]=?|[?^]|\\b(?:And|Or|Not)\\b/i,\n\t'punctuation': /[\\[\\]().,:]/\n};\n"],"mappings":"AAAAA,KAAK,CAACC,SAAS,CAACC,MAAM,GAAG;EACxB,SAAS,EAAE,CACV,KAAK,EACL;IACC;IACAC,OAAO,EAAE,qEAAqE;IAC9EC,UAAU,EAAE;EACb,CAAC,CACD;EACD,KAAK,EAAE;IACND,OAAO,EAAE,kDAAkD;IAC3DC,UAAU,EAAE;EACb,CAAC;EACD,QAAQ,EAAE;IACTD,OAAO,EAAE,iCAAiC;IAC1CE,MAAM,EAAE,IAAI;IACZC,MAAM,EAAE;MACP,UAAU,EAAE;IACb;EACD,CAAC;EACD,WAAW,EAAE;IACZH,OAAO,EAAE,gBAAgB;IACzBC,UAAU,EAAE,IAAI;IAChBG,KAAK,EAAE;EACR,CAAC;EACD,UAAU,EAAE,aAAa;EACzB;EACA,UAAU,EAAE,SAAS;EACrB,SAAS,EAAE,wOAAwO;EACnP,QAAQ,EAAE,iDAAiD;EAC3D,SAAS,EAAE,qBAAqB;EAChC,UAAU,EAAE,8CAA8C;EAC1D,aAAa,EAAE;AAChB,CAAC"},"metadata":{},"sourceType":"script"}