{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nconst babylon = require('@babel/parser');\n\n// These are the options that were the default of the Babel5 parse function\n// see https://github.com/babel/babel/blob/5.x/packages/babel/src/api/node.js#L81\nconst options = {\n  sourceType: 'module',\n  allowHashBang: true,\n  ecmaVersion: Infinity,\n  allowImportExportEverywhere: true,\n  allowReturnOutsideFunction: true,\n  startLine: 1,\n  tokens: true,\n  plugins: ['estree', 'jsx', 'asyncGenerators', 'classProperties', 'doExpressions', 'exportExtensions', 'functionBind', 'functionSent', 'objectRestSpread', 'dynamicImport', 'nullishCoalescingOperator', 'optionalChaining']\n};\n\n/**\n * Wrapper to set default options. Doesn't accept custom options because in that\n * case babylon should be used instead.\n */\nmodule.exports = function () {\n  return {\n    parse(code) {\n      return babylon.parse(code, options);\n    }\n  };\n};","map":{"version":3,"names":["babylon","require","options","sourceType","allowHashBang","ecmaVersion","Infinity","allowImportExportEverywhere","allowReturnOutsideFunction","startLine","tokens","plugins","module","exports","parse","code"],"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/jscodeshift/parser/babel5Compat.js"],"sourcesContent":["\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nconst babylon = require('@babel/parser');\n\n// These are the options that were the default of the Babel5 parse function\n// see https://github.com/babel/babel/blob/5.x/packages/babel/src/api/node.js#L81\nconst options = {\n  sourceType: 'module',\n  allowHashBang: true,\n  ecmaVersion: Infinity,\n  allowImportExportEverywhere: true,\n  allowReturnOutsideFunction: true,\n  startLine: 1,\n  tokens: true,\n  plugins: [\n    'estree',\n    'jsx',\n    'asyncGenerators',\n    'classProperties',\n    'doExpressions',\n    'exportExtensions',\n    'functionBind',\n    'functionSent',\n    'objectRestSpread',\n    'dynamicImport',\n    'nullishCoalescingOperator',\n    'optionalChaining',\n  ],\n};\n\n/**\n * Wrapper to set default options. Doesn't accept custom options because in that\n * case babylon should be used instead.\n */\nmodule.exports = function() {\n  return {\n    parse(code) {\n      return babylon.parse(code, options);\n    },\n  };\n};\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,OAAO,GAAGC,OAAO,CAAC,eAAe,CAAC;;AAExC;AACA;AACA,MAAMC,OAAO,GAAG;EACdC,UAAU,EAAE,QAAQ;EACpBC,aAAa,EAAE,IAAI;EACnBC,WAAW,EAAEC,QAAQ;EACrBC,2BAA2B,EAAE,IAAI;EACjCC,0BAA0B,EAAE,IAAI;EAChCC,SAAS,EAAE,CAAC;EACZC,MAAM,EAAE,IAAI;EACZC,OAAO,EAAE,CACP,QAAQ,EACR,KAAK,EACL,iBAAiB,EACjB,iBAAiB,EACjB,eAAe,EACf,kBAAkB,EAClB,cAAc,EACd,cAAc,EACd,kBAAkB,EAClB,eAAe,EACf,2BAA2B,EAC3B,kBAAkB;AAEtB,CAAC;;AAED;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,YAAW;EAC1B,OAAO;IACLC,KAAKA,CAACC,IAAI,EAAE;MACV,OAAOf,OAAO,CAACc,KAAK,CAACC,IAAI,EAAEb,OAAO,CAAC;IACrC;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script"}