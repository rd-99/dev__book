{"ast":null,"code":"(function (Prism) {\n  var typescript = Prism.util.clone(Prism.languages.typescript);\n  Prism.languages.tsx = Prism.languages.extend('jsx', typescript);\n\n  // This will prevent collisions between TSX tags and TS generic types.\n  // Idea by https://github.com/karlhorky\n  // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n  var tag = Prism.languages.tsx.tag;\n  tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n  tag.lookbehind = true;\n})(Prism);","map":{"version":3,"names":["Prism","typescript","util","clone","languages","tsx","extend","tag","pattern","RegExp","source","flags","lookbehind"],"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-tsx.js"],"sourcesContent":["(function (Prism) {\n\tvar typescript = Prism.util.clone(Prism.languages.typescript);\n\tPrism.languages.tsx = Prism.languages.extend('jsx', typescript);\n\n\t// This will prevent collisions between TSX tags and TS generic types.\n\t// Idea by https://github.com/karlhorky\n\t// Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\tvar tag = Prism.languages.tsx.tag;\n\ttag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n\ttag.lookbehind = true;\n}(Prism));\n"],"mappings":"AAAC,WAAUA,KAAK,EAAE;EACjB,IAAIC,UAAU,GAAGD,KAAK,CAACE,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,SAAS,CAACH,UAAU,CAAC;EAC7DD,KAAK,CAACI,SAAS,CAACC,GAAG,GAAGL,KAAK,CAACI,SAAS,CAACE,MAAM,CAAC,KAAK,EAAEL,UAAU,CAAC;;EAE/D;EACA;EACA;EACA,IAAIM,GAAG,GAAGP,KAAK,CAACI,SAAS,CAACC,GAAG,CAACE,GAAG;EACjCA,GAAG,CAACC,OAAO,GAAGC,MAAM,CAAC,oBAAoB,CAACC,MAAM,GAAG,KAAK,GAAGH,GAAG,CAACC,OAAO,CAACE,MAAM,GAAG,GAAG,EAAEH,GAAG,CAACC,OAAO,CAACG,KAAK,CAAC;EACvGJ,GAAG,CAACK,UAAU,GAAG,IAAI;AACtB,CAAC,EAACZ,KAAK,CAAC"},"metadata":{},"sourceType":"script"}