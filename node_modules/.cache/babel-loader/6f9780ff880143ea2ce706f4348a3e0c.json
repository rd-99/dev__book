{"ast":null,"code":"Prism.languages.groovy = Prism.languages.extend('clike', {\n  'string': [{\n    // https://groovy-lang.org/syntax.html#_dollar_slashy_string\n    pattern: /(\"\"\"|''')(?:[^\\\\]|\\\\[\\s\\S])*?\\1|\\$\\/(?:[^/$]|\\$(?:[/$]|(?![/$]))|\\/(?!\\$))*\\/\\$/,\n    greedy: true\n  }, {\n    // TODO: Slash strings (e.g. /foo/) can contain line breaks but this will cause a lot of trouble with\n    // simple division (see JS regex), so find a fix maybe?\n    pattern: /([\"'/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  }],\n  'keyword': /\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,\n  'number': /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?\\d+)?)[glidf]?\\b/i,\n  'operator': {\n    pattern: /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.\\.(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,\n    lookbehind: true\n  },\n  'punctuation': /\\.+|[{}[\\];(),:$]/\n});\nPrism.languages.insertBefore('groovy', 'string', {\n  'shebang': {\n    pattern: /#!.+/,\n    alias: 'comment'\n  }\n});\nPrism.languages.insertBefore('groovy', 'punctuation', {\n  'spock-block': /\\b(?:setup|given|when|then|and|cleanup|expect|where):/\n});\nPrism.languages.insertBefore('groovy', 'function', {\n  'annotation': {\n    pattern: /(^|[^.])@\\w+/,\n    lookbehind: true,\n    alias: 'punctuation'\n  }\n});\n\n// Handle string interpolation\nPrism.hooks.add('wrap', function (env) {\n  if (env.language === 'groovy' && env.type === 'string') {\n    var delimiter = env.content[0];\n    if (delimiter != \"'\") {\n      var pattern = /([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\n      if (delimiter === '$') {\n        pattern = /([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\n      }\n\n      // To prevent double HTML-encoding we have to decode env.content first\n      env.content = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n      env.content = Prism.highlight(env.content, {\n        'expression': {\n          pattern: pattern,\n          lookbehind: true,\n          inside: Prism.languages.groovy\n        }\n      });\n      env.classes.push(delimiter === '/' ? 'regex' : 'gstring');\n    }\n  }\n});","map":{"version":3,"names":["Prism","languages","groovy","extend","pattern","greedy","lookbehind","insertBefore","alias","hooks","add","env","language","type","delimiter","content","replace","highlight","inside","classes","push"],"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-groovy.js"],"sourcesContent":["Prism.languages.groovy = Prism.languages.extend('clike', {\n\t'string': [\n\t\t{\n\t\t\t// https://groovy-lang.org/syntax.html#_dollar_slashy_string\n\t\t\tpattern: /(\"\"\"|''')(?:[^\\\\]|\\\\[\\s\\S])*?\\1|\\$\\/(?:[^/$]|\\$(?:[/$]|(?![/$]))|\\/(?!\\$))*\\/\\$/,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\t// TODO: Slash strings (e.g. /foo/) can contain line breaks but this will cause a lot of trouble with\n\t\t\t// simple division (see JS regex), so find a fix maybe?\n\t\t\tpattern: /([\"'/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'keyword': /\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,\n\t'number': /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?\\d+)?)[glidf]?\\b/i,\n\t'operator': {\n\t\tpattern: /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.\\.(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,\n\t\tlookbehind: true\n\t},\n\t'punctuation': /\\.+|[{}[\\];(),:$]/\n});\n\nPrism.languages.insertBefore('groovy', 'string', {\n\t'shebang': {\n\t\tpattern: /#!.+/,\n\t\talias: 'comment'\n\t}\n});\n\nPrism.languages.insertBefore('groovy', 'punctuation', {\n\t'spock-block': /\\b(?:setup|given|when|then|and|cleanup|expect|where):/\n});\n\nPrism.languages.insertBefore('groovy', 'function', {\n\t'annotation': {\n\t\tpattern: /(^|[^.])@\\w+/,\n\t\tlookbehind: true,\n\t\talias: 'punctuation'\n\t}\n});\n\n// Handle string interpolation\nPrism.hooks.add('wrap', function (env) {\n\tif (env.language === 'groovy' && env.type === 'string') {\n\t\tvar delimiter = env.content[0];\n\n\t\tif (delimiter != \"'\") {\n\t\t\tvar pattern = /([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\n\t\t\tif (delimiter === '$') {\n\t\t\t\tpattern = /([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\n\t\t\t}\n\n\t\t\t// To prevent double HTML-encoding we have to decode env.content first\n\t\t\tenv.content = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n\n\t\t\tenv.content = Prism.highlight(env.content, {\n\t\t\t\t'expression': {\n\t\t\t\t\tpattern: pattern,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\tinside: Prism.languages.groovy\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tenv.classes.push(delimiter === '/' ? 'regex' : 'gstring');\n\t\t}\n\t}\n});\n"],"mappings":"AAAAA,KAAK,CAACC,SAAS,CAACC,MAAM,GAAGF,KAAK,CAACC,SAAS,CAACE,MAAM,CAAC,OAAO,EAAE;EACxD,QAAQ,EAAE,CACT;IACC;IACAC,OAAO,EAAE,iFAAiF;IAC1FC,MAAM,EAAE;EACT,CAAC,EACD;IACC;IACA;IACAD,OAAO,EAAE,mCAAmC;IAC5CC,MAAM,EAAE;EACT,CAAC,CACD;EACD,SAAS,EAAE,4WAA4W;EACvX,QAAQ,EAAE,4FAA4F;EACtG,UAAU,EAAE;IACXD,OAAO,EAAE,mJAAmJ;IAC5JE,UAAU,EAAE;EACb,CAAC;EACD,aAAa,EAAE;AAChB,CAAC,CAAC;AAEFN,KAAK,CAACC,SAAS,CAACM,YAAY,CAAC,QAAQ,EAAE,QAAQ,EAAE;EAChD,SAAS,EAAE;IACVH,OAAO,EAAE,MAAM;IACfI,KAAK,EAAE;EACR;AACD,CAAC,CAAC;AAEFR,KAAK,CAACC,SAAS,CAACM,YAAY,CAAC,QAAQ,EAAE,aAAa,EAAE;EACrD,aAAa,EAAE;AAChB,CAAC,CAAC;AAEFP,KAAK,CAACC,SAAS,CAACM,YAAY,CAAC,QAAQ,EAAE,UAAU,EAAE;EAClD,YAAY,EAAE;IACbH,OAAO,EAAE,cAAc;IACvBE,UAAU,EAAE,IAAI;IAChBE,KAAK,EAAE;EACR;AACD,CAAC,CAAC;;AAEF;AACAR,KAAK,CAACS,KAAK,CAACC,GAAG,CAAC,MAAM,EAAE,UAAUC,GAAG,EAAE;EACtC,IAAIA,GAAG,CAACC,QAAQ,KAAK,QAAQ,IAAID,GAAG,CAACE,IAAI,KAAK,QAAQ,EAAE;IACvD,IAAIC,SAAS,GAAGH,GAAG,CAACI,OAAO,CAAC,CAAC,CAAC;IAE9B,IAAID,SAAS,IAAI,GAAG,EAAE;MACrB,IAAIV,OAAO,GAAG,iCAAiC;MAC/C,IAAIU,SAAS,KAAK,GAAG,EAAE;QACtBV,OAAO,GAAG,iCAAiC;MAC5C;;MAEA;MACAO,GAAG,CAACI,OAAO,GAAGJ,GAAG,CAACI,OAAO,CAACC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;MAEtEL,GAAG,CAACI,OAAO,GAAGf,KAAK,CAACiB,SAAS,CAACN,GAAG,CAACI,OAAO,EAAE;QAC1C,YAAY,EAAE;UACbX,OAAO,EAAEA,OAAO;UAChBE,UAAU,EAAE,IAAI;UAChBY,MAAM,EAAElB,KAAK,CAACC,SAAS,CAACC;QACzB;MACD,CAAC,CAAC;MAEFS,GAAG,CAACQ,OAAO,CAACC,IAAI,CAACN,SAAS,KAAK,GAAG,GAAG,OAAO,GAAG,SAAS,CAAC;IAC1D;EACD;AACD,CAAC,CAAC"},"metadata":{},"sourceType":"script"}