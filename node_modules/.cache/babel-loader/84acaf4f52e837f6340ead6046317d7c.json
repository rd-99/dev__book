{"ast":null,"code":"!function (e) {\n  var t = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,\n    n = \"\\\\b(?!<keyword>)\\\\w+(?:\\\\s*\\\\.\\\\s*\\\\w+)*\\\\b\".replace(/<keyword>/g, function () {\n      return t.source;\n    });\n  e.languages.cpp = e.languages.extend(\"c\", {\n    \"class-name\": [{\n      pattern: RegExp(\"(\\\\b(?:class|concept|enum|struct|typename)\\\\s+)(?!<keyword>)\\\\w+\".replace(/<keyword>/g, function () {\n        return t.source;\n      })),\n      lookbehind: !0\n    }, /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],\n    keyword: t,\n    number: {\n      pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n      greedy: !0\n    },\n    operator: />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n    boolean: /\\b(?:true|false)\\b/\n  }), e.languages.insertBefore(\"cpp\", \"string\", {\n    module: {\n      pattern: RegExp('(\\\\b(?:module|import)\\\\s+)(?:\"(?:\\\\\\\\(?:\\r\\n|[^])|[^\"\\\\\\\\\\r\\n])*\"|<[^<>\\r\\n]*>|' + \"<mod-name>(?:\\\\s*:\\\\s*<mod-name>)?|:\\\\s*<mod-name>\".replace(/<mod-name>/g, function () {\n        return n;\n      }) + \")\"),\n      lookbehind: !0,\n      greedy: !0,\n      inside: {\n        string: /^[<\"][\\s\\S]+/,\n        operator: /:/,\n        punctuation: /\\./\n      }\n    },\n    \"raw-string\": {\n      pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n      alias: \"string\",\n      greedy: !0\n    }\n  }), e.languages.insertBefore(\"cpp\", \"keyword\", {\n    \"generic-function\": {\n      pattern: /\\b[a-z_]\\w*\\s*<(?:[^<>]|<(?:[^<>])*>)*>(?=\\s*\\()/i,\n      inside: {\n        function: /^\\w+/,\n        generic: {\n          pattern: /<[\\s\\S]+/,\n          alias: \"class-name\",\n          inside: e.languages.cpp\n        }\n      }\n    }\n  }), e.languages.insertBefore(\"cpp\", \"operator\", {\n    \"double-colon\": {\n      pattern: /::/,\n      alias: \"punctuation\"\n    }\n  }), e.languages.insertBefore(\"cpp\", \"class-name\", {\n    \"base-clause\": {\n      pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n      lookbehind: !0,\n      greedy: !0,\n      inside: e.languages.extend(\"cpp\", {})\n    }\n  }), e.languages.insertBefore(\"inside\", \"double-colon\", {\n    \"class-name\": /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n  }, e.languages.cpp[\"base-clause\"]);\n}(Prism);","map":{"version":3,"names":["e","t","n","replace","source","languages","cpp","extend","pattern","RegExp","lookbehind","keyword","number","greedy","operator","boolean","insertBefore","module","inside","string","punctuation","alias","function","generic","Prism"],"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-cpp.min.js"],"sourcesContent":["!function(e){var t=/\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,n=\"\\\\b(?!<keyword>)\\\\w+(?:\\\\s*\\\\.\\\\s*\\\\w+)*\\\\b\".replace(/<keyword>/g,function(){return t.source});e.languages.cpp=e.languages.extend(\"c\",{\"class-name\":[{pattern:RegExp(\"(\\\\b(?:class|concept|enum|struct|typename)\\\\s+)(?!<keyword>)\\\\w+\".replace(/<keyword>/g,function(){return t.source})),lookbehind:!0},/\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/,/\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i,/\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],keyword:t,number:{pattern:/(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,greedy:!0},operator:/>>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,boolean:/\\b(?:true|false)\\b/}),e.languages.insertBefore(\"cpp\",\"string\",{module:{pattern:RegExp('(\\\\b(?:module|import)\\\\s+)(?:\"(?:\\\\\\\\(?:\\r\\n|[^])|[^\"\\\\\\\\\\r\\n])*\"|<[^<>\\r\\n]*>|'+\"<mod-name>(?:\\\\s*:\\\\s*<mod-name>)?|:\\\\s*<mod-name>\".replace(/<mod-name>/g,function(){return n})+\")\"),lookbehind:!0,greedy:!0,inside:{string:/^[<\"][\\s\\S]+/,operator:/:/,punctuation:/\\./}},\"raw-string\":{pattern:/R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,alias:\"string\",greedy:!0}}),e.languages.insertBefore(\"cpp\",\"keyword\",{\"generic-function\":{pattern:/\\b[a-z_]\\w*\\s*<(?:[^<>]|<(?:[^<>])*>)*>(?=\\s*\\()/i,inside:{function:/^\\w+/,generic:{pattern:/<[\\s\\S]+/,alias:\"class-name\",inside:e.languages.cpp}}}}),e.languages.insertBefore(\"cpp\",\"operator\",{\"double-colon\":{pattern:/::/,alias:\"punctuation\"}}),e.languages.insertBefore(\"cpp\",\"class-name\",{\"base-clause\":{pattern:/(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,lookbehind:!0,greedy:!0,inside:e.languages.extend(\"cpp\",{})}}),e.languages.insertBefore(\"inside\",\"double-colon\",{\"class-name\":/\\b[a-z_]\\w*\\b(?!\\s*::)/i},e.languages.cpp[\"base-clause\"])}(Prism);"],"mappings":"AAAA,CAAC,UAASA,CAAC,EAAC;EAAC,IAAIC,CAAC,GAAC,msBAAmsB;IAACC,CAAC,GAAC,6CAA6C,CAACC,OAAO,CAAC,YAAY,EAAC,YAAU;MAAC,OAAOF,CAAC,CAACG,MAAM;IAAA,CAAC,CAAC;EAACJ,CAAC,CAACK,SAAS,CAACC,GAAG,GAACN,CAAC,CAACK,SAAS,CAACE,MAAM,CAAC,GAAG,EAAC;IAAC,YAAY,EAAC,CAAC;MAACC,OAAO,EAACC,MAAM,CAAC,kEAAkE,CAACN,OAAO,CAAC,YAAY,EAAC,YAAU;QAAC,OAAOF,CAAC,CAACG,MAAM;MAAA,CAAC,CAAC,CAAC;MAACM,UAAU,EAAC,CAAC;IAAC,CAAC,EAAC,gCAAgC,EAAC,mCAAmC,EAAC,gEAAgE,CAAC;IAACC,OAAO,EAACV,CAAC;IAACW,MAAM,EAAC;MAACJ,OAAO,EAAC,gJAAgJ;MAACK,MAAM,EAAC,CAAC;IAAC,CAAC;IAACC,QAAQ,EAAC,wHAAwH;IAACC,OAAO,EAAC;EAAoB,CAAC,CAAC,EAACf,CAAC,CAACK,SAAS,CAACW,YAAY,CAAC,KAAK,EAAC,QAAQ,EAAC;IAACC,MAAM,EAAC;MAACT,OAAO,EAACC,MAAM,CAAC,iFAAiF,GAAC,oDAAoD,CAACN,OAAO,CAAC,aAAa,EAAC,YAAU;QAAC,OAAOD,CAAC;MAAA,CAAC,CAAC,GAAC,GAAG,CAAC;MAACQ,UAAU,EAAC,CAAC,CAAC;MAACG,MAAM,EAAC,CAAC,CAAC;MAACK,MAAM,EAAC;QAACC,MAAM,EAAC,cAAc;QAACL,QAAQ,EAAC,GAAG;QAACM,WAAW,EAAC;MAAI;IAAC,CAAC;IAAC,YAAY,EAAC;MAACZ,OAAO,EAAC,mCAAmC;MAACa,KAAK,EAAC,QAAQ;MAACR,MAAM,EAAC,CAAC;IAAC;EAAC,CAAC,CAAC,EAACb,CAAC,CAACK,SAAS,CAACW,YAAY,CAAC,KAAK,EAAC,SAAS,EAAC;IAAC,kBAAkB,EAAC;MAACR,OAAO,EAAC,mDAAmD;MAACU,MAAM,EAAC;QAACI,QAAQ,EAAC,MAAM;QAACC,OAAO,EAAC;UAACf,OAAO,EAAC,UAAU;UAACa,KAAK,EAAC,YAAY;UAACH,MAAM,EAAClB,CAAC,CAACK,SAAS,CAACC;QAAG;MAAC;IAAC;EAAC,CAAC,CAAC,EAACN,CAAC,CAACK,SAAS,CAACW,YAAY,CAAC,KAAK,EAAC,UAAU,EAAC;IAAC,cAAc,EAAC;MAACR,OAAO,EAAC,IAAI;MAACa,KAAK,EAAC;IAAa;EAAC,CAAC,CAAC,EAACrB,CAAC,CAACK,SAAS,CAACW,YAAY,CAAC,KAAK,EAAC,YAAY,EAAC;IAAC,aAAa,EAAC;MAACR,OAAO,EAAC,4EAA4E;MAACE,UAAU,EAAC,CAAC,CAAC;MAACG,MAAM,EAAC,CAAC,CAAC;MAACK,MAAM,EAAClB,CAAC,CAACK,SAAS,CAACE,MAAM,CAAC,KAAK,EAAC,CAAC,CAAC;IAAC;EAAC,CAAC,CAAC,EAACP,CAAC,CAACK,SAAS,CAACW,YAAY,CAAC,QAAQ,EAAC,cAAc,EAAC;IAAC,YAAY,EAAC;EAAyB,CAAC,EAAChB,CAAC,CAACK,SAAS,CAACC,GAAG,CAAC,aAAa,CAAC,CAAC;AAAA,CAAC,CAACkB,KAAK,CAAC"},"metadata":{},"sourceType":"script"}