{"ast":null,"code":"(function (Prism) {\n  var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;\n  Prism.languages.soy = {\n    'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n      pattern: /(\\s)\\/\\/.*/,\n      lookbehind: true,\n      greedy: true\n    }],\n    'command-arg': {\n      pattern: /(\\{+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n      lookbehind: true,\n      alias: 'string',\n      inside: {\n        'punctuation': /\\./\n      }\n    },\n    'parameter': {\n      pattern: /(\\{+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    'keyword': [{\n      pattern: /(\\{+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n      lookbehind: true\n    }, /\\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\\b/],\n    'delimiter': {\n      pattern: /^\\{+\\/?|\\/?\\}+$/,\n      alias: 'punctuation'\n    },\n    'property': /\\w+(?==)/,\n    'variable': {\n      pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+\\]))*/,\n      inside: {\n        'string': {\n          pattern: stringPattern,\n          greedy: true\n        },\n        'number': numberPattern,\n        'punctuation': /[\\[\\].?]/\n      }\n    },\n    'string': {\n      pattern: stringPattern,\n      greedy: true\n    },\n    'function': [/\\w+(?=\\()/, {\n      pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n      lookbehind: true\n    }],\n    'boolean': /\\b(?:true|false)\\b/,\n    'number': numberPattern,\n    'operator': /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n    'punctuation': /[{}()\\[\\]|.,:]/\n  };\n\n  // Tokenize all inline Soy expressions\n  Prism.hooks.add('before-tokenize', function (env) {\n    var soyPattern = /\\{\\{.+?\\}\\}|\\{.+?\\}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g;\n    var soyLitteralStart = '{literal}';\n    var soyLitteralEnd = '{/literal}';\n    var soyLitteralMode = false;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'soy', soyPattern, function (match) {\n      // Soy tags inside {literal} block are ignored\n      if (match === soyLitteralEnd) {\n        soyLitteralMode = false;\n      }\n      if (!soyLitteralMode) {\n        if (match === soyLitteralStart) {\n          soyLitteralMode = true;\n        }\n        return true;\n      }\n      return false;\n    });\n  });\n\n  // Re-insert the tokens after tokenizing\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy');\n  });\n})(Prism);","map":{"version":3,"names":["Prism","stringPattern","numberPattern","languages","soy","pattern","lookbehind","greedy","alias","inside","hooks","add","env","soyPattern","soyLitteralStart","soyLitteralEnd","soyLitteralMode","buildPlaceholders","match","tokenizePlaceholders"],"sources":["C:/Users/Acer/Desktop/dev__book/dev__book/node_modules/prismjs/components/prism-soy.js"],"sourcesContent":["(function (Prism) {\n\tvar stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n\tvar numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;\n\n\tPrism.languages.soy = {\n\t\t'comment': [\n\t\t\t/\\/\\*[\\s\\S]*?\\*\\//,\n\t\t\t{\n\t\t\t\tpattern: /(\\s)\\/\\/.*/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true\n\t\t\t}\n\t\t],\n\t\t'command-arg': {\n\t\t\tpattern: /(\\{+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'punctuation': /\\./\n\t\t\t}\n\t\t},\n\t\t'parameter': {\n\t\t\tpattern: /(\\{+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'variable'\n\t\t},\n\t\t'keyword': [\n\t\t\t{\n\t\t\t\tpattern: /(\\{+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t/\\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\\b/\n\t\t],\n\t\t'delimiter': {\n\t\t\tpattern: /^\\{+\\/?|\\/?\\}+$/,\n\t\t\talias: 'punctuation'\n\t\t},\n\t\t'property': /\\w+(?==)/,\n\t\t'variable': {\n\t\t\tpattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+\\]))*/,\n\t\t\tinside: {\n\t\t\t\t'string': {\n\t\t\t\t\tpattern: stringPattern,\n\t\t\t\t\tgreedy: true\n\t\t\t\t},\n\t\t\t\t'number': numberPattern,\n\t\t\t\t'punctuation': /[\\[\\].?]/\n\t\t\t}\n\t\t},\n\t\t'string': {\n\t\t\tpattern: stringPattern,\n\t\t\tgreedy: true\n\t\t},\n\t\t'function': [\n\t\t\t/\\w+(?=\\()/,\n\t\t\t{\n\t\t\t\tpattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t],\n\t\t'boolean': /\\b(?:true|false)\\b/,\n\t\t'number': numberPattern,\n\t\t'operator': /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n\t\t'punctuation': /[{}()\\[\\]|.,:]/\n\t};\n\n\t// Tokenize all inline Soy expressions\n\tPrism.hooks.add('before-tokenize', function (env) {\n\t\tvar soyPattern = /\\{\\{.+?\\}\\}|\\{.+?\\}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g;\n\t\tvar soyLitteralStart = '{literal}';\n\t\tvar soyLitteralEnd = '{/literal}';\n\t\tvar soyLitteralMode = false;\n\n\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'soy', soyPattern, function (match) {\n\t\t\t// Soy tags inside {literal} block are ignored\n\t\t\tif (match === soyLitteralEnd) {\n\t\t\t\tsoyLitteralMode = false;\n\t\t\t}\n\n\t\t\tif (!soyLitteralMode) {\n\t\t\t\tif (match === soyLitteralStart) {\n\t\t\t\t\tsoyLitteralMode = true;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t});\n\n\t// Re-insert the tokens after tokenizing\n\tPrism.hooks.add('after-tokenize', function (env) {\n\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'soy');\n\t});\n\n}(Prism));\n"],"mappings":"AAAC,WAAUA,KAAK,EAAE;EACjB,IAAIC,aAAa,GAAG,gDAAgD;EACpE,IAAIC,aAAa,GAAG,mDAAmD;EAEvEF,KAAK,CAACG,SAAS,CAACC,GAAG,GAAG;IACrB,SAAS,EAAE,CACV,kBAAkB,EAClB;MACCC,OAAO,EAAE,YAAY;MACrBC,UAAU,EAAE,IAAI;MAChBC,MAAM,EAAE;IACT,CAAC,CACD;IACD,aAAa,EAAE;MACdF,OAAO,EAAE,yFAAyF;MAClGC,UAAU,EAAE,IAAI;MAChBE,KAAK,EAAE,QAAQ;MACfC,MAAM,EAAE;QACP,aAAa,EAAE;MAChB;IACD,CAAC;IACD,WAAW,EAAE;MACZJ,OAAO,EAAE,mCAAmC;MAC5CC,UAAU,EAAE,IAAI;MAChBE,KAAK,EAAE;IACR,CAAC;IACD,SAAS,EAAE,CACV;MACCH,OAAO,EAAE,kNAAkN;MAC3NC,UAAU,EAAE;IACb,CAAC,EACD,yFAAyF,CACzF;IACD,WAAW,EAAE;MACZD,OAAO,EAAE,iBAAiB;MAC1BG,KAAK,EAAE;IACR,CAAC;IACD,UAAU,EAAE,UAAU;IACtB,UAAU,EAAE;MACXH,OAAO,EAAE,0CAA0C;MACnDI,MAAM,EAAE;QACP,QAAQ,EAAE;UACTJ,OAAO,EAAEJ,aAAa;UACtBM,MAAM,EAAE;QACT,CAAC;QACD,QAAQ,EAAEL,aAAa;QACvB,aAAa,EAAE;MAChB;IACD,CAAC;IACD,QAAQ,EAAE;MACTG,OAAO,EAAEJ,aAAa;MACtBM,MAAM,EAAE;IACT,CAAC;IACD,UAAU,EAAE,CACX,WAAW,EACX;MACCF,OAAO,EAAE,mBAAmB;MAC5BC,UAAU,EAAE;IACb,CAAC,CACD;IACD,SAAS,EAAE,oBAAoB;IAC/B,QAAQ,EAAEJ,aAAa;IACvB,UAAU,EAAE,gDAAgD;IAC5D,aAAa,EAAE;EAChB,CAAC;;EAED;EACAF,KAAK,CAACU,KAAK,CAACC,GAAG,CAAC,iBAAiB,EAAE,UAAUC,GAAG,EAAE;IACjD,IAAIC,UAAU,GAAG,gDAAgD;IACjE,IAAIC,gBAAgB,GAAG,WAAW;IAClC,IAAIC,cAAc,GAAG,YAAY;IACjC,IAAIC,eAAe,GAAG,KAAK;IAE3BhB,KAAK,CAACG,SAAS,CAAC,mBAAmB,CAAC,CAACc,iBAAiB,CAACL,GAAG,EAAE,KAAK,EAAEC,UAAU,EAAE,UAAUK,KAAK,EAAE;MAC/F;MACA,IAAIA,KAAK,KAAKH,cAAc,EAAE;QAC7BC,eAAe,GAAG,KAAK;MACxB;MAEA,IAAI,CAACA,eAAe,EAAE;QACrB,IAAIE,KAAK,KAAKJ,gBAAgB,EAAE;UAC/BE,eAAe,GAAG,IAAI;QACvB;QAEA,OAAO,IAAI;MACZ;MACA,OAAO,KAAK;IACb,CAAC,CAAC;EACH,CAAC,CAAC;;EAEF;EACAhB,KAAK,CAACU,KAAK,CAACC,GAAG,CAAC,gBAAgB,EAAE,UAAUC,GAAG,EAAE;IAChDZ,KAAK,CAACG,SAAS,CAAC,mBAAmB,CAAC,CAACgB,oBAAoB,CAACP,GAAG,EAAE,KAAK,CAAC;EACtE,CAAC,CAAC;AAEH,CAAC,EAACZ,KAAK,CAAC"},"metadata":{},"sourceType":"script"}