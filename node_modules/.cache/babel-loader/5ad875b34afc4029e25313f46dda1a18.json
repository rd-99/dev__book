{"ast":null,"code":"import * as React from 'react';\nimport { selectWord, getBreaksNeededForEmptyLineBefore, getBreaksNeededForEmptyLineAfter } from '../utils/markdownUtils';\nexport var code = {\n  name: 'code',\n  keyCommand: 'code',\n  buttonProps: {\n    'aria-label': 'Insert code'\n  },\n  icon: /*#__PURE__*/React.createElement(\"svg\", {\n    width: \"12\",\n    height: \"12\",\n    role: \"img\",\n    viewBox: \"0 0 640 512\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M278.9 511.5l-61-17.7c-6.4-1.8-10-8.5-8.2-14.9L346.2 8.7c1.8-6.4 8.5-10 14.9-8.2l61 17.7c6.4 1.8 10 8.5 8.2 14.9L293.8 503.3c-1.9 6.4-8.5 10.1-14.9 8.2zm-114-112.2l43.5-46.4c4.6-4.9 4.3-12.7-.8-17.2L117 256l90.6-79.7c5.1-4.5 5.5-12.3.8-17.2l-43.5-46.4c-4.5-4.8-12.1-5.1-17-.5L3.8 247.2c-5.1 4.7-5.1 12.8 0 17.5l144.1 135.1c4.9 4.6 12.5 4.4 17-.5zm327.2.6l144.1-135.1c5.1-4.7 5.1-12.8 0-17.5L492.1 112.1c-4.8-4.5-12.4-4.3-17 .5L431.6 159c-4.6 4.9-4.3 12.7.8 17.2L523 256l-90.6 79.7c-5.1 4.5-5.5 12.3-.8 17.2l43.5 46.4c4.5 4.9 12.1 5.1 17 .6z\"\n  })),\n  execute: function execute(tate, api) {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    var newSelectionRange = selectWord({\n      text: tate.text,\n      selection: tate.selection\n    });\n    var state1 = api.setSelectionRange(newSelectionRange); // when there's no breaking line\n\n    if (state1.selectedText.indexOf(\"\\n\") === -1) {\n      api.replaceSelection(\"`\".concat(state1.selectedText, \"`\")); // Adjust the selection to not contain the **\n\n      var _selectionStart = state1.selection.start + 1;\n      var _selectionEnd = _selectionStart + state1.selectedText.length;\n      api.setSelectionRange({\n        start: _selectionStart,\n        end: _selectionEnd\n      });\n      return;\n    }\n    var breaksBeforeCount = getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n    var breaksBefore = Array(breaksBeforeCount + 1).join(\"\\n\");\n    var breaksAfterCount = getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n    var breaksAfter = Array(breaksAfterCount + 1).join(\"\\n\");\n    api.replaceSelection(\"\".concat(breaksBefore, \"```\\n\").concat(state1.selectedText, \"\\n```\").concat(breaksAfter));\n    var selectionStart = state1.selection.start + breaksBeforeCount + 4;\n    var selectionEnd = selectionStart + state1.selectedText.length;\n    api.setSelectionRange({\n      start: selectionStart,\n      end: selectionEnd\n    });\n  }\n};","map":{"version":3,"names":["React","selectWord","getBreaksNeededForEmptyLineBefore","getBreaksNeededForEmptyLineAfter","code","name","keyCommand","buttonProps","icon","createElement","width","height","role","viewBox","fill","d","execute","tate","api","newSelectionRange","text","selection","state1","setSelectionRange","selectedText","indexOf","replaceSelection","concat","_selectionStart","start","_selectionEnd","length","end","breaksBeforeCount","breaksBefore","Array","join","breaksAfterCount","breaksAfter","selectionStart","selectionEnd"],"sources":["../../../src/commands/code.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ICommand, TextState, TextApi } from './';\nimport { selectWord, getBreaksNeededForEmptyLineBefore, getBreaksNeededForEmptyLineAfter } from '../utils/markdownUtils';\n\nexport const code: ICommand = {\n  name: 'code',\n  keyCommand: 'code',\n  buttonProps: { 'aria-label': 'Insert code' },\n  icon: (\n    <svg width=\"12\" height=\"12\" role=\"img\" viewBox=\"0 0 640 512\">\n      <path fill=\"currentColor\" d=\"M278.9 511.5l-61-17.7c-6.4-1.8-10-8.5-8.2-14.9L346.2 8.7c1.8-6.4 8.5-10 14.9-8.2l61 17.7c6.4 1.8 10 8.5 8.2 14.9L293.8 503.3c-1.9 6.4-8.5 10.1-14.9 8.2zm-114-112.2l43.5-46.4c4.6-4.9 4.3-12.7-.8-17.2L117 256l90.6-79.7c5.1-4.5 5.5-12.3.8-17.2l-43.5-46.4c-4.5-4.8-12.1-5.1-17-.5L3.8 247.2c-5.1 4.7-5.1 12.8 0 17.5l144.1 135.1c4.9 4.6 12.5 4.4 17-.5zm327.2.6l144.1-135.1c5.1-4.7 5.1-12.8 0-17.5L492.1 112.1c-4.8-4.5-12.4-4.3-17 .5L431.6 159c-4.6 4.9-4.3 12.7.8 17.2L523 256l-90.6 79.7c-5.1 4.5-5.5 12.3-.8 17.2l43.5 46.4c4.5 4.9 12.1 5.1 17 .6z\" />\n    </svg>\n  ),\n  execute: (tate: TextState, api: TextApi) => {\n    // Adjust the selection to encompass the whole word if the caret is inside one\n    const newSelectionRange = selectWord({ text: tate.text, selection: tate.selection });\n    const state1 = api.setSelectionRange(newSelectionRange);\n\n    // when there's no breaking line\n    if (state1.selectedText.indexOf(\"\\n\") === -1) {\n      api.replaceSelection(`\\`${state1.selectedText}\\``);\n      // Adjust the selection to not contain the **\n\n      const selectionStart = state1.selection.start + 1;\n      const selectionEnd = selectionStart + state1.selectedText.length;\n\n      api.setSelectionRange({\n        start: selectionStart,\n        end: selectionEnd\n      });\n      return;\n    }\n\n    const breaksBeforeCount = getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);\n    const breaksBefore = Array(breaksBeforeCount + 1).join(\"\\n\");\n\n    const breaksAfterCount = getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);\n    const breaksAfter = Array(breaksAfterCount + 1).join(\"\\n\");\n\n    api.replaceSelection(`${breaksBefore}\\`\\`\\`\\n${state1.selectedText}\\n\\`\\`\\`${breaksAfter}`);\n\n    const selectionStart = state1.selection.start + breaksBeforeCount + 4;\n    const selectionEnd = selectionStart + state1.selectedText.length;\n\n    api.setSelectionRange({\n      start: selectionStart,\n      end: selectionEnd\n    });\n  },\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,UAAT,EAAqBC,iCAArB,EAAwDC,gCAAxD,QAAgG,wBAAhG;AAEA,OAAO,IAAMC,IAAc,GAAG;EAC5BC,IAAI,EAAE,MADsB;EAE5BC,UAAU,EAAE,MAFgB;EAG5BC,WAAW,EAAE;IAAE,cAAc;EAAhB,CAHe;EAI5BC,IAAI,eACFR,KAAA,CAAAS,aAAA;IAAKC,KAAK,EAAC,IAAX;IAAgBC,MAAM,EAAC,IAAvB;IAA4BC,IAAI,EAAC,KAAjC;IAAuCC,OAAO,EAAC;EAA/C,gBACEb,KAAA,CAAAS,aAAA;IAAMK,IAAI,EAAC,cAAX;IAA0BC,CAAC,EAAC;EAA5B,EADF,CAL0B;EAS5BC,OAAO,EAAE,SAAAA,QAACC,IAAD,EAAkBC,GAAlB,EAAmC;IAC1C;IACA,IAAMC,iBAAiB,GAAGlB,UAAU,CAAC;MAAEmB,IAAI,EAAEH,IAAI,CAACG,IAAb;MAAmBC,SAAS,EAAEJ,IAAI,CAACI;IAAnC,CAAD,CAApC;IACA,IAAMC,MAAM,GAAGJ,GAAG,CAACK,iBAAJ,CAAsBJ,iBAAtB,CAAf,CAH0C,CAK1C;;IACA,IAAIG,MAAM,CAACE,YAAP,CAAoBC,OAApB,CAA4B,IAA5B,MAAsC,CAAC,CAA3C,EAA8C;MAC5CP,GAAG,CAACQ,gBAAJ,KAAAC,MAAA,CAA0BL,MAAM,CAACE,YAAjC,QAD4C,CAE5C;;MAEA,IAAMI,eAAc,GAAGN,MAAM,CAACD,SAAP,CAAiBQ,KAAjB,GAAyB,CAAhD;MACA,IAAMC,aAAY,GAAGF,eAAc,GAAGN,MAAM,CAACE,YAAP,CAAoBO,MAA1D;MAEAb,GAAG,CAACK,iBAAJ,CAAsB;QACpBM,KAAK,EAAED,eADa;QAEpBI,GAAG,EAAEF;MAFe,CAAtB;MAIA;IACD;IAED,IAAMG,iBAAiB,GAAG/B,iCAAiC,CAACoB,MAAM,CAACF,IAAR,EAAcE,MAAM,CAACD,SAAP,CAAiBQ,KAA/B,CAA3D;IACA,IAAMK,YAAY,GAAGC,KAAK,CAACF,iBAAiB,GAAG,CAArB,CAAL,CAA6BG,IAA7B,CAAkC,IAAlC,CAArB;IAEA,IAAMC,gBAAgB,GAAGlC,gCAAgC,CAACmB,MAAM,CAACF,IAAR,EAAcE,MAAM,CAACD,SAAP,CAAiBW,GAA/B,CAAzD;IACA,IAAMM,WAAW,GAAGH,KAAK,CAACE,gBAAgB,GAAG,CAApB,CAAL,CAA4BD,IAA5B,CAAiC,IAAjC,CAApB;IAEAlB,GAAG,CAACQ,gBAAJ,IAAAC,MAAA,CAAwBO,YAAxB,WAAAP,MAAA,CAA+CL,MAAM,CAACE,YAAtD,WAAAG,MAAA,CAA6EW,WAA7E;IAEA,IAAMC,cAAc,GAAGjB,MAAM,CAACD,SAAP,CAAiBQ,KAAjB,GAAyBI,iBAAzB,GAA6C,CAApE;IACA,IAAMO,YAAY,GAAGD,cAAc,GAAGjB,MAAM,CAACE,YAAP,CAAoBO,MAA1D;IAEAb,GAAG,CAACK,iBAAJ,CAAsB;MACpBM,KAAK,EAAEU,cADa;MAEpBP,GAAG,EAAEQ;IAFe,CAAtB;EAID;AA5C2B,CAAvB"},"metadata":{},"sourceType":"module"}